// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/quality_of_service.proto

#include "flyteidl/admin/quality_of_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QualityOfServiceSpec_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto;
namespace flyteidl {
namespace admin {
class QualityOfServiceSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QualityOfServiceSpec> _instance;
} _QualityOfServiceSpec_default_instance_;
class QualityOfServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QualityOfService> _instance;
  int tier_;
  const ::flyteidl::admin::QualityOfServiceSpec* spec_;
} _QualityOfService_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsQualityOfServiceSpec_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_QualityOfServiceSpec_default_instance_;
    new (ptr) ::flyteidl::admin::QualityOfServiceSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::QualityOfServiceSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QualityOfServiceSpec_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQualityOfServiceSpec_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto}, {}};

static void InitDefaultsQualityOfService_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_QualityOfService_default_instance_;
    new (ptr) ::flyteidl::admin::QualityOfService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::QualityOfService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QualityOfService_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQualityOfService_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto}, {
      &scc_info_QualityOfServiceSpec_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_QualityOfServiceSpec_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QualityOfService_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::QualityOfServiceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::QualityOfServiceSpec, queueing_budget_mins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::QualityOfService, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::QualityOfService, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::QualityOfServiceDefaultTypeInternal, tier_),
  offsetof(::flyteidl::admin::QualityOfServiceDefaultTypeInternal, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::QualityOfService, designation_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::QualityOfServiceSpec)},
  { 6, -1, sizeof(::flyteidl::admin::QualityOfService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_QualityOfServiceSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_QualityOfService_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto, "flyteidl/admin/quality_of_service.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto, 2, file_level_enum_descriptors_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto[] =
  "\n\'flyteidl/admin/quality_of_service.prot"
  "o\022\016flyteidl.admin\"4\n\024QualityOfServiceSpe"
  "c\022\034\n\024queueing_budget_mins\030\001 \001(\r\"\304\001\n\020Qual"
  "ityOfService\0225\n\004tier\030\001 \001(\0162%.flyteidl.ad"
  "min.QualityOfService.TierH\000\0224\n\004spec\030\002 \001("
  "\0132$.flyteidl.admin.QualityOfServiceSpecH"
  "\000\"4\n\004Tier\022\r\n\tUNDEFINED\020\000\022\010\n\004HIGH\020\001\022\n\n\006ME"
  "DIUM\020\002\022\007\n\003LOW\020\003B\r\n\013designationB3Z1github"
  ".com/lyft/flyteidl/gen/pb-go/flyteidl/ad"
  "minb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto,
  "flyteidl/admin/quality_of_service.proto", &assign_descriptors_table_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto, 371,
};

void AddDescriptors_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto(); return true; }();
namespace flyteidl {
namespace admin {
const ::google::protobuf::EnumDescriptor* QualityOfService_Tier_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto[0];
}
bool QualityOfService_Tier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QualityOfService_Tier QualityOfService::UNDEFINED;
const QualityOfService_Tier QualityOfService::HIGH;
const QualityOfService_Tier QualityOfService::MEDIUM;
const QualityOfService_Tier QualityOfService::LOW;
const QualityOfService_Tier QualityOfService::Tier_MIN;
const QualityOfService_Tier QualityOfService::Tier_MAX;
const int QualityOfService::Tier_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void QualityOfServiceSpec::InitAsDefaultInstance() {
}
class QualityOfServiceSpec::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QualityOfServiceSpec::kQueueingBudgetMinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QualityOfServiceSpec::QualityOfServiceSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.QualityOfServiceSpec)
}
QualityOfServiceSpec::QualityOfServiceSpec(const QualityOfServiceSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queueing_budget_mins_ = from.queueing_budget_mins_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.QualityOfServiceSpec)
}

void QualityOfServiceSpec::SharedCtor() {
  queueing_budget_mins_ = 0u;
}

QualityOfServiceSpec::~QualityOfServiceSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.QualityOfServiceSpec)
  SharedDtor();
}

void QualityOfServiceSpec::SharedDtor() {
}

void QualityOfServiceSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QualityOfServiceSpec& QualityOfServiceSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QualityOfServiceSpec_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto.base);
  return *internal_default_instance();
}


void QualityOfServiceSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.QualityOfServiceSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queueing_budget_mins_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QualityOfServiceSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QualityOfServiceSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 queueing_budget_mins = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_queueing_budget_mins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QualityOfServiceSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.QualityOfServiceSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 queueing_budget_mins = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueing_budget_mins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.QualityOfServiceSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.QualityOfServiceSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QualityOfServiceSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.QualityOfServiceSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 queueing_budget_mins = 1;
  if (this->queueing_budget_mins() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueing_budget_mins(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.QualityOfServiceSpec)
}

::google::protobuf::uint8* QualityOfServiceSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.QualityOfServiceSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 queueing_budget_mins = 1;
  if (this->queueing_budget_mins() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueing_budget_mins(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.QualityOfServiceSpec)
  return target;
}

size_t QualityOfServiceSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.QualityOfServiceSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 queueing_budget_mins = 1;
  if (this->queueing_budget_mins() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->queueing_budget_mins());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QualityOfServiceSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.QualityOfServiceSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const QualityOfServiceSpec* source =
      ::google::protobuf::DynamicCastToGenerated<QualityOfServiceSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.QualityOfServiceSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.QualityOfServiceSpec)
    MergeFrom(*source);
  }
}

void QualityOfServiceSpec::MergeFrom(const QualityOfServiceSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.QualityOfServiceSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queueing_budget_mins() != 0) {
    set_queueing_budget_mins(from.queueing_budget_mins());
  }
}

void QualityOfServiceSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.QualityOfServiceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityOfServiceSpec::CopyFrom(const QualityOfServiceSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.QualityOfServiceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityOfServiceSpec::IsInitialized() const {
  return true;
}

void QualityOfServiceSpec::Swap(QualityOfServiceSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QualityOfServiceSpec::InternalSwap(QualityOfServiceSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(queueing_budget_mins_, other->queueing_budget_mins_);
}

::google::protobuf::Metadata QualityOfServiceSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QualityOfService::InitAsDefaultInstance() {
  ::flyteidl::admin::_QualityOfService_default_instance_.tier_ = 0;
  ::flyteidl::admin::_QualityOfService_default_instance_.spec_ = const_cast< ::flyteidl::admin::QualityOfServiceSpec*>(
      ::flyteidl::admin::QualityOfServiceSpec::internal_default_instance());
}
class QualityOfService::HasBitSetters {
 public:
  static const ::flyteidl::admin::QualityOfServiceSpec& spec(const QualityOfService* msg);
};

const ::flyteidl::admin::QualityOfServiceSpec&
QualityOfService::HasBitSetters::spec(const QualityOfService* msg) {
  return *msg->designation_.spec_;
}
void QualityOfService::set_allocated_spec(::flyteidl::admin::QualityOfServiceSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_designation();
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    set_has_spec();
    designation_.spec_ = spec;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.QualityOfService.spec)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QualityOfService::kTierFieldNumber;
const int QualityOfService::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QualityOfService::QualityOfService()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.QualityOfService)
}
QualityOfService::QualityOfService(const QualityOfService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_designation();
  switch (from.designation_case()) {
    case kTier: {
      set_tier(from.tier());
      break;
    }
    case kSpec: {
      mutable_spec()->::flyteidl::admin::QualityOfServiceSpec::MergeFrom(from.spec());
      break;
    }
    case DESIGNATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.QualityOfService)
}

void QualityOfService::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_QualityOfService_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto.base);
  clear_has_designation();
}

QualityOfService::~QualityOfService() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.QualityOfService)
  SharedDtor();
}

void QualityOfService::SharedDtor() {
  if (has_designation()) {
    clear_designation();
  }
}

void QualityOfService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QualityOfService& QualityOfService::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QualityOfService_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto.base);
  return *internal_default_instance();
}


void QualityOfService::clear_designation() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.QualityOfService)
  switch (designation_case()) {
    case kTier: {
      // No need to clear
      break;
    }
    case kSpec: {
      delete designation_.spec_;
      break;
    }
    case DESIGNATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DESIGNATION_NOT_SET;
}


void QualityOfService::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.QualityOfService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_designation();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QualityOfService::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QualityOfService*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.QualityOfService.Tier tier = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_tier(static_cast<::flyteidl::admin::QualityOfService_Tier>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.admin.QualityOfServiceSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::QualityOfServiceSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QualityOfService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.QualityOfService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.QualityOfService.Tier tier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tier(static_cast< ::flyteidl::admin::QualityOfService_Tier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.QualityOfServiceSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.QualityOfService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.QualityOfService)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QualityOfService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.QualityOfService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.QualityOfService.Tier tier = 1;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tier(), output);
  }

  // .flyteidl.admin.QualityOfServiceSpec spec = 2;
  if (has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.QualityOfService)
}

::google::protobuf::uint8* QualityOfService::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.QualityOfService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.QualityOfService.Tier tier = 1;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tier(), target);
  }

  // .flyteidl.admin.QualityOfServiceSpec spec = 2;
  if (has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.QualityOfService)
  return target;
}

size_t QualityOfService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.QualityOfService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (designation_case()) {
    // .flyteidl.admin.QualityOfService.Tier tier = 1;
    case kTier: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tier());
      break;
    }
    // .flyteidl.admin.QualityOfServiceSpec spec = 2;
    case kSpec: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *designation_.spec_);
      break;
    }
    case DESIGNATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QualityOfService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.QualityOfService)
  GOOGLE_DCHECK_NE(&from, this);
  const QualityOfService* source =
      ::google::protobuf::DynamicCastToGenerated<QualityOfService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.QualityOfService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.QualityOfService)
    MergeFrom(*source);
  }
}

void QualityOfService::MergeFrom(const QualityOfService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.QualityOfService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.designation_case()) {
    case kTier: {
      set_tier(from.tier());
      break;
    }
    case kSpec: {
      mutable_spec()->::flyteidl::admin::QualityOfServiceSpec::MergeFrom(from.spec());
      break;
    }
    case DESIGNATION_NOT_SET: {
      break;
    }
  }
}

void QualityOfService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.QualityOfService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityOfService::CopyFrom(const QualityOfService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.QualityOfService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityOfService::IsInitialized() const {
  return true;
}

void QualityOfService::Swap(QualityOfService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QualityOfService::InternalSwap(QualityOfService* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(designation_, other->designation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata QualityOfService::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fquality_5fof_5fservice_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::QualityOfServiceSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::QualityOfServiceSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::QualityOfServiceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::QualityOfService* Arena::CreateMaybeMessage< ::flyteidl::admin::QualityOfService >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::QualityOfService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
