// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/core/dynamic_job.proto

package core // import "github.com/lyft/flyteidl/gen/pb-go/flyteidl/core"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Describes a set of tasks to execute and how the final outputs are produced.
type DynamicJobSpec struct {
	// A collection of nodes to execute.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// An absolute number of successful completions of nodes required to mark this job as succeeded. As soon as this
	// criteria is met, the dynamic job will be marked as successful and outputs will be computed. If this number
	// becomes impossible to reach (e.g. number of currently running tasks + number of already succeeded tasks <
	// min_successes) the task will be aborted immediately and marked as failed. The default value of this field, if not
	// specified, is the count of nodes repeated field.
	MinSuccesses int64 `protobuf:"varint,2,opt,name=min_successes,json=minSuccesses,proto3" json:"min_successes,omitempty"`
	// Describes how to bind the final output of the dynamic job from the outputs of executed nodes. The referenced ids
	// in bindings should have the generated id for the subtask.
	Outputs []*Binding `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// [Optional] A complete list of task specs referenced in nodes.
	Tasks []*TaskTemplate `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// [Optional] A complete list of task specs referenced in nodes.
	Subworkflows         []*WorkflowTemplate `protobuf:"bytes,5,rep,name=subworkflows,proto3" json:"subworkflows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DynamicJobSpec) Reset()         { *m = DynamicJobSpec{} }
func (m *DynamicJobSpec) String() string { return proto.CompactTextString(m) }
func (*DynamicJobSpec) ProtoMessage()    {}
func (*DynamicJobSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_dynamic_job_7930b73d52e19127, []int{0}
}
func (m *DynamicJobSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynamicJobSpec.Unmarshal(m, b)
}
func (m *DynamicJobSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynamicJobSpec.Marshal(b, m, deterministic)
}
func (dst *DynamicJobSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicJobSpec.Merge(dst, src)
}
func (m *DynamicJobSpec) XXX_Size() int {
	return xxx_messageInfo_DynamicJobSpec.Size(m)
}
func (m *DynamicJobSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicJobSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicJobSpec proto.InternalMessageInfo

func (m *DynamicJobSpec) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DynamicJobSpec) GetMinSuccesses() int64 {
	if m != nil {
		return m.MinSuccesses
	}
	return 0
}

func (m *DynamicJobSpec) GetOutputs() []*Binding {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *DynamicJobSpec) GetTasks() []*TaskTemplate {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *DynamicJobSpec) GetSubworkflows() []*WorkflowTemplate {
	if m != nil {
		return m.Subworkflows
	}
	return nil
}

func init() {
	proto.RegisterType((*DynamicJobSpec)(nil), "flyteidl.core.DynamicJobSpec")
}

func init() {
	proto.RegisterFile("flyteidl/core/dynamic_job.proto", fileDescriptor_dynamic_job_7930b73d52e19127)
}

var fileDescriptor_dynamic_job_7930b73d52e19127 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x69, 0xfb, 0xf7, 0x17, 0xc6, 0xd6, 0xc5, 0x08, 0x12, 0xab, 0xd0, 0xa2, 0x9b, 0xba,
	0x30, 0x53, 0xeb, 0x1b, 0x54, 0x57, 0x2e, 0x5c, 0xa4, 0x05, 0xc1, 0x4d, 0xc9, 0x4c, 0x6e, 0xe2,
	0x98, 0xc9, 0xdc, 0x90, 0x3b, 0xa1, 0xe4, 0x15, 0x7c, 0x6a, 0x31, 0x69, 0x0a, 0xc9, 0x76, 0xce,
	0xf7, 0x9d, 0xe1, 0x1e, 0x36, 0x8f, 0x4d, 0xe5, 0x40, 0x47, 0x46, 0x28, 0x2c, 0x40, 0x44, 0x95,
	0x0d, 0x33, 0xad, 0xf6, 0xdf, 0x28, 0xfd, 0xbc, 0x40, 0x87, 0x7c, 0xda, 0x02, 0xfe, 0x1f, 0x30,
	0xbb, 0xee, 0xf2, 0x2e, 0xa4, 0x94, 0x1a, 0x72, 0x76, 0xdb, 0x8d, 0x8c, 0x76, 0x50, 0x84, 0xe6,
	0x98, 0xde, 0xfd, 0x0c, 0xd9, 0xc5, 0x6b, 0xd3, 0xfe, 0x86, 0x72, 0x9b, 0x83, 0xe2, 0x0f, 0x6c,
	0x6c, 0x31, 0x02, 0xf2, 0x06, 0x8b, 0xd1, 0xf2, 0x7c, 0x7d, 0xe9, 0x77, 0xbe, 0xf2, 0xdf, 0x31,
	0x82, 0xa0, 0x21, 0xf8, 0x3d, 0x9b, 0x66, 0xda, 0xee, 0xa9, 0x54, 0x0a, 0x88, 0x80, 0xbc, 0xe1,
	0x62, 0xb0, 0x1c, 0x05, 0x93, 0x4c, 0xdb, 0x6d, 0xfb, 0xc6, 0x57, 0xec, 0x0c, 0x4b, 0x97, 0x97,
	0x8e, 0xbc, 0x51, 0xdd, 0x78, 0xd5, 0x6b, 0xdc, 0x68, 0x1b, 0x69, 0x9b, 0x04, 0x2d, 0xc6, 0x9f,
	0xd8, 0xb8, 0xbe, 0xc0, 0xfb, 0x57, 0xf3, 0x37, 0x3d, 0x7e, 0x17, 0x52, 0xba, 0x83, 0x2c, 0x37,
	0xa1, 0x83, 0xa0, 0x21, 0xf9, 0x0b, 0x9b, 0x50, 0x29, 0x0f, 0x58, 0xa4, 0xb1, 0xc1, 0x03, 0x79,
	0xe3, 0xda, 0x9c, 0xf7, 0xcc, 0x8f, 0x63, 0x7e, 0xb2, 0x3b, 0xd2, 0x66, 0xfd, 0xb9, 0x4a, 0xb4,
	0xfb, 0x2a, 0xa5, 0xaf, 0x30, 0x13, 0xa6, 0x8a, 0x9d, 0x38, 0x8d, 0x97, 0x80, 0x15, 0xb9, 0x7c,
	0x4c, 0x50, 0x74, 0xf6, 0x94, 0xff, 0xeb, 0x1d, 0x9f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6d,
	0x49, 0x08, 0xda, 0xb2, 0x01, 0x00, 0x00,
}
