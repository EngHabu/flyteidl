syntax = "proto3";

import "flyteidl/core/interface.proto";
import "flyteidl/core/literals.proto";
import "google/protobuf/duration.proto";

package core;

option go_package = "core";

enum TaskCategory {
    // Task category that identifies if the system can use default structures in UI, etc to drive the task
    // TODO should we add Container type of tasks as a special Class?
    SingleStepTask = 0;
    MultiStepTask = 1;
}

// A customizable interface to convey resources requested for a container. This can be interpretted differently for different
// container engines.
message Resources {
    // The desired set of resources requested.
    map<string, string> requests = 1;

    // Defines a set of bounds (e.g. min/max) within which the task can reliably run.
    map<string, string> limits = 2;

    // Defines a set of bounds (e.g. min/max) within which the task can reliably run.
    map<string, string> env_dictionary = 3;
}

// Runtime information. This is losely defined to allow for extensibility.
message RuntimeMetadata {
    enum RuntimeType {
        FlyteSDK = 0;
        Other = 1;
    }

    // Type of runtime.
    RuntimeType type = 1;

    // Version of the runtime. All versions should be backward compatible. However, certain cases call for version
    // checks to ensure tighter validation or setting expectations.
    string version = 2;

    //+optional It can be used to provide extra information about the runtime (e.g. python, golang... etc.).
    string flavor = 3;
}

// Task Metadata
message TaskMetadata {
    // Indicates whether the system should attempt to lookup this task's output to avoid duplication of work.
    bool discoverable = 1;

    // Runtime information about the task.
    RuntimeMetadata runtime = 2;

    // The overall timeout of a task.
    google.protobuf.Duration timeout = 4;

    // Number of retries per task.
    RetryStrategy retries = 5;
}

// A Task structure that uniquely identifies a task in the system
// Tasks are registered as a first step in the system.
message TaskTemplate {
    // Auto generated taskId by the system. Task Id uniquely identifies this task globally.
    string id = 1;

    // Category of the task. These are predefined and help provide defaults
    TaskCategory category = 2;

    // A predefined yet extensible Task type identifier. This can be used to customize any of the components. If no
    // extensions are provided in the system, Flyte will resolve the this task to its TaskCategory and default the
    // implementation registered for the TaskCategory.
    string type = 3;

    // Extra metadata about the task.
    TaskMetadata metadata = 4;

    // A strongly typed interface for the task. This enables others to use this task within a workflow and gauarantees
    // compile-time validation of the workflow to avoid costly runtime failures.
    TypedInterface interface = 5;

    // Custom data about the task. This is extensible to allow various plugins in the system.
    bytes custom = 6;

    // Known task types that the system will guarantee plugins for. Custom SDK plugins are allowed to set these if needed.
    // If no corresponding execution-layer plugins are found, the system will default to handling these using built-in
    // handlers.
    oneof task {
        Container container = 7;
    }
}

// ----------------- First class Plugins

message Container {
    // Container image url. Eg: docker/redis:latest
    string image = 1;

    // Command to be executed, if not provided, the default entrypoint in the container image will be used.
    repeated string command = 2;

    // These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
    // needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
    // system will populate these before executing the container.
    repeated string args = 3;

    // Container resources requirement as specified by the container engine.
    Resources resources = 4;

    // Environment variables will be set as the container is starting up.
    repeated KeyValuePair env = 5;

    // Allows extra configs to be available for the container.
    // TODO: elaborate on how configs will become available.
    repeated KeyValuePair config = 6;
}
