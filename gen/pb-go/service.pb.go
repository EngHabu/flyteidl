// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package lyft_flyte_flyteadmin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// DeepEnum is one or zero.
type Pet_Nested_DeepEnum int32

const (
	// FALSE is false.
	Pet_Nested_FALSE Pet_Nested_DeepEnum = 0
	// TRUE is true.
	Pet_Nested_TRUE Pet_Nested_DeepEnum = 1
)

var Pet_Nested_DeepEnum_name = map[int32]string{
	0: "FALSE",
	1: "TRUE",
}
var Pet_Nested_DeepEnum_value = map[string]int32{
	"FALSE": 0,
	"TRUE":  1,
}

func (x Pet_Nested_DeepEnum) String() string {
	return proto.EnumName(Pet_Nested_DeepEnum_name, int32(x))
}
func (Pet_Nested_DeepEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_service_689f1c794824ba47, []int{1, 0, 0}
}

type EchoMessage struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoMessage) Reset()         { *m = EchoMessage{} }
func (m *EchoMessage) String() string { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()    {}
func (*EchoMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_689f1c794824ba47, []int{0}
}
func (m *EchoMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoMessage.Unmarshal(m, b)
}
func (m *EchoMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoMessage.Marshal(b, m, deterministic)
}
func (dst *EchoMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoMessage.Merge(dst, src)
}
func (m *EchoMessage) XXX_Size() int {
	return xxx_messageInfo_EchoMessage.Size(m)
}
func (m *EchoMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EchoMessage proto.InternalMessageInfo

func (m *EchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Pet struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          *Pet_Nested `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Pet) Reset()         { *m = Pet{} }
func (m *Pet) String() string { return proto.CompactTextString(m) }
func (*Pet) ProtoMessage()    {}
func (*Pet) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_689f1c794824ba47, []int{1}
}
func (m *Pet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pet.Unmarshal(m, b)
}
func (m *Pet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pet.Marshal(b, m, deterministic)
}
func (dst *Pet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pet.Merge(dst, src)
}
func (m *Pet) XXX_Size() int {
	return xxx_messageInfo_Pet.Size(m)
}
func (m *Pet) XXX_DiscardUnknown() {
	xxx_messageInfo_Pet.DiscardUnknown(m)
}

var xxx_messageInfo_Pet proto.InternalMessageInfo

func (m *Pet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pet) GetDescription() *Pet_Nested {
	if m != nil {
		return m.Description
	}
	return nil
}

type Pet_Nested struct {
	Colors               []string            `protobuf:"bytes,1,rep,name=colors,proto3" json:"colors,omitempty"`
	Fluffiness           uint32              `protobuf:"varint,2,opt,name=fluffiness,proto3" json:"fluffiness,omitempty"`
	Ok                   Pet_Nested_DeepEnum `protobuf:"varint,3,opt,name=ok,proto3,enum=lyft.flyte.flyteadmin.Pet_Nested_DeepEnum" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Pet_Nested) Reset()         { *m = Pet_Nested{} }
func (m *Pet_Nested) String() string { return proto.CompactTextString(m) }
func (*Pet_Nested) ProtoMessage()    {}
func (*Pet_Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_689f1c794824ba47, []int{1, 0}
}
func (m *Pet_Nested) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pet_Nested.Unmarshal(m, b)
}
func (m *Pet_Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pet_Nested.Marshal(b, m, deterministic)
}
func (dst *Pet_Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pet_Nested.Merge(dst, src)
}
func (m *Pet_Nested) XXX_Size() int {
	return xxx_messageInfo_Pet_Nested.Size(m)
}
func (m *Pet_Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_Pet_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_Pet_Nested proto.InternalMessageInfo

func (m *Pet_Nested) GetColors() []string {
	if m != nil {
		return m.Colors
	}
	return nil
}

func (m *Pet_Nested) GetFluffiness() uint32 {
	if m != nil {
		return m.Fluffiness
	}
	return 0
}

func (m *Pet_Nested) GetOk() Pet_Nested_DeepEnum {
	if m != nil {
		return m.Ok
	}
	return Pet_Nested_FALSE
}

type Human struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Human) Reset()         { *m = Human{} }
func (m *Human) String() string { return proto.CompactTextString(m) }
func (*Human) ProtoMessage()    {}
func (*Human) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_689f1c794824ba47, []int{2}
}
func (m *Human) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Human.Unmarshal(m, b)
}
func (m *Human) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Human.Marshal(b, m, deterministic)
}
func (dst *Human) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Human.Merge(dst, src)
}
func (m *Human) XXX_Size() int {
	return xxx_messageInfo_Human.Size(m)
}
func (m *Human) XXX_DiscardUnknown() {
	xxx_messageInfo_Human.DiscardUnknown(m)
}

var xxx_messageInfo_Human proto.InternalMessageInfo

func (m *Human) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoMessage)(nil), "lyft.flyte.flyteadmin.EchoMessage")
	proto.RegisterType((*Pet)(nil), "lyft.flyte.flyteadmin.Pet")
	proto.RegisterType((*Pet_Nested)(nil), "lyft.flyte.flyteadmin.Pet.Nested")
	proto.RegisterType((*Human)(nil), "lyft.flyte.flyteadmin.Human")
	proto.RegisterEnum("lyft.flyte.flyteadmin.Pet_Nested_DeepEnum", Pet_Nested_DeepEnum_name, Pet_Nested_DeepEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, "/lyft.flyte.flyteadmin.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lyft.flyte.flyteadmin.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lyft.flyte.flyteadmin.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// PetServiceClient is the client API for PetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PetServiceClient interface {
	Create(ctx context.Context, in *Pet, opts ...grpc.CallOption) (*Pet, error)
}

type petServiceClient struct {
	cc *grpc.ClientConn
}

func NewPetServiceClient(cc *grpc.ClientConn) PetServiceClient {
	return &petServiceClient{cc}
}

func (c *petServiceClient) Create(ctx context.Context, in *Pet, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/lyft.flyte.flyteadmin.PetService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetServiceServer is the server API for PetService service.
type PetServiceServer interface {
	Create(context.Context, *Pet) (*Pet, error)
}

func RegisterPetServiceServer(s *grpc.Server, srv PetServiceServer) {
	s.RegisterService(&_PetService_serviceDesc, srv)
}

func _PetService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lyft.flyte.flyteadmin.PetService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).Create(ctx, req.(*Pet))
	}
	return interceptor(ctx, in, info, handler)
}

var _PetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lyft.flyte.flyteadmin.PetService",
	HandlerType: (*PetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PetService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_689f1c794824ba47) }

var fileDescriptor_service_689f1c794824ba47 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x71, 0xda, 0x46, 0xed, 0x54, 0xad, 0x2a, 0x17, 0x50, 0x08, 0x08, 0x82, 0xb9, 0x44,
	0x3d, 0x24, 0x22, 0xdc, 0x7a, 0x43, 0x25, 0x88, 0x03, 0xa0, 0x2a, 0x85, 0x13, 0x27, 0x93, 0x4e,
	0xda, 0xa8, 0x89, 0x1d, 0xc5, 0x4e, 0xa5, 0x0a, 0x71, 0xe1, 0x15, 0x38, 0xf3, 0x54, 0xbc, 0xc2,
	0x3e, 0xc7, 0x6a, 0x95, 0x64, 0x2b, 0xf5, 0xd0, 0xee, 0xee, 0xc5, 0xf2, 0x3f, 0xe3, 0xf1, 0x37,
	0xf3, 0xdb, 0x30, 0x52, 0x58, 0xee, 0xd3, 0x18, 0xbd, 0xa2, 0x94, 0x5a, 0xd2, 0x27, 0xd9, 0x21,
	0xd1, 0x5e, 0x92, 0x1d, 0x34, 0xb6, 0x2b, 0x5f, 0xe7, 0xa9, 0xb0, 0x5f, 0x6c, 0xa4, 0xdc, 0x64,
	0xe8, 0xf3, 0x22, 0xf5, 0xb9, 0x10, 0x52, 0x73, 0x9d, 0x4a, 0xa1, 0xda, 0x22, 0xf6, 0x06, 0x86,
	0x61, 0xbc, 0x95, 0x5f, 0x50, 0x29, 0xbe, 0x41, 0xfa, 0x18, 0x7a, 0x7b, 0x9e, 0x55, 0x68, 0x11,
	0x87, 0xb8, 0x83, 0xa8, 0x15, 0xec, 0x9a, 0x40, 0x67, 0x89, 0x9a, 0x52, 0xe8, 0x0a, 0x9e, 0x1f,
	0x93, 0xcd, 0x9e, 0x2e, 0x60, 0xb8, 0x46, 0x15, 0x97, 0x69, 0x51, 0x5f, 0x6b, 0x75, 0x1c, 0xe2,
	0x0e, 0x83, 0xd7, 0xde, 0xd9, 0x5e, 0xbc, 0x25, 0x6a, 0xef, 0x2b, 0x2a, 0x8d, 0xeb, 0xe8, 0xb4,
	0xca, 0xfe, 0x47, 0xc0, 0x6c, 0xe3, 0xf4, 0x29, 0x98, 0xb1, 0xcc, 0x64, 0xa9, 0x2c, 0xe2, 0x74,
	0xdc, 0x41, 0x74, 0xab, 0xe8, 0x4b, 0x80, 0x24, 0xab, 0x92, 0x24, 0x15, 0xa8, 0x94, 0x65, 0x38,
	0xc4, 0x1d, 0x45, 0x27, 0x11, 0x3a, 0x07, 0x43, 0xee, 0x1a, 0xfc, 0x38, 0x98, 0xdd, 0x8b, 0xf7,
	0x3e, 0x20, 0x16, 0xa1, 0xa8, 0xf2, 0xc8, 0x90, 0x3b, 0xf6, 0x0a, 0xfa, 0x47, 0x4d, 0x07, 0xd0,
	0xfb, 0xf8, 0xfe, 0xf3, 0x2a, 0x9c, 0x3c, 0xa2, 0x7d, 0xe8, 0x7e, 0x8b, 0xbe, 0x87, 0x13, 0xc2,
	0x9e, 0x43, 0xef, 0x53, 0x95, 0x73, 0x71, 0xce, 0x81, 0xa0, 0x6c, 0x2d, 0x5c, 0xb5, 0x8f, 0x41,
	0x63, 0xe8, 0xd6, 0x92, 0xb2, 0x0b, 0x4d, 0x9c, 0xd8, 0x6d, 0x3f, 0xe0, 0x0c, 0x9b, 0xfe, 0xf9,
	0x7f, 0xf5, 0xd7, 0x18, 0xb1, 0xbe, 0xbf, 0x7f, 0xeb, 0x63, 0xbc, 0x95, 0x73, 0x32, 0x0b, 0x52,
	0x80, 0x25, 0xea, 0x23, 0xf2, 0x07, 0x98, 0x8b, 0x12, 0xb9, 0x46, 0x6a, 0x5f, 0x9e, 0xdc, 0xbe,
	0x23, 0xc7, 0x9e, 0x35, 0x90, 0x29, 0x1b, 0xd7, 0x90, 0x02, 0xb5, 0xff, 0xab, 0x1e, 0xed, 0xf7,
	0x9c, 0xcc, 0x7e, 0x9a, 0xcd, 0x47, 0x79, 0x77, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x10, 0xf8,
	0xbe, 0x6e, 0x02, 0x00, 0x00,
}
