// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/datacatalog/datacatalog.proto

package datacatalog

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreateDatasetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDatasetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDataset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDatasetRequestValidationError{
				field:  "Dataset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateDatasetRequestValidationError is the validation error returned by
// CreateDatasetRequest.Validate if the designated constraints aren't met.
type CreateDatasetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDatasetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDatasetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDatasetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDatasetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDatasetRequestValidationError) ErrorName() string {
	return "CreateDatasetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDatasetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDatasetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDatasetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDatasetRequestValidationError{}

// Validate checks the field values on CreateDatasetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDatasetResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateDatasetResponseValidationError is the validation error returned by
// CreateDatasetResponse.Validate if the designated constraints aren't met.
type CreateDatasetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDatasetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDatasetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDatasetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDatasetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDatasetResponseValidationError) ErrorName() string {
	return "CreateDatasetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDatasetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDatasetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDatasetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDatasetResponseValidationError{}

// Validate checks the field values on GetDatasetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetDatasetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDataset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDatasetRequestValidationError{
				field:  "Dataset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDatasetRequestValidationError is the validation error returned by
// GetDatasetRequest.Validate if the designated constraints aren't met.
type GetDatasetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDatasetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDatasetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDatasetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDatasetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDatasetRequestValidationError) ErrorName() string {
	return "GetDatasetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDatasetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDatasetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDatasetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDatasetRequestValidationError{}

// Validate checks the field values on GetDatasetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDatasetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDataset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDatasetResponseValidationError{
				field:  "Dataset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDatasetResponseValidationError is the validation error returned by
// GetDatasetResponse.Validate if the designated constraints aren't met.
type GetDatasetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDatasetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDatasetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDatasetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDatasetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDatasetResponseValidationError) ErrorName() string {
	return "GetDatasetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDatasetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDatasetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDatasetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDatasetResponseValidationError{}

// Validate checks the field values on GetArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDataset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArtifactRequestValidationError{
				field:  "Dataset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.QueryHandle.(type) {

	case *GetArtifactRequest_ArtifactId:
		// no validation rules for ArtifactId

	case *GetArtifactRequest_TagName:
		// no validation rules for TagName

	}

	return nil
}

// GetArtifactRequestValidationError is the validation error returned by
// GetArtifactRequest.Validate if the designated constraints aren't met.
type GetArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactRequestValidationError) ErrorName() string {
	return "GetArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactRequestValidationError{}

// Validate checks the field values on GetArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArtifactResponseValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetArtifactResponseValidationError is the validation error returned by
// GetArtifactResponse.Validate if the designated constraints aren't met.
type GetArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactResponseValidationError) ErrorName() string {
	return "GetArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactResponseValidationError{}

// Validate checks the field values on CreateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactRequestValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateArtifactRequestValidationError is the validation error returned by
// CreateArtifactRequest.Validate if the designated constraints aren't met.
type CreateArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactRequestValidationError) ErrorName() string {
	return "CreateArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactRequestValidationError{}

// Validate checks the field values on CreateArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateArtifactResponseValidationError is the validation error returned by
// CreateArtifactResponse.Validate if the designated constraints aren't met.
type CreateArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactResponseValidationError) ErrorName() string {
	return "CreateArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactResponseValidationError{}

// Validate checks the field values on AddTagRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddTagRequestValidationError{
				field:  "Tag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddTagRequestValidationError is the validation error returned by
// AddTagRequest.Validate if the designated constraints aren't met.
type AddTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTagRequestValidationError) ErrorName() string { return "AddTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTagRequestValidationError{}

// Validate checks the field values on AddTagResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddTagResponseValidationError is the validation error returned by
// AddTagResponse.Validate if the designated constraints aren't met.
type AddTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTagResponseValidationError) ErrorName() string { return "AddTagResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTagResponseValidationError{}

// Validate checks the field values on Dataset with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Dataset) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DatasetValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DatasetValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DatasetValidationError is the validation error returned by Dataset.Validate
// if the designated constraints aren't met.
type DatasetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetValidationError) ErrorName() string { return "DatasetValidationError" }

// Error satisfies the builtin error interface
func (e DatasetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetValidationError{}

// Validate checks the field values on DatasetID with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DatasetID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Project

	// no validation rules for Name

	// no validation rules for Domain

	// no validation rules for Version

	return nil
}

// DatasetIDValidationError is the validation error returned by
// DatasetID.Validate if the designated constraints aren't met.
type DatasetIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetIDValidationError) ErrorName() string { return "DatasetIDValidationError" }

// Error satisfies the builtin error interface
func (e DatasetIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatasetID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetIDValidationError{}

// Validate checks the field values on Artifact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Artifact) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetDataset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactValidationError{
				field:  "Dataset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ArtifactValidationError is the validation error returned by
// Artifact.Validate if the designated constraints aren't met.
type ArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactValidationError) ErrorName() string { return "ArtifactValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactValidationError{}

// Validate checks the field values on ArtifactData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ArtifactData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactDataValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ArtifactDataValidationError is the validation error returned by
// ArtifactData.Validate if the designated constraints aren't met.
type ArtifactDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactDataValidationError) ErrorName() string { return "ArtifactDataValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactDataValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Tag) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for ArtifactId

	if v, ok := interface{}(m.GetDataset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagValidationError{
				field:  "Dataset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for KeyMap

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}
