syntax = "proto3";

package flyteidl.admin;
option go_package = "github.com/lyft/flyteidl/gen/pb-go/flyteidl/admin";

import "flyteidl/core/literals.proto";
import "flyteidl/core/identifier.proto";
import "flyteidl/core/interface.proto";
import "flyteidl/admin/schedule.proto";
import "flyteidl/admin/common.proto";
import "google/protobuf/timestamp.proto";

message LaunchPlanCreateRequest {
    core.Identifier id       = 1;

    LaunchPlanSpec spec      = 2;
}

message LaunchPlanCreateResponse {
    // Purposefully empty, may be populated in the future.
}

// Indicates various states of an Execution - both task and workflow
enum LaunchPlanState {
    INACTIVE		= 0;
    ACTIVE		= 1;
}

message LaunchPlan {
    core.Identifier id       	= 1;

    LaunchPlanSpec spec 	= 2;
    LaunchPlanClosure closure	= 3;
}

message LaunchPlanList {
    repeated LaunchPlan launch_plans = 1;

    // In the case of multiple pages of results, the server-provided token can be used to fetch the next page
    // in a query. If there are no more results, this value will be empty.
    string token                     = 2;
}

message LaunchPlanSpec {
    // Reference to the Workflow template that the launch plan references
    core.Identifier workflow_id           = 1;

    // Metadata for the Launch Plan
    LaunchPlanMetadata entity_metadata    = 2;

    // Input values to be passed for the execution
    core.ParameterMap default_inputs      = 3;

    // Fixed, non-overridable inputs for the Launch Plan
    core.LiteralMap fixed_inputs          = 4;

    // String to indicate the role to use to execute the workflow underneath
    string role                           = 5;
}

message LaunchPlanClosure {
    // Indicate the Launch plan phase
    LaunchPlanState state		= 1;

    // Indicates the set of inputs to execute the Launch plan
    core.ParameterMap expected_inputs	= 2;

    // Indicates the set of outputs from the Launch plan
    core.VariableMap expected_outputs	= 3;

    // Time at which the launch plan was created.
    google.protobuf.Timestamp created_at = 4;
    
    // Time at which the launch plan was last updated.
    google.protobuf.Timestamp updated_at = 5;
}

message LaunchPlanMetadata {
    // Schedule to execute the Launch Plan
    Schedule schedule                    = 1;

    // List of notifications based on Execution status transitions
    repeated Notification notifications  = 2;
}

message LaunchPlanUpdateRequest {
    // Identifier of launch plan for which to change state.
    core.Identifier id                   = 1;

    // Desired state to apply to the launch plan.
    LaunchPlanState state                = 2;
}

// Purposefully empty, may be populated in the future.
message LaunchPlanUpdateResponse {
}
