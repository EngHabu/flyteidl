# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.data_loading_config_blob_download import DataLoadingConfigBlobDownload  # noqa: F401,E501
from flyteadmin.models.data_loading_config_blob_upload import DataLoadingConfigBlobUpload  # noqa: F401,E501
from flyteadmin.models.data_loading_config_metadata_format import DataLoadingConfigMetadataFormat  # noqa: F401,E501


class CoreDataLoadingConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_path': 'str',
        'output_path': 'str',
        'format': 'DataLoadingConfigMetadataFormat',
        'enabled': 'bool',
        'download_strategy': 'DataLoadingConfigBlobDownload',
        'upload_strategy': 'DataLoadingConfigBlobUpload'
    }

    attribute_map = {
        'input_path': 'input_path',
        'output_path': 'output_path',
        'format': 'format',
        'enabled': 'enabled',
        'download_strategy': 'download_strategy',
        'upload_strategy': 'upload_strategy'
    }

    def __init__(self, input_path=None, output_path=None, format=None, enabled=None, download_strategy=None, upload_strategy=None):  # noqa: E501
        """CoreDataLoadingConfig - a model defined in Swagger"""  # noqa: E501

        self._input_path = None
        self._output_path = None
        self._format = None
        self._enabled = None
        self._download_strategy = None
        self._upload_strategy = None
        self.discriminator = None

        if input_path is not None:
            self.input_path = input_path
        if output_path is not None:
            self.output_path = output_path
        if format is not None:
            self.format = format
        if enabled is not None:
            self.enabled = enabled
        if download_strategy is not None:
            self.download_strategy = download_strategy
        if upload_strategy is not None:
            self.upload_strategy = upload_strategy

    @property
    def input_path(self):
        """Gets the input_path of this CoreDataLoadingConfig.  # noqa: E501


        :return: The input_path of this CoreDataLoadingConfig.  # noqa: E501
        :rtype: str
        """
        return self._input_path

    @input_path.setter
    def input_path(self, input_path):
        """Sets the input_path of this CoreDataLoadingConfig.


        :param input_path: The input_path of this CoreDataLoadingConfig.  # noqa: E501
        :type: str
        """

        self._input_path = input_path

    @property
    def output_path(self):
        """Gets the output_path of this CoreDataLoadingConfig.  # noqa: E501


        :return: The output_path of this CoreDataLoadingConfig.  # noqa: E501
        :rtype: str
        """
        return self._output_path

    @output_path.setter
    def output_path(self, output_path):
        """Sets the output_path of this CoreDataLoadingConfig.


        :param output_path: The output_path of this CoreDataLoadingConfig.  # noqa: E501
        :type: str
        """

        self._output_path = output_path

    @property
    def format(self):
        """Gets the format of this CoreDataLoadingConfig.  # noqa: E501


        :return: The format of this CoreDataLoadingConfig.  # noqa: E501
        :rtype: DataLoadingConfigMetadataFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CoreDataLoadingConfig.


        :param format: The format of this CoreDataLoadingConfig.  # noqa: E501
        :type: DataLoadingConfigMetadataFormat
        """

        self._format = format

    @property
    def enabled(self):
        """Gets the enabled of this CoreDataLoadingConfig.  # noqa: E501


        :return: The enabled of this CoreDataLoadingConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CoreDataLoadingConfig.


        :param enabled: The enabled of this CoreDataLoadingConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def download_strategy(self):
        """Gets the download_strategy of this CoreDataLoadingConfig.  # noqa: E501


        :return: The download_strategy of this CoreDataLoadingConfig.  # noqa: E501
        :rtype: DataLoadingConfigBlobDownload
        """
        return self._download_strategy

    @download_strategy.setter
    def download_strategy(self, download_strategy):
        """Sets the download_strategy of this CoreDataLoadingConfig.


        :param download_strategy: The download_strategy of this CoreDataLoadingConfig.  # noqa: E501
        :type: DataLoadingConfigBlobDownload
        """

        self._download_strategy = download_strategy

    @property
    def upload_strategy(self):
        """Gets the upload_strategy of this CoreDataLoadingConfig.  # noqa: E501


        :return: The upload_strategy of this CoreDataLoadingConfig.  # noqa: E501
        :rtype: DataLoadingConfigBlobUpload
        """
        return self._upload_strategy

    @upload_strategy.setter
    def upload_strategy(self, upload_strategy):
        """Sets the upload_strategy of this CoreDataLoadingConfig.


        :param upload_strategy: The upload_strategy of this CoreDataLoadingConfig.  # noqa: E501
        :type: DataLoadingConfigBlobUpload
        """

        self._upload_strategy = upload_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreDataLoadingConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreDataLoadingConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
