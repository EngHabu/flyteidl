// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/qubole.proto

#include "flyteidl/plugins/qubole.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace plugins {
class HiveQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HiveQuery>
      _instance;
} _HiveQuery_default_instance_;
class HiveQueryCollectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HiveQueryCollection>
      _instance;
} _HiveQueryCollection_default_instance_;
class QuboleHiveJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuboleHiveJob>
      _instance;
} _QuboleHiveJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace protobuf_flyteidl_2fplugins_2fqubole_2eproto {
void InitDefaultsHiveQueryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::plugins::_HiveQuery_default_instance_;
    new (ptr) ::flyteidl::plugins::HiveQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::HiveQuery::InitAsDefaultInstance();
}

void InitDefaultsHiveQuery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHiveQueryImpl);
}

void InitDefaultsHiveQueryCollectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsHiveQuery();
  {
    void* ptr = &::flyteidl::plugins::_HiveQueryCollection_default_instance_;
    new (ptr) ::flyteidl::plugins::HiveQueryCollection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::HiveQueryCollection::InitAsDefaultInstance();
}

void InitDefaultsHiveQueryCollection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHiveQueryCollectionImpl);
}

void InitDefaultsQuboleHiveJobImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsHiveQueryCollection();
  protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsHiveQuery();
  {
    void* ptr = &::flyteidl::plugins::_QuboleHiveJob_default_instance_;
    new (ptr) ::flyteidl::plugins::QuboleHiveJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::QuboleHiveJob::InitAsDefaultInstance();
}

void InitDefaultsQuboleHiveJob() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuboleHiveJobImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::HiveQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::HiveQuery, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::HiveQuery, timeout_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::HiveQuery, retrycount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::HiveQueryCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::HiveQueryCollection, queries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, cluster_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, query_collection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, query_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::HiveQuery)},
  { 8, -1, sizeof(::flyteidl::plugins::HiveQueryCollection)},
  { 14, -1, sizeof(::flyteidl::plugins::QuboleHiveJob)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_HiveQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_HiveQueryCollection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_QuboleHiveJob_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/plugins/qubole.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035flyteidl/plugins/qubole.proto\022\020flyteid"
      "l.plugins\032\031flyteidl/core/tasks.proto\"C\n\t"
      "HiveQuery\022\r\n\005query\030\001 \001(\t\022\023\n\013timeout_sec\030"
      "\002 \001(\r\022\022\n\nretryCount\030\003 \001(\r\"C\n\023HiveQueryCo"
      "llection\022,\n\007queries\030\002 \003(\0132\033.flyteidl.plu"
      "gins.HiveQuery\"\245\001\n\rQuboleHiveJob\022\025\n\rclus"
      "ter_label\030\001 \001(\t\022C\n\020query_collection\030\002 \001("
      "\0132%.flyteidl.plugins.HiveQueryCollection"
      "B\002\030\001\022\014\n\004tags\030\003 \003(\t\022*\n\005query\030\004 \001(\0132\033.flyt"
      "eidl.plugins.HiveQueryB5Z3github.com/lyf"
      "t/flyteidl/gen/pb-go/flyteidl/pluginsb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 445);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/plugins/qubole.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2ftasks_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fplugins_2fqubole_2eproto
namespace flyteidl {
namespace plugins {

// ===================================================================

void HiveQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HiveQuery::kQueryFieldNumber;
const int HiveQuery::kTimeoutSecFieldNumber;
const int HiveQuery::kRetryCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HiveQuery::HiveQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsHiveQuery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.HiveQuery)
}
HiveQuery::HiveQuery(const HiveQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&timeout_sec_, &from.timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&retrycount_) -
    reinterpret_cast<char*>(&timeout_sec_)) + sizeof(retrycount_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.HiveQuery)
}

void HiveQuery::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrycount_) -
      reinterpret_cast<char*>(&timeout_sec_)) + sizeof(retrycount_));
  _cached_size_ = 0;
}

HiveQuery::~HiveQuery() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.HiveQuery)
  SharedDtor();
}

void HiveQuery::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HiveQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HiveQuery::descriptor() {
  ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HiveQuery& HiveQuery::default_instance() {
  ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsHiveQuery();
  return *internal_default_instance();
}

HiveQuery* HiveQuery::New(::google::protobuf::Arena* arena) const {
  HiveQuery* n = new HiveQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HiveQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.HiveQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrycount_) -
      reinterpret_cast<char*>(&timeout_sec_)) + sizeof(retrycount_));
  _internal_metadata_.Clear();
}

bool HiveQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.HiveQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.HiveQuery.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeout_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 retryCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrycount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.HiveQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.HiveQuery)
  return false;
#undef DO_
}

void HiveQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.HiveQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.HiveQuery.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // uint32 timeout_sec = 2;
  if (this->timeout_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout_sec(), output);
  }

  // uint32 retryCount = 3;
  if (this->retrycount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retrycount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.HiveQuery)
}

::google::protobuf::uint8* HiveQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.HiveQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.HiveQuery.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // uint32 timeout_sec = 2;
  if (this->timeout_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout_sec(), target);
  }

  // uint32 retryCount = 3;
  if (this->retrycount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retrycount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.HiveQuery)
  return target;
}

size_t HiveQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.HiveQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // uint32 timeout_sec = 2;
  if (this->timeout_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_sec());
  }

  // uint32 retryCount = 3;
  if (this->retrycount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retrycount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HiveQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.HiveQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const HiveQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HiveQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.HiveQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.HiveQuery)
    MergeFrom(*source);
  }
}

void HiveQuery::MergeFrom(const HiveQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.HiveQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.timeout_sec() != 0) {
    set_timeout_sec(from.timeout_sec());
  }
  if (from.retrycount() != 0) {
    set_retrycount(from.retrycount());
  }
}

void HiveQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.HiveQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiveQuery::CopyFrom(const HiveQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.HiveQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiveQuery::IsInitialized() const {
  return true;
}

void HiveQuery::Swap(HiveQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HiveQuery::InternalSwap(HiveQuery* other) {
  using std::swap;
  query_.Swap(&other->query_);
  swap(timeout_sec_, other->timeout_sec_);
  swap(retrycount_, other->retrycount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HiveQuery::GetMetadata() const {
  protobuf_flyteidl_2fplugins_2fqubole_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HiveQueryCollection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HiveQueryCollection::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HiveQueryCollection::HiveQueryCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsHiveQueryCollection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.HiveQueryCollection)
}
HiveQueryCollection::HiveQueryCollection(const HiveQueryCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queries_(from.queries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.HiveQueryCollection)
}

void HiveQueryCollection::SharedCtor() {
  _cached_size_ = 0;
}

HiveQueryCollection::~HiveQueryCollection() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.HiveQueryCollection)
  SharedDtor();
}

void HiveQueryCollection::SharedDtor() {
}

void HiveQueryCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HiveQueryCollection::descriptor() {
  ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HiveQueryCollection& HiveQueryCollection::default_instance() {
  ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsHiveQueryCollection();
  return *internal_default_instance();
}

HiveQueryCollection* HiveQueryCollection::New(::google::protobuf::Arena* arena) const {
  HiveQueryCollection* n = new HiveQueryCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HiveQueryCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.HiveQueryCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  _internal_metadata_.Clear();
}

bool HiveQueryCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.HiveQueryCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.plugins.HiveQuery queries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.HiveQueryCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.HiveQueryCollection)
  return false;
#undef DO_
}

void HiveQueryCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.HiveQueryCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.plugins.HiveQuery queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queries(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.HiveQueryCollection)
}

::google::protobuf::uint8* HiveQueryCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.HiveQueryCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.plugins.HiveQuery queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->queries(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.HiveQueryCollection)
  return target;
}

size_t HiveQueryCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.HiveQueryCollection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.plugins.HiveQuery queries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->queries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HiveQueryCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.HiveQueryCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const HiveQueryCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HiveQueryCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.HiveQueryCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.HiveQueryCollection)
    MergeFrom(*source);
  }
}

void HiveQueryCollection::MergeFrom(const HiveQueryCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.HiveQueryCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
}

void HiveQueryCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.HiveQueryCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiveQueryCollection::CopyFrom(const HiveQueryCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.HiveQueryCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiveQueryCollection::IsInitialized() const {
  return true;
}

void HiveQueryCollection::Swap(HiveQueryCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HiveQueryCollection::InternalSwap(HiveQueryCollection* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HiveQueryCollection::GetMetadata() const {
  protobuf_flyteidl_2fplugins_2fqubole_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuboleHiveJob::InitAsDefaultInstance() {
  ::flyteidl::plugins::_QuboleHiveJob_default_instance_._instance.get_mutable()->query_collection_ = const_cast< ::flyteidl::plugins::HiveQueryCollection*>(
      ::flyteidl::plugins::HiveQueryCollection::internal_default_instance());
  ::flyteidl::plugins::_QuboleHiveJob_default_instance_._instance.get_mutable()->query_ = const_cast< ::flyteidl::plugins::HiveQuery*>(
      ::flyteidl::plugins::HiveQuery::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuboleHiveJob::kClusterLabelFieldNumber;
const int QuboleHiveJob::kQueryCollectionFieldNumber;
const int QuboleHiveJob::kTagsFieldNumber;
const int QuboleHiveJob::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuboleHiveJob::QuboleHiveJob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsQuboleHiveJob();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.QuboleHiveJob)
}
QuboleHiveJob::QuboleHiveJob(const QuboleHiveJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_label().size() > 0) {
    cluster_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_label_);
  }
  if (from.has_query_collection()) {
    query_collection_ = new ::flyteidl::plugins::HiveQueryCollection(*from.query_collection_);
  } else {
    query_collection_ = NULL;
  }
  if (from.has_query()) {
    query_ = new ::flyteidl::plugins::HiveQuery(*from.query_);
  } else {
    query_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.QuboleHiveJob)
}

void QuboleHiveJob::SharedCtor() {
  cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_collection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_) -
      reinterpret_cast<char*>(&query_collection_)) + sizeof(query_));
  _cached_size_ = 0;
}

QuboleHiveJob::~QuboleHiveJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.QuboleHiveJob)
  SharedDtor();
}

void QuboleHiveJob::SharedDtor() {
  cluster_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_collection_;
  if (this != internal_default_instance()) delete query_;
}

void QuboleHiveJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuboleHiveJob::descriptor() {
  ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuboleHiveJob& QuboleHiveJob::default_instance() {
  ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::InitDefaultsQuboleHiveJob();
  return *internal_default_instance();
}

QuboleHiveJob* QuboleHiveJob::New(::google::protobuf::Arena* arena) const {
  QuboleHiveJob* n = new QuboleHiveJob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuboleHiveJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.QuboleHiveJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cluster_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && query_collection_ != NULL) {
    delete query_collection_;
  }
  query_collection_ = NULL;
  if (GetArenaNoVirtual() == NULL && query_ != NULL) {
    delete query_;
  }
  query_ = NULL;
  _internal_metadata_.Clear();
}

bool QuboleHiveJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.QuboleHiveJob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_label().data(), static_cast<int>(this->cluster_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.QuboleHiveJob.cluster_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_collection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.QuboleHiveJob.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.HiveQuery query = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.QuboleHiveJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.QuboleHiveJob)
  return false;
#undef DO_
}

void QuboleHiveJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.QuboleHiveJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_label = 1;
  if (this->cluster_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_label().data(), static_cast<int>(this->cluster_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.QuboleHiveJob.cluster_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_label(), output);
  }

  // .flyteidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
  if (this->has_query_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->query_collection_, output);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.QuboleHiveJob.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // .flyteidl.plugins.HiveQuery query = 4;
  if (this->has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->query_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.QuboleHiveJob)
}

::google::protobuf::uint8* QuboleHiveJob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.QuboleHiveJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_label = 1;
  if (this->cluster_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_label().data(), static_cast<int>(this->cluster_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.QuboleHiveJob.cluster_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_label(), target);
  }

  // .flyteidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
  if (this->has_query_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->query_collection_, deterministic, target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.QuboleHiveJob.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // .flyteidl.plugins.HiveQuery query = 4;
  if (this->has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->query_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.QuboleHiveJob)
  return target;
}

size_t QuboleHiveJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.QuboleHiveJob)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string tags = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string cluster_label = 1;
  if (this->cluster_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_label());
  }

  // .flyteidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
  if (this->has_query_collection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->query_collection_);
  }

  // .flyteidl.plugins.HiveQuery query = 4;
  if (this->has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->query_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuboleHiveJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.QuboleHiveJob)
  GOOGLE_DCHECK_NE(&from, this);
  const QuboleHiveJob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuboleHiveJob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.QuboleHiveJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.QuboleHiveJob)
    MergeFrom(*source);
  }
}

void QuboleHiveJob::MergeFrom(const QuboleHiveJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.QuboleHiveJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.cluster_label().size() > 0) {

    cluster_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_label_);
  }
  if (from.has_query_collection()) {
    mutable_query_collection()->::flyteidl::plugins::HiveQueryCollection::MergeFrom(from.query_collection());
  }
  if (from.has_query()) {
    mutable_query()->::flyteidl::plugins::HiveQuery::MergeFrom(from.query());
  }
}

void QuboleHiveJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.QuboleHiveJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuboleHiveJob::CopyFrom(const QuboleHiveJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.QuboleHiveJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuboleHiveJob::IsInitialized() const {
  return true;
}

void QuboleHiveJob::Swap(QuboleHiveJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuboleHiveJob::InternalSwap(QuboleHiveJob* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  cluster_label_.Swap(&other->cluster_label_);
  swap(query_collection_, other->query_collection_);
  swap(query_, other->query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuboleHiveJob::GetMetadata() const {
  protobuf_flyteidl_2fplugins_2fqubole_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fqubole_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
