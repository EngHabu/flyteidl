// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sagemaker/trainingjob.proto

#include "flyteidl/plugins/sagemaker/trainingjob.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AlgorithmSpecification_MetricDefinition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResourceConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StoppingCondition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VpcConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AlgorithmSpecification_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
namespace flyteidl {
namespace plugins {
namespace sagemaker {
class AlgorithmSpecification_MetricDefinitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgorithmSpecification_MetricDefinition> _instance;
} _AlgorithmSpecification_MetricDefinition_default_instance_;
class AlgorithmSpecificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgorithmSpecification> _instance;
} _AlgorithmSpecification_default_instance_;
class ResourceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResourceConfig> _instance;
} _ResourceConfig_default_instance_;
class StoppingConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoppingCondition> _instance;
} _StoppingCondition_default_instance_;
class VpcConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VpcConfig> _instance;
} _VpcConfig_default_instance_;
class TrainingJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrainingJob> _instance;
} _TrainingJob_default_instance_;
}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl
static void InitDefaultsAlgorithmSpecification_MetricDefinition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::sagemaker::_AlgorithmSpecification_MetricDefinition_default_instance_;
    new (ptr) ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlgorithmSpecification_MetricDefinition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlgorithmSpecification_MetricDefinition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto}, {}};

static void InitDefaultsAlgorithmSpecification_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::sagemaker::_AlgorithmSpecification_default_instance_;
    new (ptr) ::flyteidl::plugins::sagemaker::AlgorithmSpecification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AlgorithmSpecification_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAlgorithmSpecification_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto}, {
      &scc_info_AlgorithmSpecification_MetricDefinition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base,}};

static void InitDefaultsResourceConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::sagemaker::_ResourceConfig_default_instance_;
    new (ptr) ::flyteidl::plugins::sagemaker::ResourceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::sagemaker::ResourceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResourceConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResourceConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto}, {}};

static void InitDefaultsStoppingCondition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::sagemaker::_StoppingCondition_default_instance_;
    new (ptr) ::flyteidl::plugins::sagemaker::StoppingCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::sagemaker::StoppingCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StoppingCondition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStoppingCondition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto}, {}};

static void InitDefaultsVpcConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::sagemaker::_VpcConfig_default_instance_;
    new (ptr) ::flyteidl::plugins::sagemaker::VpcConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::sagemaker::VpcConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VpcConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVpcConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto}, {}};

static void InitDefaultsTrainingJob_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::sagemaker::_TrainingJob_default_instance_;
    new (ptr) ::flyteidl::plugins::sagemaker::TrainingJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::sagemaker::TrainingJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TrainingJob_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTrainingJob_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto}, {
      &scc_info_AlgorithmSpecification_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base,
      &scc_info_ResourceConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base,
      &scc_info_StoppingCondition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base,
      &scc_info_VpcConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base,}};

void InitDefaults_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_AlgorithmSpecification_MetricDefinition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgorithmSpecification_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResourceConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoppingCondition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VpcConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrainingJob_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition, regex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::AlgorithmSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::AlgorithmSpecification, training_image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::AlgorithmSpecification, training_input_mode_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::AlgorithmSpecification, algorithm_name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::AlgorithmSpecification, metric_definitions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::ResourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::ResourceConfig, instance_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::ResourceConfig, instance_count_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::ResourceConfig, volume_size_in_gb_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::ResourceConfig, volume_kms_key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::StoppingCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::StoppingCondition, max_runtime_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::StoppingCondition, max_wait_time_in_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::VpcConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::VpcConfig, security_group_ids_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::VpcConfig, subnets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::TrainingJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::TrainingJob, region_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::TrainingJob, role_arn_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::TrainingJob, algorithm_specification_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::TrainingJob, resource_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::TrainingJob, stopping_condition_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::TrainingJob, vpc_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::sagemaker::TrainingJob, enable_spot_training_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition)},
  { 7, -1, sizeof(::flyteidl::plugins::sagemaker::AlgorithmSpecification)},
  { 16, -1, sizeof(::flyteidl::plugins::sagemaker::ResourceConfig)},
  { 25, -1, sizeof(::flyteidl::plugins::sagemaker::StoppingCondition)},
  { 32, -1, sizeof(::flyteidl::plugins::sagemaker::VpcConfig)},
  { 39, -1, sizeof(::flyteidl::plugins::sagemaker::TrainingJob)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::sagemaker::_AlgorithmSpecification_MetricDefinition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::sagemaker::_AlgorithmSpecification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::sagemaker::_ResourceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::sagemaker::_StoppingCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::sagemaker::_VpcConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::sagemaker::_TrainingJob_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto = {
  {}, AddDescriptors_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto, "flyteidl/plugins/sagemaker/trainingjob.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto, 6, file_level_enum_descriptors_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto[] =
  "\n,flyteidl/plugins/sagemaker/trainingjob"
  ".proto\022\032flyteidl.plugins.sagemaker\"\367\001\n\026A"
  "lgorithmSpecification\022\026\n\016training_image\030"
  "\001 \001(\t\022\033\n\023training_input_mode\030\002 \001(\t\022\026\n\016al"
  "gorithm_name\030\003 \001(\t\022_\n\022metric_definitions"
  "\030\004 \003(\0132C.flyteidl.plugins.sagemaker.Algo"
  "rithmSpecification.MetricDefinition\032/\n\020M"
  "etricDefinition\022\014\n\004name\030\001 \001(\t\022\r\n\005regex\030\002"
  " \001(\t\"u\n\016ResourceConfig\022\025\n\rinstance_type\030"
  "\001 \001(\t\022\026\n\016instance_count\030\002 \001(\003\022\031\n\021volume_"
  "size_in_gb\030\003 \001(\003\022\031\n\021volume_kms_key_id\030\004 "
  "\001(\t\"U\n\021StoppingCondition\022\036\n\026max_runtime_"
  "in_seconds\030\001 \001(\003\022 \n\030max_wait_time_in_sec"
  "onds\030\002 \001(\003\"8\n\tVpcConfig\022\032\n\022security_grou"
  "p_ids\030\001 \003(\t\022\017\n\007subnets\030\002 \003(\t\"\355\002\n\013Trainin"
  "gJob\022\016\n\006region\030\001 \001(\t\022\020\n\010role_arn\030\002 \001(\t\022S"
  "\n\027algorithm_specification\030\003 \001(\01322.flytei"
  "dl.plugins.sagemaker.AlgorithmSpecificat"
  "ion\022C\n\017resource_config\030\004 \001(\0132*.flyteidl."
  "plugins.sagemaker.ResourceConfig\022I\n\022stop"
  "ping_condition\030\005 \001(\0132-.flyteidl.plugins."
  "sagemaker.StoppingCondition\0229\n\nvpc_confi"
  "g\030\006 \001(\0132%.flyteidl.plugins.sagemaker.Vpc"
  "Config\022\034\n\024enable_spot_training\030\007 \001(\010B5Z3"
  "github.com/lyft/flyteidl/gen/pb-go/flyte"
  "idl/pluginsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto = {
  false, InitDefaults_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto, 
  descriptor_table_protodef_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto,
  "flyteidl/plugins/sagemaker/trainingjob.proto", &assign_descriptors_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto, 1019,
};

void AddDescriptors_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto = []() { AddDescriptors_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto(); return true; }();
namespace flyteidl {
namespace plugins {
namespace sagemaker {

// ===================================================================

void AlgorithmSpecification_MetricDefinition::InitAsDefaultInstance() {
}
class AlgorithmSpecification_MetricDefinition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgorithmSpecification_MetricDefinition::kNameFieldNumber;
const int AlgorithmSpecification_MetricDefinition::kRegexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgorithmSpecification_MetricDefinition::AlgorithmSpecification_MetricDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
}
AlgorithmSpecification_MetricDefinition::AlgorithmSpecification_MetricDefinition(const AlgorithmSpecification_MetricDefinition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.regex().size() > 0) {
    regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
}

void AlgorithmSpecification_MetricDefinition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AlgorithmSpecification_MetricDefinition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AlgorithmSpecification_MetricDefinition::~AlgorithmSpecification_MetricDefinition() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  SharedDtor();
}

void AlgorithmSpecification_MetricDefinition::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgorithmSpecification_MetricDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmSpecification_MetricDefinition& AlgorithmSpecification_MetricDefinition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AlgorithmSpecification_MetricDefinition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  return *internal_default_instance();
}


void AlgorithmSpecification_MetricDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlgorithmSpecification_MetricDefinition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AlgorithmSpecification_MetricDefinition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string regex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex");
        object = msg->mutable_regex();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlgorithmSpecification_MetricDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), static_cast<int>(this->regex().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlgorithmSpecification_MetricDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string regex = 2;
  if (this->regex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->regex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
}

::google::protobuf::uint8* AlgorithmSpecification_MetricDefinition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string regex = 2;
  if (this->regex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->regex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  return target;
}

size_t AlgorithmSpecification_MetricDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string regex = 2;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->regex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmSpecification_MetricDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmSpecification_MetricDefinition* source =
      ::google::protobuf::DynamicCastToGenerated<AlgorithmSpecification_MetricDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
    MergeFrom(*source);
  }
}

void AlgorithmSpecification_MetricDefinition::MergeFrom(const AlgorithmSpecification_MetricDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.regex().size() > 0) {

    regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
}

void AlgorithmSpecification_MetricDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmSpecification_MetricDefinition::CopyFrom(const AlgorithmSpecification_MetricDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmSpecification_MetricDefinition::IsInitialized() const {
  return true;
}

void AlgorithmSpecification_MetricDefinition::Swap(AlgorithmSpecification_MetricDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgorithmSpecification_MetricDefinition::InternalSwap(AlgorithmSpecification_MetricDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regex_.Swap(&other->regex_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AlgorithmSpecification_MetricDefinition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AlgorithmSpecification::InitAsDefaultInstance() {
}
class AlgorithmSpecification::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgorithmSpecification::kTrainingImageFieldNumber;
const int AlgorithmSpecification::kTrainingInputModeFieldNumber;
const int AlgorithmSpecification::kAlgorithmNameFieldNumber;
const int AlgorithmSpecification::kMetricDefinitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgorithmSpecification::AlgorithmSpecification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.sagemaker.AlgorithmSpecification)
}
AlgorithmSpecification::AlgorithmSpecification(const AlgorithmSpecification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      metric_definitions_(from.metric_definitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  training_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.training_image().size() > 0) {
    training_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.training_image_);
  }
  training_input_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.training_input_mode().size() > 0) {
    training_input_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.training_input_mode_);
  }
  algorithm_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.algorithm_name().size() > 0) {
    algorithm_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algorithm_name_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.sagemaker.AlgorithmSpecification)
}

void AlgorithmSpecification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AlgorithmSpecification_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  training_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  training_input_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AlgorithmSpecification::~AlgorithmSpecification() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  SharedDtor();
}

void AlgorithmSpecification::SharedDtor() {
  training_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  training_input_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgorithmSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmSpecification& AlgorithmSpecification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AlgorithmSpecification_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  return *internal_default_instance();
}


void AlgorithmSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_definitions_.Clear();
  training_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  training_input_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlgorithmSpecification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AlgorithmSpecification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string training_image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image");
        object = msg->mutable_training_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string training_input_mode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode");
        object = msg->mutable_training_input_mode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string algorithm_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name");
        object = msg->mutable_algorithm_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition metric_definitions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition::_InternalParse;
          object = msg->add_metric_definitions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlgorithmSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string training_image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_training_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->training_image().data(), static_cast<int>(this->training_image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string training_input_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_training_input_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->training_input_mode().data(), static_cast<int>(this->training_input_mode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string algorithm_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->algorithm_name().data(), static_cast<int>(this->algorithm_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition metric_definitions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metric_definitions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlgorithmSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string training_image = 1;
  if (this->training_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->training_image().data(), static_cast<int>(this->training_image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->training_image(), output);
  }

  // string training_input_mode = 2;
  if (this->training_input_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->training_input_mode().data(), static_cast<int>(this->training_input_mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->training_input_mode(), output);
  }

  // string algorithm_name = 3;
  if (this->algorithm_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm_name().data(), static_cast<int>(this->algorithm_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->algorithm_name(), output);
  }

  // repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition metric_definitions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_definitions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->metric_definitions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.sagemaker.AlgorithmSpecification)
}

::google::protobuf::uint8* AlgorithmSpecification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string training_image = 1;
  if (this->training_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->training_image().data(), static_cast<int>(this->training_image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->training_image(), target);
  }

  // string training_input_mode = 2;
  if (this->training_input_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->training_input_mode().data(), static_cast<int>(this->training_input_mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->training_input_mode(), target);
  }

  // string algorithm_name = 3;
  if (this->algorithm_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm_name().data(), static_cast<int>(this->algorithm_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->algorithm_name(), target);
  }

  // repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition metric_definitions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_definitions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->metric_definitions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  return target;
}

size_t AlgorithmSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition metric_definitions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_definitions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metric_definitions(static_cast<int>(i)));
    }
  }

  // string training_image = 1;
  if (this->training_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->training_image());
  }

  // string training_input_mode = 2;
  if (this->training_input_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->training_input_mode());
  }

  // string algorithm_name = 3;
  if (this->algorithm_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algorithm_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmSpecification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmSpecification* source =
      ::google::protobuf::DynamicCastToGenerated<AlgorithmSpecification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.sagemaker.AlgorithmSpecification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.sagemaker.AlgorithmSpecification)
    MergeFrom(*source);
  }
}

void AlgorithmSpecification::MergeFrom(const AlgorithmSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metric_definitions_.MergeFrom(from.metric_definitions_);
  if (from.training_image().size() > 0) {

    training_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.training_image_);
  }
  if (from.training_input_mode().size() > 0) {

    training_input_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.training_input_mode_);
  }
  if (from.algorithm_name().size() > 0) {

    algorithm_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algorithm_name_);
  }
}

void AlgorithmSpecification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmSpecification::CopyFrom(const AlgorithmSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.sagemaker.AlgorithmSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmSpecification::IsInitialized() const {
  return true;
}

void AlgorithmSpecification::Swap(AlgorithmSpecification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgorithmSpecification::InternalSwap(AlgorithmSpecification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&metric_definitions_)->InternalSwap(CastToBase(&other->metric_definitions_));
  training_image_.Swap(&other->training_image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  training_input_mode_.Swap(&other->training_input_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  algorithm_name_.Swap(&other->algorithm_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AlgorithmSpecification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResourceConfig::InitAsDefaultInstance() {
}
class ResourceConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceConfig::kInstanceTypeFieldNumber;
const int ResourceConfig::kInstanceCountFieldNumber;
const int ResourceConfig::kVolumeSizeInGbFieldNumber;
const int ResourceConfig::kVolumeKmsKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceConfig::ResourceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.sagemaker.ResourceConfig)
}
ResourceConfig::ResourceConfig(const ResourceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_type().size() > 0) {
    instance_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_type_);
  }
  volume_kms_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.volume_kms_key_id().size() > 0) {
    volume_kms_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_kms_key_id_);
  }
  ::memcpy(&instance_count_, &from.instance_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_size_in_gb_) -
    reinterpret_cast<char*>(&instance_count_)) + sizeof(volume_size_in_gb_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.sagemaker.ResourceConfig)
}

void ResourceConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResourceConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  instance_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_kms_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&instance_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_size_in_gb_) -
      reinterpret_cast<char*>(&instance_count_)) + sizeof(volume_size_in_gb_));
}

ResourceConfig::~ResourceConfig() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.sagemaker.ResourceConfig)
  SharedDtor();
}

void ResourceConfig::SharedDtor() {
  instance_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_kms_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResourceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceConfig& ResourceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResourceConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  return *internal_default_instance();
}


void ResourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.sagemaker.ResourceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_kms_key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&instance_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_size_in_gb_) -
      reinterpret_cast<char*>(&instance_count_)) + sizeof(volume_size_in_gb_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResourceConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResourceConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instance_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.ResourceConfig.instance_type");
        object = msg->mutable_instance_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 instance_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_instance_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 volume_size_in_gb = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_volume_size_in_gb(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string volume_kms_key_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id");
        object = msg->mutable_volume_kms_key_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResourceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.sagemaker.ResourceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instance_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_type().data(), static_cast<int>(this->instance_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.ResourceConfig.instance_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 instance_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 volume_size_in_gb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_size_in_gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string volume_kms_key_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_kms_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->volume_kms_key_id().data(), static_cast<int>(this->volume_kms_key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.sagemaker.ResourceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.sagemaker.ResourceConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResourceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.sagemaker.ResourceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_type = 1;
  if (this->instance_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_type().data(), static_cast<int>(this->instance_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.ResourceConfig.instance_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_type(), output);
  }

  // int64 instance_count = 2;
  if (this->instance_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instance_count(), output);
  }

  // int64 volume_size_in_gb = 3;
  if (this->volume_size_in_gb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->volume_size_in_gb(), output);
  }

  // string volume_kms_key_id = 4;
  if (this->volume_kms_key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volume_kms_key_id().data(), static_cast<int>(this->volume_kms_key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->volume_kms_key_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.sagemaker.ResourceConfig)
}

::google::protobuf::uint8* ResourceConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.sagemaker.ResourceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_type = 1;
  if (this->instance_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_type().data(), static_cast<int>(this->instance_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.ResourceConfig.instance_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_type(), target);
  }

  // int64 instance_count = 2;
  if (this->instance_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instance_count(), target);
  }

  // int64 volume_size_in_gb = 3;
  if (this->volume_size_in_gb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->volume_size_in_gb(), target);
  }

  // string volume_kms_key_id = 4;
  if (this->volume_kms_key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volume_kms_key_id().data(), static_cast<int>(this->volume_kms_key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->volume_kms_key_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.sagemaker.ResourceConfig)
  return target;
}

size_t ResourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.sagemaker.ResourceConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_type = 1;
  if (this->instance_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_type());
  }

  // string volume_kms_key_id = 4;
  if (this->volume_kms_key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->volume_kms_key_id());
  }

  // int64 instance_count = 2;
  if (this->instance_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->instance_count());
  }

  // int64 volume_size_in_gb = 3;
  if (this->volume_size_in_gb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume_size_in_gb());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.sagemaker.ResourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceConfig* source =
      ::google::protobuf::DynamicCastToGenerated<ResourceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.sagemaker.ResourceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.sagemaker.ResourceConfig)
    MergeFrom(*source);
  }
}

void ResourceConfig::MergeFrom(const ResourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.sagemaker.ResourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_type().size() > 0) {

    instance_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_type_);
  }
  if (from.volume_kms_key_id().size() > 0) {

    volume_kms_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_kms_key_id_);
  }
  if (from.instance_count() != 0) {
    set_instance_count(from.instance_count());
  }
  if (from.volume_size_in_gb() != 0) {
    set_volume_size_in_gb(from.volume_size_in_gb());
  }
}

void ResourceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.sagemaker.ResourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceConfig::CopyFrom(const ResourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.sagemaker.ResourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceConfig::IsInitialized() const {
  return true;
}

void ResourceConfig::Swap(ResourceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceConfig::InternalSwap(ResourceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_type_.Swap(&other->instance_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  volume_kms_key_id_.Swap(&other->volume_kms_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(instance_count_, other->instance_count_);
  swap(volume_size_in_gb_, other->volume_size_in_gb_);
}

::google::protobuf::Metadata ResourceConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoppingCondition::InitAsDefaultInstance() {
}
class StoppingCondition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoppingCondition::kMaxRuntimeInSecondsFieldNumber;
const int StoppingCondition::kMaxWaitTimeInSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoppingCondition::StoppingCondition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.sagemaker.StoppingCondition)
}
StoppingCondition::StoppingCondition(const StoppingCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_runtime_in_seconds_, &from.max_runtime_in_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_wait_time_in_seconds_) -
    reinterpret_cast<char*>(&max_runtime_in_seconds_)) + sizeof(max_wait_time_in_seconds_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.sagemaker.StoppingCondition)
}

void StoppingCondition::SharedCtor() {
  ::memset(&max_runtime_in_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_wait_time_in_seconds_) -
      reinterpret_cast<char*>(&max_runtime_in_seconds_)) + sizeof(max_wait_time_in_seconds_));
}

StoppingCondition::~StoppingCondition() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.sagemaker.StoppingCondition)
  SharedDtor();
}

void StoppingCondition::SharedDtor() {
}

void StoppingCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoppingCondition& StoppingCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoppingCondition_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  return *internal_default_instance();
}


void StoppingCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.sagemaker.StoppingCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_runtime_in_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_wait_time_in_seconds_) -
      reinterpret_cast<char*>(&max_runtime_in_seconds_)) + sizeof(max_wait_time_in_seconds_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoppingCondition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoppingCondition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 max_runtime_in_seconds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_max_runtime_in_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max_wait_time_in_seconds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_wait_time_in_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoppingCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.sagemaker.StoppingCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 max_runtime_in_seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_runtime_in_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_wait_time_in_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_wait_time_in_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.sagemaker.StoppingCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.sagemaker.StoppingCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoppingCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.sagemaker.StoppingCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_runtime_in_seconds = 1;
  if (this->max_runtime_in_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_runtime_in_seconds(), output);
  }

  // int64 max_wait_time_in_seconds = 2;
  if (this->max_wait_time_in_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_wait_time_in_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.sagemaker.StoppingCondition)
}

::google::protobuf::uint8* StoppingCondition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.sagemaker.StoppingCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_runtime_in_seconds = 1;
  if (this->max_runtime_in_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_runtime_in_seconds(), target);
  }

  // int64 max_wait_time_in_seconds = 2;
  if (this->max_wait_time_in_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_wait_time_in_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.sagemaker.StoppingCondition)
  return target;
}

size_t StoppingCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.sagemaker.StoppingCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_runtime_in_seconds = 1;
  if (this->max_runtime_in_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_runtime_in_seconds());
  }

  // int64 max_wait_time_in_seconds = 2;
  if (this->max_wait_time_in_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_wait_time_in_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoppingCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.sagemaker.StoppingCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const StoppingCondition* source =
      ::google::protobuf::DynamicCastToGenerated<StoppingCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.sagemaker.StoppingCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.sagemaker.StoppingCondition)
    MergeFrom(*source);
  }
}

void StoppingCondition::MergeFrom(const StoppingCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.sagemaker.StoppingCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_runtime_in_seconds() != 0) {
    set_max_runtime_in_seconds(from.max_runtime_in_seconds());
  }
  if (from.max_wait_time_in_seconds() != 0) {
    set_max_wait_time_in_seconds(from.max_wait_time_in_seconds());
  }
}

void StoppingCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.sagemaker.StoppingCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoppingCondition::CopyFrom(const StoppingCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.sagemaker.StoppingCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoppingCondition::IsInitialized() const {
  return true;
}

void StoppingCondition::Swap(StoppingCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoppingCondition::InternalSwap(StoppingCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_runtime_in_seconds_, other->max_runtime_in_seconds_);
  swap(max_wait_time_in_seconds_, other->max_wait_time_in_seconds_);
}

::google::protobuf::Metadata StoppingCondition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VpcConfig::InitAsDefaultInstance() {
}
class VpcConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VpcConfig::kSecurityGroupIdsFieldNumber;
const int VpcConfig::kSubnetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VpcConfig::VpcConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.sagemaker.VpcConfig)
}
VpcConfig::VpcConfig(const VpcConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      security_group_ids_(from.security_group_ids_),
      subnets_(from.subnets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.sagemaker.VpcConfig)
}

void VpcConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VpcConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
}

VpcConfig::~VpcConfig() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.sagemaker.VpcConfig)
  SharedDtor();
}

void VpcConfig::SharedDtor() {
}

void VpcConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VpcConfig& VpcConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VpcConfig_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  return *internal_default_instance();
}


void VpcConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.sagemaker.VpcConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  security_group_ids_.Clear();
  subnets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VpcConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VpcConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string security_group_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.VpcConfig.security_group_ids");
          object = msg->add_security_group_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated string subnets = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.VpcConfig.subnets");
          object = msg->add_subnets();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VpcConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.sagemaker.VpcConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string security_group_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_security_group_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->security_group_ids(this->security_group_ids_size() - 1).data(),
            static_cast<int>(this->security_group_ids(this->security_group_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.VpcConfig.security_group_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subnets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subnets()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subnets(this->subnets_size() - 1).data(),
            static_cast<int>(this->subnets(this->subnets_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.VpcConfig.subnets"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.sagemaker.VpcConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.sagemaker.VpcConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VpcConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.sagemaker.VpcConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string security_group_ids = 1;
  for (int i = 0, n = this->security_group_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->security_group_ids(i).data(), static_cast<int>(this->security_group_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.VpcConfig.security_group_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->security_group_ids(i), output);
  }

  // repeated string subnets = 2;
  for (int i = 0, n = this->subnets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnets(i).data(), static_cast<int>(this->subnets(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.VpcConfig.subnets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subnets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.sagemaker.VpcConfig)
}

::google::protobuf::uint8* VpcConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.sagemaker.VpcConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string security_group_ids = 1;
  for (int i = 0, n = this->security_group_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->security_group_ids(i).data(), static_cast<int>(this->security_group_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.VpcConfig.security_group_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->security_group_ids(i), target);
  }

  // repeated string subnets = 2;
  for (int i = 0, n = this->subnets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnets(i).data(), static_cast<int>(this->subnets(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.VpcConfig.subnets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->subnets(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.sagemaker.VpcConfig)
  return target;
}

size_t VpcConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.sagemaker.VpcConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string security_group_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->security_group_ids_size());
  for (int i = 0, n = this->security_group_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->security_group_ids(i));
  }

  // repeated string subnets = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subnets_size());
  for (int i = 0, n = this->subnets_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subnets(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VpcConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.sagemaker.VpcConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VpcConfig* source =
      ::google::protobuf::DynamicCastToGenerated<VpcConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.sagemaker.VpcConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.sagemaker.VpcConfig)
    MergeFrom(*source);
  }
}

void VpcConfig::MergeFrom(const VpcConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.sagemaker.VpcConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  security_group_ids_.MergeFrom(from.security_group_ids_);
  subnets_.MergeFrom(from.subnets_);
}

void VpcConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.sagemaker.VpcConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VpcConfig::CopyFrom(const VpcConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.sagemaker.VpcConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpcConfig::IsInitialized() const {
  return true;
}

void VpcConfig::Swap(VpcConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VpcConfig::InternalSwap(VpcConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  security_group_ids_.InternalSwap(CastToBase(&other->security_group_ids_));
  subnets_.InternalSwap(CastToBase(&other->subnets_));
}

::google::protobuf::Metadata VpcConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrainingJob::InitAsDefaultInstance() {
  ::flyteidl::plugins::sagemaker::_TrainingJob_default_instance_._instance.get_mutable()->algorithm_specification_ = const_cast< ::flyteidl::plugins::sagemaker::AlgorithmSpecification*>(
      ::flyteidl::plugins::sagemaker::AlgorithmSpecification::internal_default_instance());
  ::flyteidl::plugins::sagemaker::_TrainingJob_default_instance_._instance.get_mutable()->resource_config_ = const_cast< ::flyteidl::plugins::sagemaker::ResourceConfig*>(
      ::flyteidl::plugins::sagemaker::ResourceConfig::internal_default_instance());
  ::flyteidl::plugins::sagemaker::_TrainingJob_default_instance_._instance.get_mutable()->stopping_condition_ = const_cast< ::flyteidl::plugins::sagemaker::StoppingCondition*>(
      ::flyteidl::plugins::sagemaker::StoppingCondition::internal_default_instance());
  ::flyteidl::plugins::sagemaker::_TrainingJob_default_instance_._instance.get_mutable()->vpc_config_ = const_cast< ::flyteidl::plugins::sagemaker::VpcConfig*>(
      ::flyteidl::plugins::sagemaker::VpcConfig::internal_default_instance());
}
class TrainingJob::HasBitSetters {
 public:
  static const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& algorithm_specification(const TrainingJob* msg);
  static const ::flyteidl::plugins::sagemaker::ResourceConfig& resource_config(const TrainingJob* msg);
  static const ::flyteidl::plugins::sagemaker::StoppingCondition& stopping_condition(const TrainingJob* msg);
  static const ::flyteidl::plugins::sagemaker::VpcConfig& vpc_config(const TrainingJob* msg);
};

const ::flyteidl::plugins::sagemaker::AlgorithmSpecification&
TrainingJob::HasBitSetters::algorithm_specification(const TrainingJob* msg) {
  return *msg->algorithm_specification_;
}
const ::flyteidl::plugins::sagemaker::ResourceConfig&
TrainingJob::HasBitSetters::resource_config(const TrainingJob* msg) {
  return *msg->resource_config_;
}
const ::flyteidl::plugins::sagemaker::StoppingCondition&
TrainingJob::HasBitSetters::stopping_condition(const TrainingJob* msg) {
  return *msg->stopping_condition_;
}
const ::flyteidl::plugins::sagemaker::VpcConfig&
TrainingJob::HasBitSetters::vpc_config(const TrainingJob* msg) {
  return *msg->vpc_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrainingJob::kRegionFieldNumber;
const int TrainingJob::kRoleArnFieldNumber;
const int TrainingJob::kAlgorithmSpecificationFieldNumber;
const int TrainingJob::kResourceConfigFieldNumber;
const int TrainingJob::kStoppingConditionFieldNumber;
const int TrainingJob::kVpcConfigFieldNumber;
const int TrainingJob::kEnableSpotTrainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrainingJob::TrainingJob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.sagemaker.TrainingJob)
}
TrainingJob::TrainingJob(const TrainingJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  role_arn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_arn().size() > 0) {
    role_arn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_arn_);
  }
  if (from.has_algorithm_specification()) {
    algorithm_specification_ = new ::flyteidl::plugins::sagemaker::AlgorithmSpecification(*from.algorithm_specification_);
  } else {
    algorithm_specification_ = nullptr;
  }
  if (from.has_resource_config()) {
    resource_config_ = new ::flyteidl::plugins::sagemaker::ResourceConfig(*from.resource_config_);
  } else {
    resource_config_ = nullptr;
  }
  if (from.has_stopping_condition()) {
    stopping_condition_ = new ::flyteidl::plugins::sagemaker::StoppingCondition(*from.stopping_condition_);
  } else {
    stopping_condition_ = nullptr;
  }
  if (from.has_vpc_config()) {
    vpc_config_ = new ::flyteidl::plugins::sagemaker::VpcConfig(*from.vpc_config_);
  } else {
    vpc_config_ = nullptr;
  }
  enable_spot_training_ = from.enable_spot_training_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.sagemaker.TrainingJob)
}

void TrainingJob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TrainingJob_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_arn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&algorithm_specification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_spot_training_) -
      reinterpret_cast<char*>(&algorithm_specification_)) + sizeof(enable_spot_training_));
}

TrainingJob::~TrainingJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.sagemaker.TrainingJob)
  SharedDtor();
}

void TrainingJob::SharedDtor() {
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_arn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete algorithm_specification_;
  if (this != internal_default_instance()) delete resource_config_;
  if (this != internal_default_instance()) delete stopping_condition_;
  if (this != internal_default_instance()) delete vpc_config_;
}

void TrainingJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainingJob& TrainingJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrainingJob_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto.base);
  return *internal_default_instance();
}


void TrainingJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.sagemaker.TrainingJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_arn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && algorithm_specification_ != nullptr) {
    delete algorithm_specification_;
  }
  algorithm_specification_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resource_config_ != nullptr) {
    delete resource_config_;
  }
  resource_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stopping_condition_ != nullptr) {
    delete stopping_condition_;
  }
  stopping_condition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vpc_config_ != nullptr) {
    delete vpc_config_;
  }
  vpc_config_ = nullptr;
  enable_spot_training_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrainingJob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrainingJob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string region = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.TrainingJob.region");
        object = msg->mutable_region();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string role_arn = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.sagemaker.TrainingJob.role_arn");
        object = msg->mutable_role_arn();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::sagemaker::AlgorithmSpecification::_InternalParse;
        object = msg->mutable_algorithm_specification();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.plugins.sagemaker.ResourceConfig resource_config = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::sagemaker::ResourceConfig::_InternalParse;
        object = msg->mutable_resource_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.plugins.sagemaker.StoppingCondition stopping_condition = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::sagemaker::StoppingCondition::_InternalParse;
        object = msg->mutable_stopping_condition();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.plugins.sagemaker.VpcConfig vpc_config = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::sagemaker::VpcConfig::_InternalParse;
        object = msg->mutable_vpc_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool enable_spot_training = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_enable_spot_training(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrainingJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.sagemaker.TrainingJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.TrainingJob.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_arn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_arn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_arn().data(), static_cast<int>(this->role_arn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.sagemaker.TrainingJob.role_arn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_algorithm_specification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.sagemaker.ResourceConfig resource_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resource_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.sagemaker.StoppingCondition stopping_condition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stopping_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.sagemaker.VpcConfig vpc_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vpc_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_spot_training = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_spot_training_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.sagemaker.TrainingJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.sagemaker.TrainingJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrainingJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.sagemaker.TrainingJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.TrainingJob.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->region(), output);
  }

  // string role_arn = 2;
  if (this->role_arn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_arn().data(), static_cast<int>(this->role_arn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.TrainingJob.role_arn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_arn(), output);
  }

  // .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 3;
  if (this->has_algorithm_specification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::algorithm_specification(this), output);
  }

  // .flyteidl.plugins.sagemaker.ResourceConfig resource_config = 4;
  if (this->has_resource_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::resource_config(this), output);
  }

  // .flyteidl.plugins.sagemaker.StoppingCondition stopping_condition = 5;
  if (this->has_stopping_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::stopping_condition(this), output);
  }

  // .flyteidl.plugins.sagemaker.VpcConfig vpc_config = 6;
  if (this->has_vpc_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::vpc_config(this), output);
  }

  // bool enable_spot_training = 7;
  if (this->enable_spot_training() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_spot_training(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.sagemaker.TrainingJob)
}

::google::protobuf::uint8* TrainingJob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.sagemaker.TrainingJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.TrainingJob.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->region(), target);
  }

  // string role_arn = 2;
  if (this->role_arn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_arn().data(), static_cast<int>(this->role_arn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.sagemaker.TrainingJob.role_arn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_arn(), target);
  }

  // .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 3;
  if (this->has_algorithm_specification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::algorithm_specification(this), target);
  }

  // .flyteidl.plugins.sagemaker.ResourceConfig resource_config = 4;
  if (this->has_resource_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::resource_config(this), target);
  }

  // .flyteidl.plugins.sagemaker.StoppingCondition stopping_condition = 5;
  if (this->has_stopping_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::stopping_condition(this), target);
  }

  // .flyteidl.plugins.sagemaker.VpcConfig vpc_config = 6;
  if (this->has_vpc_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::vpc_config(this), target);
  }

  // bool enable_spot_training = 7;
  if (this->enable_spot_training() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_spot_training(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.sagemaker.TrainingJob)
  return target;
}

size_t TrainingJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.sagemaker.TrainingJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // string role_arn = 2;
  if (this->role_arn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_arn());
  }

  // .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 3;
  if (this->has_algorithm_specification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *algorithm_specification_);
  }

  // .flyteidl.plugins.sagemaker.ResourceConfig resource_config = 4;
  if (this->has_resource_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resource_config_);
  }

  // .flyteidl.plugins.sagemaker.StoppingCondition stopping_condition = 5;
  if (this->has_stopping_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stopping_condition_);
  }

  // .flyteidl.plugins.sagemaker.VpcConfig vpc_config = 6;
  if (this->has_vpc_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vpc_config_);
  }

  // bool enable_spot_training = 7;
  if (this->enable_spot_training() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainingJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.sagemaker.TrainingJob)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainingJob* source =
      ::google::protobuf::DynamicCastToGenerated<TrainingJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.sagemaker.TrainingJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.sagemaker.TrainingJob)
    MergeFrom(*source);
  }
}

void TrainingJob::MergeFrom(const TrainingJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.sagemaker.TrainingJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.role_arn().size() > 0) {

    role_arn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_arn_);
  }
  if (from.has_algorithm_specification()) {
    mutable_algorithm_specification()->::flyteidl::plugins::sagemaker::AlgorithmSpecification::MergeFrom(from.algorithm_specification());
  }
  if (from.has_resource_config()) {
    mutable_resource_config()->::flyteidl::plugins::sagemaker::ResourceConfig::MergeFrom(from.resource_config());
  }
  if (from.has_stopping_condition()) {
    mutable_stopping_condition()->::flyteidl::plugins::sagemaker::StoppingCondition::MergeFrom(from.stopping_condition());
  }
  if (from.has_vpc_config()) {
    mutable_vpc_config()->::flyteidl::plugins::sagemaker::VpcConfig::MergeFrom(from.vpc_config());
  }
  if (from.enable_spot_training() != 0) {
    set_enable_spot_training(from.enable_spot_training());
  }
}

void TrainingJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.sagemaker.TrainingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainingJob::CopyFrom(const TrainingJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.sagemaker.TrainingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingJob::IsInitialized() const {
  return true;
}

void TrainingJob::Swap(TrainingJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrainingJob::InternalSwap(TrainingJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  region_.Swap(&other->region_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  role_arn_.Swap(&other->role_arn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_specification_, other->algorithm_specification_);
  swap(resource_config_, other->resource_config_);
  swap(stopping_condition_, other->stopping_condition_);
  swap(vpc_config_, other->vpc_config_);
  swap(enable_spot_training_, other->enable_spot_training_);
}

::google::protobuf::Metadata TrainingJob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* Arena::CreateMaybeMessage< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::sagemaker::AlgorithmSpecification* Arena::CreateMaybeMessage< ::flyteidl::plugins::sagemaker::AlgorithmSpecification >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::sagemaker::AlgorithmSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::sagemaker::ResourceConfig* Arena::CreateMaybeMessage< ::flyteidl::plugins::sagemaker::ResourceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::sagemaker::ResourceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::sagemaker::StoppingCondition* Arena::CreateMaybeMessage< ::flyteidl::plugins::sagemaker::StoppingCondition >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::sagemaker::StoppingCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::sagemaker::VpcConfig* Arena::CreateMaybeMessage< ::flyteidl::plugins::sagemaker::VpcConfig >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::sagemaker::VpcConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::sagemaker::TrainingJob* Arena::CreateMaybeMessage< ::flyteidl::plugins::sagemaker::TrainingJob >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::sagemaker::TrainingJob >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
