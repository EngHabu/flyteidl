// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/admin.proto

package flyteidl.service;

public final class Admin {
  private Admin() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034flyteidl/service/admin.proto\022\020flyteidl" +
      ".service\032\034google/api/annotations.proto\032\034" +
      "flyteidl/admin/project.proto\032\031flyteidl/a" +
      "dmin/task.proto\032\035flyteidl/admin/workflow" +
      ".proto\032 flyteidl/admin/launch_plan.proto" +
      "\032\032flyteidl/admin/event.proto\032\036flyteidl/a" +
      "dmin/execution.proto\032#flyteidl/admin/nod" +
      "e_execution.proto\032#flyteidl/admin/task_e" +
      "xecution.proto\032\033flyteidl/admin/common.pr" +
      "oto\032,protoc-gen-swagger/options/annotati" +
      "ons.proto2\212;\n\014AdminService\022\304\002\n\nCreateTas" +
      "k\022!.flyteidl.admin.TaskCreateRequest\032\".f" +
      "lyteidl.admin.TaskCreateResponse\"\356\001\202\323\344\223\002" +
      "\022\"\r/api/v1/tasks:\001*\222A\322\001\032%Create and regi" +
      "ster a task definitionJB\n\003400\022;\n9Returne" +
      "d for bad request that may have failed v" +
      "alidation.Je\n\003409\022^\n\\Returned for a requ" +
      "est that references an identical entity " +
      "that has already been registered.\022\210\001\n\007Ge" +
      "tTask\022 .flyteidl.admin.ObjectGetRequest\032" +
      "\024.flyteidl.admin.Task\"E\202\323\344\223\002?\022=/api/v1/t" +
      "asks/{id.project}/{id.domain}/{id.name}/" +
      "{id.version}\022\227\001\n\013ListTaskIds\0220.flyteidl." +
      "admin.NamedEntityIdentifierListRequest\032)" +
      ".flyteidl.admin.NamedEntityIdentifierLis" +
      "t\"+\202\323\344\223\002%\022#/api/v1/task_ids/{project}/{d" +
      "omain}\022\256\001\n\tListTasks\022#.flyteidl.admin.Re" +
      "sourceListRequest\032\030.flyteidl.admin.TaskL" +
      "ist\"b\202\323\344\223\002\\\0220/api/v1/tasks/{id.project}/" +
      "{id.domain}/{id.name}Z(\022&/api/v1/tasks/{" +
      "id.project}/{id.domain}\022\330\002\n\016CreateWorkfl" +
      "ow\022%.flyteidl.admin.WorkflowCreateReques" +
      "t\032&.flyteidl.admin.WorkflowCreateRespons" +
      "e\"\366\001\202\323\344\223\002\026\"\021/api/v1/workflows:\001*\222A\326\001\032)Cr" +
      "eate and register a workflow definitionJ" +
      "B\n\003400\022;\n9Returned for bad request that " +
      "may have failed validation.Je\n\003409\022^\n\\Re" +
      "turned for a request that references an " +
      "identical entity that has already been r" +
      "egistered.\022\224\001\n\013GetWorkflow\022 .flyteidl.ad" +
      "min.ObjectGetRequest\032\030.flyteidl.admin.Wo" +
      "rkflow\"I\202\323\344\223\002C\022A/api/v1/workflows/{id.pr" +
      "oject}/{id.domain}/{id.name}/{id.version" +
      "}\022\237\001\n\017ListWorkflowIds\0220.flyteidl.admin.N" +
      "amedEntityIdentifierListRequest\032).flytei" +
      "dl.admin.NamedEntityIdentifierList\"/\202\323\344\223" +
      "\002)\022\'/api/v1/workflow_ids/{project}/{doma" +
      "in}\022\276\001\n\rListWorkflows\022#.flyteidl.admin.R" +
      "esourceListRequest\032\034.flyteidl.admin.Work" +
      "flowList\"j\202\323\344\223\002d\0224/api/v1/workflows/{id." +
      "project}/{id.domain}/{id.name}Z,\022*/api/v" +
      "1/workflows/{id.project}/{id.domain}\022\344\002\n" +
      "\020CreateLaunchPlan\022\'.flyteidl.admin.Launc" +
      "hPlanCreateRequest\032(.flyteidl.admin.Laun" +
      "chPlanCreateResponse\"\374\001\202\323\344\223\002\031\"\024/api/v1/l" +
      "aunch_plans:\001*\222A\331\001\032,Create and register " +
      "a launch plan definitionJB\n\003400\022;\n9Retur" +
      "ned for bad request that may have failed" +
      " validation.Je\n\003409\022^\n\\Returned for a re" +
      "quest that references an identical entit" +
      "y that has already been registered.\022\233\001\n\r" +
      "GetLaunchPlan\022 .flyteidl.admin.ObjectGet" +
      "Request\032\032.flyteidl.admin.LaunchPlan\"L\202\323\344" +
      "\223\002F\022D/api/v1/launch_plans/{id.project}/{" +
      "id.domain}/{id.name}/{id.version}\022\242\001\n\023Ge" +
      "tActiveLaunchPlan\022\'.flyteidl.admin.Activ" +
      "eLaunchPlanRequest\032\032.flyteidl.admin.Laun" +
      "chPlan\"F\202\323\344\223\002@\022>/api/v1/active_launch_pl" +
      "ans/{id.project}/{id.domain}/{id.name}\022\241" +
      "\001\n\025ListActiveLaunchPlans\0220.flyteidl.admi" +
      "n.NamedEntityIdentifierListRequest\032\036.fly" +
      "teidl.admin.LaunchPlanList\"6\202\323\344\223\0020\022./api" +
      "/v1/active_launch_plans/{project}/{domai" +
      "n}\022\244\001\n\021ListLaunchPlanIds\0220.flyteidl.admi" +
      "n.NamedEntityIdentifierListRequest\032).fly" +
      "teidl.admin.NamedEntityIdentifierList\"2\202" +
      "\323\344\223\002,\022*/api/v1/launch_plan_ids/{project}" +
      "/{domain}\022\310\001\n\017ListLaunchPlans\022#.flyteidl" +
      ".admin.ResourceListRequest\032\036.flyteidl.ad" +
      "min.LaunchPlanList\"p\202\323\344\223\002j\0227/api/v1/laun" +
      "ch_plans/{id.project}/{id.domain}/{id.na" +
      "me}Z/\022-/api/v1/launch_plans/{id.project}" +
      "/{id.domain}\022\266\001\n\020UpdateLaunchPlan\022\'.flyt" +
      "eidl.admin.LaunchPlanUpdateRequest\032(.fly" +
      "teidl.admin.LaunchPlanUpdateResponse\"O\202\323" +
      "\344\223\002I\032D/api/v1/launch_plans/{id.project}/" +
      "{id.domain}/{id.name}/{id.version}:\001*\022\316\002" +
      "\n\017CreateExecution\022&.flyteidl.admin.Execu" +
      "tionCreateRequest\032\'.flyteidl.admin.Execu" +
      "tionCreateResponse\"\351\001\202\323\344\223\002\027\"\022/api/v1/exe" +
      "cutions:\001*\222A\310\001\032\033Create a workflow execut" +
      "ionJB\n\003400\022;\n9Returned for bad request t" +
      "hat may have failed validation.Je\n\003409\022^" +
      "\n\\Returned for a request that references" +
      " an identical entity that has already be" +
      "en registered.\022\335\002\n\021RelaunchExecution\022(.f" +
      "lyteidl.admin.ExecutionRelaunchRequest\032\'" +
      ".flyteidl.admin.ExecutionCreateResponse\"" +
      "\364\001\202\323\344\223\002 \"\033/api/v1/executions/relaunch:\001*" +
      "\222A\312\001\032\035Relaunch a workflow executionJB\n\0034" +
      "00\022;\n9Returned for bad request that may " +
      "have failed validation.Je\n\003409\022^\n\\Return" +
      "ed for a request that references an iden" +
      "tical entity that has already been regis" +
      "tered.\022\225\001\n\014GetExecution\022+.flyteidl.admin" +
      ".WorkflowExecutionGetRequest\032\031.flyteidl." +
      "admin.Execution\"=\202\323\344\223\0027\0225/api/v1/executi" +
      "ons/{id.project}/{id.domain}/{id.name}\022\271" +
      "\001\n\020GetExecutionData\022/.flyteidl.admin.Wor" +
      "kflowExecutionGetDataRequest\0320.flyteidl." +
      "admin.WorkflowExecutionGetDataResponse\"B" +
      "\202\323\344\223\002<\022:/api/v1/data/executions/{id.proj" +
      "ect}/{id.domain}/{id.name}\022\211\001\n\016ListExecu" +
      "tions\022#.flyteidl.admin.ResourceListReque" +
      "st\032\035.flyteidl.admin.ExecutionList\"3\202\323\344\223\002" +
      "-\022+/api/v1/executions/{id.project}/{id.d" +
      "omain}\022\255\001\n\022TerminateExecution\022).flyteidl" +
      ".admin.ExecutionTerminateRequest\032*.flyte" +
      "idl.admin.ExecutionTerminateResponse\"@\202\323" +
      "\344\223\002:*5/api/v1/executions/{id.project}/{i" +
      "d.domain}/{id.name}:\001*\022\322\001\n\020GetNodeExecut" +
      "ion\022\'.flyteidl.admin.NodeExecutionGetReq" +
      "uest\032\035.flyteidl.admin.NodeExecution\"v\202\323\344" +
      "\223\002p\022n/api/v1/node_executions/{id.executi" +
      "on_id.project}/{id.execution_id.domain}/" +
      "{id.execution_id.name}/{id.node_id}\022\336\001\n\022" +
      "ListNodeExecutions\022(.flyteidl.admin.Node" +
      "ExecutionListRequest\032!.flyteidl.admin.No" +
      "deExecutionList\"{\202\323\344\223\002u\022s/api/v1/node_ex" +
      "ecutions/{workflow_execution_id.project}" +
      "/{workflow_execution_id.domain}/{workflo" +
      "w_execution_id.name}\022\245\004\n\031ListNodeExecuti" +
      "onsForTask\022/.flyteidl.admin.NodeExecutio" +
      "nForTaskListRequest\032!.flyteidl.admin.Nod" +
      "eExecutionList\"\263\003\202\323\344\223\002\254\003\022\251\003/api/v1/child" +
      "ren/task_executions/{task_execution_id.n" +
      "ode_execution_id.execution_id.project}/{" +
      "task_execution_id.node_execution_id.exec" +
      "ution_id.domain}/{task_execution_id.node" +
      "_execution_id.execution_id.name}/{task_e" +
      "xecution_id.node_execution_id.node_id}/{" +
      "task_execution_id.task_id.project}/{task" +
      "_execution_id.task_id.domain}/{task_exec" +
      "ution_id.task_id.name}/{task_execution_i" +
      "d.task_id.version}/{task_execution_id.re" +
      "try_attempt}\022\356\001\n\024GetNodeExecutionData\022+." +
      "flyteidl.admin.NodeExecutionGetDataReque" +
      "st\032,.flyteidl.admin.NodeExecutionGetData" +
      "Response\"{\202\323\344\223\002u\022s/api/v1/data/node_exec" +
      "utions/{id.execution_id.project}/{id.exe" +
      "cution_id.domain}/{id.execution_id.name}" +
      "/{id.node_id}\022\245\002\n\017RegisterProject\022&.flyt" +
      "eidl.admin.ProjectRegisterRequest\032\'.flyt" +
      "eidl.admin.ProjectRegisterResponse\"\300\001\202\323\344" +
      "\223\002\025\"\020/api/v1/projects:\001*\222A\241\001\032+Register a" +
      " project along with valid domainsJ.\n\003201" +
      "\022\'\n%Returned for successful registration" +
      ".JB\n\003400\022;\n9Returned for bad request tha" +
      "t may have failed validation.\022f\n\014ListPro" +
      "jects\022\".flyteidl.admin.ProjectListReques" +
      "t\032\030.flyteidl.admin.Projects\"\030\202\323\344\223\002\022\022\020/ap" +
      "i/v1/projects\022\231\001\n\023CreateWorkflowEvent\022-." +
      "flyteidl.admin.WorkflowExecutionEventReq" +
      "uest\032..flyteidl.admin.WorkflowExecutionE" +
      "ventResponse\"#\202\323\344\223\002\035\"\030/api/v1/events/wor" +
      "kflows:\001*\022\211\001\n\017CreateNodeEvent\022).flyteidl" +
      ".admin.NodeExecutionEventRequest\032*.flyte" +
      "idl.admin.NodeExecutionEventResponse\"\037\202\323" +
      "\344\223\002\031\"\024/api/v1/events/nodes:\001*\022\211\001\n\017Create" +
      "TaskEvent\022).flyteidl.admin.TaskExecution" +
      "EventRequest\032*.flyteidl.admin.TaskExecut" +
      "ionEventResponse\"\037\202\323\344\223\002\031\"\024/api/v1/events" +
      "/tasks:\001*\022\200\003\n\020GetTaskExecution\022\'.flyteid" +
      "l.admin.TaskExecutionGetRequest\032\035.flytei" +
      "dl.admin.TaskExecution\"\243\002\202\323\344\223\002\234\002\022\231\002/api/" +
      "v1/task_executions/{id.node_execution_id" +
      ".execution_id.project}/{id.node_executio" +
      "n_id.execution_id.domain}/{id.node_execu" +
      "tion_id.execution_id.name}/{id.node_exec" +
      "ution_id.node_id}/{id.task_id.project}/{" +
      "id.task_id.domain}/{id.task_id.name}/{id" +
      ".task_id.version}/{id.retry_attempt}\022\230\002\n" +
      "\022ListTaskExecutions\022(.flyteidl.admin.Tas" +
      "kExecutionListRequest\032!.flyteidl.admin.T" +
      "askExecutionList\"\264\001\202\323\344\223\002\255\001\022\252\001/api/v1/tas" +
      "k_executions/{node_execution_id.executio" +
      "n_id.project}/{node_execution_id.executi" +
      "on_id.domain}/{node_execution_id.executi" +
      "on_id.name}/{node_execution_id.node_id}\022" +
      "\234\003\n\024GetTaskExecutionData\022+.flyteidl.admi" +
      "n.TaskExecutionGetDataRequest\032,.flyteidl" +
      ".admin.TaskExecutionGetDataResponse\"\250\002\202\323" +
      "\344\223\002\241\002\022\236\002/api/v1/data/task_executions/{id" +
      ".node_execution_id.execution_id.project}" +
      "/{id.node_execution_id.execution_id.doma" +
      "in}/{id.node_execution_id.execution_id.n" +
      "ame}/{id.node_execution_id.node_id}/{id." +
      "task_id.project}/{id.task_id.domain}/{id" +
      ".task_id.name}/{id.task_id.version}/{id." +
      "retry_attempt}B5Z3github.com/lyft/flytei" +
      "dl/gen/pb-go/flyteidl/serviceb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.api.AnnotationsProto.getDescriptor(),
          flyteidl.admin.ProjectOuterClass.getDescriptor(),
          flyteidl.admin.TaskOuterClass.getDescriptor(),
          flyteidl.admin.WorkflowOuterClass.getDescriptor(),
          flyteidl.admin.LaunchPlanOuterClass.getDescriptor(),
          flyteidl.admin.Event.getDescriptor(),
          flyteidl.admin.ExecutionOuterClass.getDescriptor(),
          flyteidl.admin.NodeExecutionOuterClass.getDescriptor(),
          flyteidl.admin.TaskExecutionOuterClass.getDescriptor(),
          flyteidl.admin.Common.getDescriptor(),
          grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor(),
        }, assigner);
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_swagger.options.Annotations.openapiv2Operation);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.api.AnnotationsProto.getDescriptor();
    flyteidl.admin.ProjectOuterClass.getDescriptor();
    flyteidl.admin.TaskOuterClass.getDescriptor();
    flyteidl.admin.WorkflowOuterClass.getDescriptor();
    flyteidl.admin.LaunchPlanOuterClass.getDescriptor();
    flyteidl.admin.Event.getDescriptor();
    flyteidl.admin.ExecutionOuterClass.getDescriptor();
    flyteidl.admin.NodeExecutionOuterClass.getDescriptor();
    flyteidl.admin.TaskExecutionOuterClass.getDescriptor();
    flyteidl.admin.Common.getDescriptor();
    grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
