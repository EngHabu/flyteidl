// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lyft/flyteidl/gen/pb-go/flyteidl/service (interfaces: AdminServiceClient)

// Package events is a generated GoMock package.
package events

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	admin "github.com/lyft/flyteidl/gen/pb-go/flyteidl/admin"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAdminServiceClient is a mock of AdminServiceClient interface
type MockAdminServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceClientMockRecorder
}

// MockAdminServiceClientMockRecorder is the mock recorder for MockAdminServiceClient
type MockAdminServiceClientMockRecorder struct {
	mock *MockAdminServiceClient
}

// NewMockAdminServiceClient creates a new mock instance
func NewMockAdminServiceClient(ctrl *gomock.Controller) *MockAdminServiceClient {
	mock := &MockAdminServiceClient{ctrl: ctrl}
	mock.recorder = &MockAdminServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminServiceClient) EXPECT() *MockAdminServiceClientMockRecorder {
	return m.recorder
}

// CreateExecution mocks base method
func (m *MockAdminServiceClient) CreateExecution(arg0 context.Context, arg1 *admin.ExecutionCreateRequest, arg2 ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExecution", varargs...)
	ret0, _ := ret[0].(*admin.ExecutionCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExecution indicates an expected call of CreateExecution
func (mr *MockAdminServiceClientMockRecorder) CreateExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExecution", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateExecution), varargs...)
}

// CreateLaunchPlan mocks base method
func (m *MockAdminServiceClient) CreateLaunchPlan(arg0 context.Context, arg1 *admin.LaunchPlanCreateRequest, arg2 ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLaunchPlan", varargs...)
	ret0, _ := ret[0].(*admin.LaunchPlanCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchPlan indicates an expected call of CreateLaunchPlan
func (mr *MockAdminServiceClientMockRecorder) CreateLaunchPlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchPlan", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateLaunchPlan), varargs...)
}

// CreateNodeEvent mocks base method
func (m *MockAdminServiceClient) CreateNodeEvent(arg0 context.Context, arg1 *admin.NodeExecutionEventRequest, arg2 ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNodeEvent", varargs...)
	ret0, _ := ret[0].(*admin.NodeExecutionEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeEvent indicates an expected call of CreateNodeEvent
func (mr *MockAdminServiceClientMockRecorder) CreateNodeEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeEvent", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateNodeEvent), varargs...)
}

// CreateTask mocks base method
func (m *MockAdminServiceClient) CreateTask(arg0 context.Context, arg1 *admin.TaskCreateRequest, arg2 ...grpc.CallOption) (*admin.TaskCreateResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTask", varargs...)
	ret0, _ := ret[0].(*admin.TaskCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockAdminServiceClientMockRecorder) CreateTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateTask), varargs...)
}

// CreateTaskEvent mocks base method
func (m *MockAdminServiceClient) CreateTaskEvent(arg0 context.Context, arg1 *admin.TaskExecutionEventRequest, arg2 ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTaskEvent", varargs...)
	ret0, _ := ret[0].(*admin.TaskExecutionEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskEvent indicates an expected call of CreateTaskEvent
func (mr *MockAdminServiceClientMockRecorder) CreateTaskEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskEvent", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateTaskEvent), varargs...)
}

// CreateWorkflow mocks base method
func (m *MockAdminServiceClient) CreateWorkflow(arg0 context.Context, arg1 *admin.WorkflowCreateRequest, arg2 ...grpc.CallOption) (*admin.WorkflowCreateResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflow", varargs...)
	ret0, _ := ret[0].(*admin.WorkflowCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow
func (mr *MockAdminServiceClientMockRecorder) CreateWorkflow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateWorkflow), varargs...)
}

// CreateWorkflowEvent mocks base method
func (m *MockAdminServiceClient) CreateWorkflowEvent(arg0 context.Context, arg1 *admin.WorkflowExecutionEventRequest, arg2 ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowEvent", varargs...)
	ret0, _ := ret[0].(*admin.WorkflowExecutionEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowEvent indicates an expected call of CreateWorkflowEvent
func (mr *MockAdminServiceClientMockRecorder) CreateWorkflowEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowEvent", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateWorkflowEvent), varargs...)
}

// GetExecution mocks base method
func (m *MockAdminServiceClient) GetExecution(arg0 context.Context, arg1 *admin.WorkflowExecutionGetRequest, arg2 ...grpc.CallOption) (*admin.Execution, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecution", varargs...)
	ret0, _ := ret[0].(*admin.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecution indicates an expected call of GetExecution
func (mr *MockAdminServiceClientMockRecorder) GetExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecution", reflect.TypeOf((*MockAdminServiceClient)(nil).GetExecution), varargs...)
}

// GetLaunchPlan mocks base method
func (m *MockAdminServiceClient) GetLaunchPlan(arg0 context.Context, arg1 *admin.ObjectGetRequest, arg2 ...grpc.CallOption) (*admin.LaunchPlan, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchPlan", varargs...)
	ret0, _ := ret[0].(*admin.LaunchPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchPlan indicates an expected call of GetLaunchPlan
func (mr *MockAdminServiceClientMockRecorder) GetLaunchPlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchPlan", reflect.TypeOf((*MockAdminServiceClient)(nil).GetLaunchPlan), varargs...)
}

// GetNodeExecution mocks base method
func (m *MockAdminServiceClient) GetNodeExecution(arg0 context.Context, arg1 *admin.NodeExecutionGetRequest, arg2 ...grpc.CallOption) (*admin.NodeExecution, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeExecution", varargs...)
	ret0, _ := ret[0].(*admin.NodeExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeExecution indicates an expected call of GetNodeExecution
func (mr *MockAdminServiceClientMockRecorder) GetNodeExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeExecution", reflect.TypeOf((*MockAdminServiceClient)(nil).GetNodeExecution), varargs...)
}

// GetTask mocks base method
func (m *MockAdminServiceClient) GetTask(arg0 context.Context, arg1 *admin.ObjectGetRequest, arg2 ...grpc.CallOption) (*admin.Task, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTask", varargs...)
	ret0, _ := ret[0].(*admin.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockAdminServiceClientMockRecorder) GetTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockAdminServiceClient)(nil).GetTask), varargs...)
}

// GetTaskExecution mocks base method
func (m *MockAdminServiceClient) GetTaskExecution(arg0 context.Context, arg1 *admin.TaskExecutionGetRequest, arg2 ...grpc.CallOption) (*admin.TaskExecution, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTaskExecution", varargs...)
	ret0, _ := ret[0].(*admin.TaskExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskExecution indicates an expected call of GetTaskExecution
func (mr *MockAdminServiceClientMockRecorder) GetTaskExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskExecution", reflect.TypeOf((*MockAdminServiceClient)(nil).GetTaskExecution), varargs...)
}

// GetWorkflow mocks base method
func (m *MockAdminServiceClient) GetWorkflow(arg0 context.Context, arg1 *admin.ObjectGetRequest, arg2 ...grpc.CallOption) (*admin.Workflow, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflow", varargs...)
	ret0, _ := ret[0].(*admin.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow
func (mr *MockAdminServiceClientMockRecorder) GetWorkflow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockAdminServiceClient)(nil).GetWorkflow), varargs...)
}

// ListExecutions mocks base method
func (m *MockAdminServiceClient) ListExecutions(arg0 context.Context, arg1 *admin.ResourceListRequest, arg2 ...grpc.CallOption) (*admin.ExecutionList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutions", varargs...)
	ret0, _ := ret[0].(*admin.ExecutionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutions indicates an expected call of ListExecutions
func (mr *MockAdminServiceClientMockRecorder) ListExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutions", reflect.TypeOf((*MockAdminServiceClient)(nil).ListExecutions), varargs...)
}

// ListLaunchPlanIds mocks base method
func (m *MockAdminServiceClient) ListLaunchPlanIds(arg0 context.Context, arg1 *admin.NamedEntityIdentifierListRequest, arg2 ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchPlanIds", varargs...)
	ret0, _ := ret[0].(*admin.NamedEntityIdentifierList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchPlanIds indicates an expected call of ListLaunchPlanIds
func (mr *MockAdminServiceClientMockRecorder) ListLaunchPlanIds(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchPlanIds", reflect.TypeOf((*MockAdminServiceClient)(nil).ListLaunchPlanIds), varargs...)
}

// ListLaunchPlans mocks base method
func (m *MockAdminServiceClient) ListLaunchPlans(arg0 context.Context, arg1 *admin.ResourceListRequest, arg2 ...grpc.CallOption) (*admin.LaunchPlanList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchPlans", varargs...)
	ret0, _ := ret[0].(*admin.LaunchPlanList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchPlans indicates an expected call of ListLaunchPlans
func (mr *MockAdminServiceClientMockRecorder) ListLaunchPlans(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchPlans", reflect.TypeOf((*MockAdminServiceClient)(nil).ListLaunchPlans), varargs...)
}

// ListNodeExecutions mocks base method
func (m *MockAdminServiceClient) ListNodeExecutions(arg0 context.Context, arg1 *admin.NodeExecutionListRequest, arg2 ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodeExecutions", varargs...)
	ret0, _ := ret[0].(*admin.NodeExecutionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodeExecutions indicates an expected call of ListNodeExecutions
func (mr *MockAdminServiceClientMockRecorder) ListNodeExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeExecutions", reflect.TypeOf((*MockAdminServiceClient)(nil).ListNodeExecutions), varargs...)
}

// ListProjects mocks base method
func (m *MockAdminServiceClient) ListProjects(arg0 context.Context, arg1 *admin.ProjectListRequest, arg2 ...grpc.CallOption) (*admin.Projects, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].(*admin.Projects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockAdminServiceClientMockRecorder) ListProjects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockAdminServiceClient)(nil).ListProjects), varargs...)
}

// ListTaskIds mocks base method
func (m *MockAdminServiceClient) ListTaskIds(arg0 context.Context, arg1 *admin.NamedEntityIdentifierListRequest, arg2 ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTaskIds", varargs...)
	ret0, _ := ret[0].(*admin.NamedEntityIdentifierList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskIds indicates an expected call of ListTaskIds
func (mr *MockAdminServiceClientMockRecorder) ListTaskIds(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskIds", reflect.TypeOf((*MockAdminServiceClient)(nil).ListTaskIds), varargs...)
}

// ListTasks mocks base method
func (m *MockAdminServiceClient) ListTasks(arg0 context.Context, arg1 *admin.ResourceListRequest, arg2 ...grpc.CallOption) (*admin.TaskList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasks", varargs...)
	ret0, _ := ret[0].(*admin.TaskList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *MockAdminServiceClientMockRecorder) ListTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockAdminServiceClient)(nil).ListTasks), varargs...)
}

// ListWorkflowIds mocks base method
func (m *MockAdminServiceClient) ListWorkflowIds(arg0 context.Context, arg1 *admin.NamedEntityIdentifierListRequest, arg2 ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowIds", varargs...)
	ret0, _ := ret[0].(*admin.NamedEntityIdentifierList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowIds indicates an expected call of ListWorkflowIds
func (mr *MockAdminServiceClientMockRecorder) ListWorkflowIds(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowIds", reflect.TypeOf((*MockAdminServiceClient)(nil).ListWorkflowIds), varargs...)
}

// ListWorkflows mocks base method
func (m *MockAdminServiceClient) ListWorkflows(arg0 context.Context, arg1 *admin.ResourceListRequest, arg2 ...grpc.CallOption) (*admin.WorkflowList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflows", varargs...)
	ret0, _ := ret[0].(*admin.WorkflowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows
func (mr *MockAdminServiceClientMockRecorder) ListWorkflows(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockAdminServiceClient)(nil).ListWorkflows), varargs...)
}

// RegisterProject mocks base method
func (m *MockAdminServiceClient) RegisterProject(arg0 context.Context, arg1 *admin.Project, arg2 ...grpc.CallOption) (*admin.ProjectRegisterResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterProject", varargs...)
	ret0, _ := ret[0].(*admin.ProjectRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterProject indicates an expected call of RegisterProject
func (mr *MockAdminServiceClientMockRecorder) RegisterProject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProject", reflect.TypeOf((*MockAdminServiceClient)(nil).RegisterProject), varargs...)
}

// UpdateLaunchPlan mocks base method
func (m *MockAdminServiceClient) UpdateLaunchPlan(arg0 context.Context, arg1 *admin.LaunchPlanUpdateRequest, arg2 ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchPlan", varargs...)
	ret0, _ := ret[0].(*admin.LaunchPlanUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchPlan indicates an expected call of UpdateLaunchPlan
func (mr *MockAdminServiceClientMockRecorder) UpdateLaunchPlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchPlan", reflect.TypeOf((*MockAdminServiceClient)(nil).UpdateLaunchPlan), varargs...)
}
