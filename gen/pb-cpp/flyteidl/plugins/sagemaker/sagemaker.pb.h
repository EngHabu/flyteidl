// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sagemaker/sagemaker.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto();
namespace flyteidl {
namespace plugins {
namespace sagemaker {
class AlgorithmSpecification;
class AlgorithmSpecificationDefaultTypeInternal;
extern AlgorithmSpecificationDefaultTypeInternal _AlgorithmSpecification_default_instance_;
class AlgorithmSpecification_MetricDefinition;
class AlgorithmSpecification_MetricDefinitionDefaultTypeInternal;
extern AlgorithmSpecification_MetricDefinitionDefaultTypeInternal _AlgorithmSpecification_MetricDefinition_default_instance_;
class CategoricalParameterRange;
class CategoricalParameterRangeDefaultTypeInternal;
extern CategoricalParameterRangeDefaultTypeInternal _CategoricalParameterRange_default_instance_;
class ContinuousParameterRange;
class ContinuousParameterRangeDefaultTypeInternal;
extern ContinuousParameterRangeDefaultTypeInternal _ContinuousParameterRange_default_instance_;
class HPOJobObjective;
class HPOJobObjectiveDefaultTypeInternal;
extern HPOJobObjectiveDefaultTypeInternal _HPOJobObjective_default_instance_;
class IntegerParameterRange;
class IntegerParameterRangeDefaultTypeInternal;
extern IntegerParameterRangeDefaultTypeInternal _IntegerParameterRange_default_instance_;
class ParameterRanges;
class ParameterRangesDefaultTypeInternal;
extern ParameterRangesDefaultTypeInternal _ParameterRanges_default_instance_;
class ResourceConfig;
class ResourceConfigDefaultTypeInternal;
extern ResourceConfigDefaultTypeInternal _ResourceConfig_default_instance_;
class SagemakerHPOJob;
class SagemakerHPOJobDefaultTypeInternal;
extern SagemakerHPOJobDefaultTypeInternal _SagemakerHPOJob_default_instance_;
class SagemakerTrainingJob;
class SagemakerTrainingJobDefaultTypeInternal;
extern SagemakerTrainingJobDefaultTypeInternal _SagemakerTrainingJob_default_instance_;
class StoppingCondition;
class StoppingConditionDefaultTypeInternal;
extern StoppingConditionDefaultTypeInternal _StoppingCondition_default_instance_;
class VpcConfig;
class VpcConfigDefaultTypeInternal;
extern VpcConfigDefaultTypeInternal _VpcConfig_default_instance_;
}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::sagemaker::AlgorithmSpecification* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmSpecification>(Arena*);
template<> ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition>(Arena*);
template<> ::flyteidl::plugins::sagemaker::CategoricalParameterRange* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::CategoricalParameterRange>(Arena*);
template<> ::flyteidl::plugins::sagemaker::ContinuousParameterRange* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::ContinuousParameterRange>(Arena*);
template<> ::flyteidl::plugins::sagemaker::HPOJobObjective* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::HPOJobObjective>(Arena*);
template<> ::flyteidl::plugins::sagemaker::IntegerParameterRange* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::IntegerParameterRange>(Arena*);
template<> ::flyteidl::plugins::sagemaker::ParameterRanges* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::ParameterRanges>(Arena*);
template<> ::flyteidl::plugins::sagemaker::ResourceConfig* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::ResourceConfig>(Arena*);
template<> ::flyteidl::plugins::sagemaker::SagemakerHPOJob* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::SagemakerHPOJob>(Arena*);
template<> ::flyteidl::plugins::sagemaker::SagemakerTrainingJob* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::SagemakerTrainingJob>(Arena*);
template<> ::flyteidl::plugins::sagemaker::StoppingCondition* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::StoppingCondition>(Arena*);
template<> ::flyteidl::plugins::sagemaker::VpcConfig* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::VpcConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {
namespace sagemaker {

enum HPOJobObjective_HPOJobObjectiveType {
  HPOJobObjective_HPOJobObjectiveType_MINIMIZE = 0,
  HPOJobObjective_HPOJobObjectiveType_MAXIMIZE = 1,
  HPOJobObjective_HPOJobObjectiveType_HPOJobObjective_HPOJobObjectiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  HPOJobObjective_HPOJobObjectiveType_HPOJobObjective_HPOJobObjectiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool HPOJobObjective_HPOJobObjectiveType_IsValid(int value);
const HPOJobObjective_HPOJobObjectiveType HPOJobObjective_HPOJobObjectiveType_HPOJobObjectiveType_MIN = HPOJobObjective_HPOJobObjectiveType_MINIMIZE;
const HPOJobObjective_HPOJobObjectiveType HPOJobObjective_HPOJobObjectiveType_HPOJobObjectiveType_MAX = HPOJobObjective_HPOJobObjectiveType_MAXIMIZE;
const int HPOJobObjective_HPOJobObjectiveType_HPOJobObjectiveType_ARRAYSIZE = HPOJobObjective_HPOJobObjectiveType_HPOJobObjectiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HPOJobObjective_HPOJobObjectiveType_descriptor();
inline const ::std::string& HPOJobObjective_HPOJobObjectiveType_Name(HPOJobObjective_HPOJobObjectiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HPOJobObjective_HPOJobObjectiveType_descriptor(), value);
}
inline bool HPOJobObjective_HPOJobObjectiveType_Parse(
    const ::std::string& name, HPOJobObjective_HPOJobObjectiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HPOJobObjective_HPOJobObjectiveType>(
    HPOJobObjective_HPOJobObjectiveType_descriptor(), name, value);
}
enum HyperparameterScalingType {
  AUTO = 0,
  LINEAR = 1,
  LOGARITHMIC = 2,
  REVERSELOGARITHMIC = 3,
  HyperparameterScalingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  HyperparameterScalingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool HyperparameterScalingType_IsValid(int value);
const HyperparameterScalingType HyperparameterScalingType_MIN = AUTO;
const HyperparameterScalingType HyperparameterScalingType_MAX = REVERSELOGARITHMIC;
const int HyperparameterScalingType_ARRAYSIZE = HyperparameterScalingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HyperparameterScalingType_descriptor();
inline const ::std::string& HyperparameterScalingType_Name(HyperparameterScalingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HyperparameterScalingType_descriptor(), value);
}
inline bool HyperparameterScalingType_Parse(
    const ::std::string& name, HyperparameterScalingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HyperparameterScalingType>(
    HyperparameterScalingType_descriptor(), name, value);
}
// ===================================================================

class ContinuousParameterRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.ContinuousParameterRange) */ {
 public:
  ContinuousParameterRange();
  virtual ~ContinuousParameterRange();

  ContinuousParameterRange(const ContinuousParameterRange& from);

  inline ContinuousParameterRange& operator=(const ContinuousParameterRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContinuousParameterRange(ContinuousParameterRange&& from) noexcept
    : ContinuousParameterRange() {
    *this = ::std::move(from);
  }

  inline ContinuousParameterRange& operator=(ContinuousParameterRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ContinuousParameterRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContinuousParameterRange* internal_default_instance() {
    return reinterpret_cast<const ContinuousParameterRange*>(
               &_ContinuousParameterRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ContinuousParameterRange* other);
  friend void swap(ContinuousParameterRange& a, ContinuousParameterRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContinuousParameterRange* New() const final {
    return CreateMaybeMessage<ContinuousParameterRange>(nullptr);
  }

  ContinuousParameterRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContinuousParameterRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContinuousParameterRange& from);
  void MergeFrom(const ContinuousParameterRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinuousParameterRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // double MaxValue = 2;
  void clear_maxvalue();
  static const int kMaxValueFieldNumber = 2;
  double maxvalue() const;
  void set_maxvalue(double value);

  // double MinValue = 3;
  void clear_minvalue();
  static const int kMinValueFieldNumber = 3;
  double minvalue() const;
  void set_minvalue(double value);

  // .flyteidl.plugins.sagemaker.HyperparameterScalingType ScalingType = 4;
  void clear_scalingtype();
  static const int kScalingTypeFieldNumber = 4;
  ::flyteidl::plugins::sagemaker::HyperparameterScalingType scalingtype() const;
  void set_scalingtype(::flyteidl::plugins::sagemaker::HyperparameterScalingType value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.ContinuousParameterRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double maxvalue_;
  double minvalue_;
  int scalingtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class IntegerParameterRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.IntegerParameterRange) */ {
 public:
  IntegerParameterRange();
  virtual ~IntegerParameterRange();

  IntegerParameterRange(const IntegerParameterRange& from);

  inline IntegerParameterRange& operator=(const IntegerParameterRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntegerParameterRange(IntegerParameterRange&& from) noexcept
    : IntegerParameterRange() {
    *this = ::std::move(from);
  }

  inline IntegerParameterRange& operator=(IntegerParameterRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntegerParameterRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntegerParameterRange* internal_default_instance() {
    return reinterpret_cast<const IntegerParameterRange*>(
               &_IntegerParameterRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IntegerParameterRange* other);
  friend void swap(IntegerParameterRange& a, IntegerParameterRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntegerParameterRange* New() const final {
    return CreateMaybeMessage<IntegerParameterRange>(nullptr);
  }

  IntegerParameterRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntegerParameterRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntegerParameterRange& from);
  void MergeFrom(const IntegerParameterRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerParameterRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float MaxValue = 2;
  void clear_maxvalue();
  static const int kMaxValueFieldNumber = 2;
  float maxvalue() const;
  void set_maxvalue(float value);

  // float MinValue = 3;
  void clear_minvalue();
  static const int kMinValueFieldNumber = 3;
  float minvalue() const;
  void set_minvalue(float value);

  // .flyteidl.plugins.sagemaker.HyperparameterScalingType ScalingType = 4;
  void clear_scalingtype();
  static const int kScalingTypeFieldNumber = 4;
  ::flyteidl::plugins::sagemaker::HyperparameterScalingType scalingtype() const;
  void set_scalingtype(::flyteidl::plugins::sagemaker::HyperparameterScalingType value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.IntegerParameterRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float maxvalue_;
  float minvalue_;
  int scalingtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class CategoricalParameterRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.CategoricalParameterRange) */ {
 public:
  CategoricalParameterRange();
  virtual ~CategoricalParameterRange();

  CategoricalParameterRange(const CategoricalParameterRange& from);

  inline CategoricalParameterRange& operator=(const CategoricalParameterRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CategoricalParameterRange(CategoricalParameterRange&& from) noexcept
    : CategoricalParameterRange() {
    *this = ::std::move(from);
  }

  inline CategoricalParameterRange& operator=(CategoricalParameterRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CategoricalParameterRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CategoricalParameterRange* internal_default_instance() {
    return reinterpret_cast<const CategoricalParameterRange*>(
               &_CategoricalParameterRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CategoricalParameterRange* other);
  friend void swap(CategoricalParameterRange& a, CategoricalParameterRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CategoricalParameterRange* New() const final {
    return CreateMaybeMessage<CategoricalParameterRange>(nullptr);
  }

  CategoricalParameterRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CategoricalParameterRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CategoricalParameterRange& from);
  void MergeFrom(const CategoricalParameterRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoricalParameterRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_values();

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.CategoricalParameterRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> values_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class ParameterRanges final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.ParameterRanges) */ {
 public:
  ParameterRanges();
  virtual ~ParameterRanges();

  ParameterRanges(const ParameterRanges& from);

  inline ParameterRanges& operator=(const ParameterRanges& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParameterRanges(ParameterRanges&& from) noexcept
    : ParameterRanges() {
    *this = ::std::move(from);
  }

  inline ParameterRanges& operator=(ParameterRanges&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ParameterRanges& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterRanges* internal_default_instance() {
    return reinterpret_cast<const ParameterRanges*>(
               &_ParameterRanges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ParameterRanges* other);
  friend void swap(ParameterRanges& a, ParameterRanges& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParameterRanges* New() const final {
    return CreateMaybeMessage<ParameterRanges>(nullptr);
  }

  ParameterRanges* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParameterRanges>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParameterRanges& from);
  void MergeFrom(const ParameterRanges& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterRanges* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.plugins.sagemaker.ContinuousParameterRange ContinuousParameterRanges = 1;
  int continuousparameterranges_size() const;
  void clear_continuousparameterranges();
  static const int kContinuousParameterRangesFieldNumber = 1;
  ::flyteidl::plugins::sagemaker::ContinuousParameterRange* mutable_continuousparameterranges(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::ContinuousParameterRange >*
      mutable_continuousparameterranges();
  const ::flyteidl::plugins::sagemaker::ContinuousParameterRange& continuousparameterranges(int index) const;
  ::flyteidl::plugins::sagemaker::ContinuousParameterRange* add_continuousparameterranges();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::ContinuousParameterRange >&
      continuousparameterranges() const;

  // repeated .flyteidl.plugins.sagemaker.IntegerParameterRange IntegerParameterRanges = 2;
  int integerparameterranges_size() const;
  void clear_integerparameterranges();
  static const int kIntegerParameterRangesFieldNumber = 2;
  ::flyteidl::plugins::sagemaker::IntegerParameterRange* mutable_integerparameterranges(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::IntegerParameterRange >*
      mutable_integerparameterranges();
  const ::flyteidl::plugins::sagemaker::IntegerParameterRange& integerparameterranges(int index) const;
  ::flyteidl::plugins::sagemaker::IntegerParameterRange* add_integerparameterranges();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::IntegerParameterRange >&
      integerparameterranges() const;

  // repeated .flyteidl.plugins.sagemaker.CategoricalParameterRange CategoricalParameterRanges = 3;
  int categoricalparameterranges_size() const;
  void clear_categoricalparameterranges();
  static const int kCategoricalParameterRangesFieldNumber = 3;
  ::flyteidl::plugins::sagemaker::CategoricalParameterRange* mutable_categoricalparameterranges(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::CategoricalParameterRange >*
      mutable_categoricalparameterranges();
  const ::flyteidl::plugins::sagemaker::CategoricalParameterRange& categoricalparameterranges(int index) const;
  ::flyteidl::plugins::sagemaker::CategoricalParameterRange* add_categoricalparameterranges();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::CategoricalParameterRange >&
      categoricalparameterranges() const;

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.ParameterRanges)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::ContinuousParameterRange > continuousparameterranges_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::IntegerParameterRange > integerparameterranges_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::CategoricalParameterRange > categoricalparameterranges_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmSpecification_MetricDefinition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition) */ {
 public:
  AlgorithmSpecification_MetricDefinition();
  virtual ~AlgorithmSpecification_MetricDefinition();

  AlgorithmSpecification_MetricDefinition(const AlgorithmSpecification_MetricDefinition& from);

  inline AlgorithmSpecification_MetricDefinition& operator=(const AlgorithmSpecification_MetricDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmSpecification_MetricDefinition(AlgorithmSpecification_MetricDefinition&& from) noexcept
    : AlgorithmSpecification_MetricDefinition() {
    *this = ::std::move(from);
  }

  inline AlgorithmSpecification_MetricDefinition& operator=(AlgorithmSpecification_MetricDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmSpecification_MetricDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmSpecification_MetricDefinition* internal_default_instance() {
    return reinterpret_cast<const AlgorithmSpecification_MetricDefinition*>(
               &_AlgorithmSpecification_MetricDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AlgorithmSpecification_MetricDefinition* other);
  friend void swap(AlgorithmSpecification_MetricDefinition& a, AlgorithmSpecification_MetricDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmSpecification_MetricDefinition* New() const final {
    return CreateMaybeMessage<AlgorithmSpecification_MetricDefinition>(nullptr);
  }

  AlgorithmSpecification_MetricDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmSpecification_MetricDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmSpecification_MetricDefinition& from);
  void MergeFrom(const AlgorithmSpecification_MetricDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmSpecification_MetricDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Regex = 2;
  void clear_regex();
  static const int kRegexFieldNumber = 2;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_regex(::std::string&& value);
  #endif
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmSpecification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.AlgorithmSpecification) */ {
 public:
  AlgorithmSpecification();
  virtual ~AlgorithmSpecification();

  AlgorithmSpecification(const AlgorithmSpecification& from);

  inline AlgorithmSpecification& operator=(const AlgorithmSpecification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmSpecification(AlgorithmSpecification&& from) noexcept
    : AlgorithmSpecification() {
    *this = ::std::move(from);
  }

  inline AlgorithmSpecification& operator=(AlgorithmSpecification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmSpecification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmSpecification* internal_default_instance() {
    return reinterpret_cast<const AlgorithmSpecification*>(
               &_AlgorithmSpecification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AlgorithmSpecification* other);
  friend void swap(AlgorithmSpecification& a, AlgorithmSpecification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmSpecification* New() const final {
    return CreateMaybeMessage<AlgorithmSpecification>(nullptr);
  }

  AlgorithmSpecification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmSpecification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmSpecification& from);
  void MergeFrom(const AlgorithmSpecification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmSpecification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlgorithmSpecification_MetricDefinition MetricDefinition;

  // accessors -------------------------------------------------------

  // repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition MetricDefinitions = 4;
  int metricdefinitions_size() const;
  void clear_metricdefinitions();
  static const int kMetricDefinitionsFieldNumber = 4;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* mutable_metricdefinitions(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >*
      mutable_metricdefinitions();
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition& metricdefinitions(int index) const;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* add_metricdefinitions();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >&
      metricdefinitions() const;

  // string TrainingImage = 1;
  void clear_trainingimage();
  static const int kTrainingImageFieldNumber = 1;
  const ::std::string& trainingimage() const;
  void set_trainingimage(const ::std::string& value);
  #if LANG_CXX11
  void set_trainingimage(::std::string&& value);
  #endif
  void set_trainingimage(const char* value);
  void set_trainingimage(const char* value, size_t size);
  ::std::string* mutable_trainingimage();
  ::std::string* release_trainingimage();
  void set_allocated_trainingimage(::std::string* trainingimage);

  // string TrainingInputMode = 2;
  void clear_traininginputmode();
  static const int kTrainingInputModeFieldNumber = 2;
  const ::std::string& traininginputmode() const;
  void set_traininginputmode(const ::std::string& value);
  #if LANG_CXX11
  void set_traininginputmode(::std::string&& value);
  #endif
  void set_traininginputmode(const char* value);
  void set_traininginputmode(const char* value, size_t size);
  ::std::string* mutable_traininginputmode();
  ::std::string* release_traininginputmode();
  void set_allocated_traininginputmode(::std::string* traininginputmode);

  // string AlgorithmName = 3;
  void clear_algorithmname();
  static const int kAlgorithmNameFieldNumber = 3;
  const ::std::string& algorithmname() const;
  void set_algorithmname(const ::std::string& value);
  #if LANG_CXX11
  void set_algorithmname(::std::string&& value);
  #endif
  void set_algorithmname(const char* value);
  void set_algorithmname(const char* value, size_t size);
  ::std::string* mutable_algorithmname();
  ::std::string* release_algorithmname();
  void set_allocated_algorithmname(::std::string* algorithmname);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.AlgorithmSpecification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition > metricdefinitions_;
  ::google::protobuf::internal::ArenaStringPtr trainingimage_;
  ::google::protobuf::internal::ArenaStringPtr traininginputmode_;
  ::google::protobuf::internal::ArenaStringPtr algorithmname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class ResourceConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.ResourceConfig) */ {
 public:
  ResourceConfig();
  virtual ~ResourceConfig();

  ResourceConfig(const ResourceConfig& from);

  inline ResourceConfig& operator=(const ResourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceConfig(ResourceConfig&& from) noexcept
    : ResourceConfig() {
    *this = ::std::move(from);
  }

  inline ResourceConfig& operator=(ResourceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceConfig*>(
               &_ResourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ResourceConfig* other);
  friend void swap(ResourceConfig& a, ResourceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceConfig* New() const final {
    return CreateMaybeMessage<ResourceConfig>(nullptr);
  }

  ResourceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceConfig& from);
  void MergeFrom(const ResourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string InstanceType = 1;
  void clear_instancetype();
  static const int kInstanceTypeFieldNumber = 1;
  const ::std::string& instancetype() const;
  void set_instancetype(const ::std::string& value);
  #if LANG_CXX11
  void set_instancetype(::std::string&& value);
  #endif
  void set_instancetype(const char* value);
  void set_instancetype(const char* value, size_t size);
  ::std::string* mutable_instancetype();
  ::std::string* release_instancetype();
  void set_allocated_instancetype(::std::string* instancetype);

  // string VolumeKmsKeyId = 4;
  void clear_volumekmskeyid();
  static const int kVolumeKmsKeyIdFieldNumber = 4;
  const ::std::string& volumekmskeyid() const;
  void set_volumekmskeyid(const ::std::string& value);
  #if LANG_CXX11
  void set_volumekmskeyid(::std::string&& value);
  #endif
  void set_volumekmskeyid(const char* value);
  void set_volumekmskeyid(const char* value, size_t size);
  ::std::string* mutable_volumekmskeyid();
  ::std::string* release_volumekmskeyid();
  void set_allocated_volumekmskeyid(::std::string* volumekmskeyid);

  // int64 InstanceCount = 2;
  void clear_instancecount();
  static const int kInstanceCountFieldNumber = 2;
  ::google::protobuf::int64 instancecount() const;
  void set_instancecount(::google::protobuf::int64 value);

  // int64 VolumeSizeInGB = 3;
  void clear_volumesizeingb();
  static const int kVolumeSizeInGBFieldNumber = 3;
  ::google::protobuf::int64 volumesizeingb() const;
  void set_volumesizeingb(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.ResourceConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instancetype_;
  ::google::protobuf::internal::ArenaStringPtr volumekmskeyid_;
  ::google::protobuf::int64 instancecount_;
  ::google::protobuf::int64 volumesizeingb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class StoppingCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.StoppingCondition) */ {
 public:
  StoppingCondition();
  virtual ~StoppingCondition();

  StoppingCondition(const StoppingCondition& from);

  inline StoppingCondition& operator=(const StoppingCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoppingCondition(StoppingCondition&& from) noexcept
    : StoppingCondition() {
    *this = ::std::move(from);
  }

  inline StoppingCondition& operator=(StoppingCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StoppingCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoppingCondition* internal_default_instance() {
    return reinterpret_cast<const StoppingCondition*>(
               &_StoppingCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(StoppingCondition* other);
  friend void swap(StoppingCondition& a, StoppingCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoppingCondition* New() const final {
    return CreateMaybeMessage<StoppingCondition>(nullptr);
  }

  StoppingCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoppingCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoppingCondition& from);
  void MergeFrom(const StoppingCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoppingCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 MaxRuntimeInSeconds = 1;
  void clear_maxruntimeinseconds();
  static const int kMaxRuntimeInSecondsFieldNumber = 1;
  ::google::protobuf::int64 maxruntimeinseconds() const;
  void set_maxruntimeinseconds(::google::protobuf::int64 value);

  // int64 MaxWaitTimeInSeconds = 2;
  void clear_maxwaittimeinseconds();
  static const int kMaxWaitTimeInSecondsFieldNumber = 2;
  ::google::protobuf::int64 maxwaittimeinseconds() const;
  void set_maxwaittimeinseconds(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.StoppingCondition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 maxruntimeinseconds_;
  ::google::protobuf::int64 maxwaittimeinseconds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class VpcConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.VpcConfig) */ {
 public:
  VpcConfig();
  virtual ~VpcConfig();

  VpcConfig(const VpcConfig& from);

  inline VpcConfig& operator=(const VpcConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VpcConfig(VpcConfig&& from) noexcept
    : VpcConfig() {
    *this = ::std::move(from);
  }

  inline VpcConfig& operator=(VpcConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VpcConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VpcConfig* internal_default_instance() {
    return reinterpret_cast<const VpcConfig*>(
               &_VpcConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(VpcConfig* other);
  friend void swap(VpcConfig& a, VpcConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VpcConfig* New() const final {
    return CreateMaybeMessage<VpcConfig>(nullptr);
  }

  VpcConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VpcConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VpcConfig& from);
  void MergeFrom(const VpcConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VpcConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string SecurityGroupIds = 1;
  int securitygroupids_size() const;
  void clear_securitygroupids();
  static const int kSecurityGroupIdsFieldNumber = 1;
  const ::std::string& securitygroupids(int index) const;
  ::std::string* mutable_securitygroupids(int index);
  void set_securitygroupids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_securitygroupids(int index, ::std::string&& value);
  #endif
  void set_securitygroupids(int index, const char* value);
  void set_securitygroupids(int index, const char* value, size_t size);
  ::std::string* add_securitygroupids();
  void add_securitygroupids(const ::std::string& value);
  #if LANG_CXX11
  void add_securitygroupids(::std::string&& value);
  #endif
  void add_securitygroupids(const char* value);
  void add_securitygroupids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& securitygroupids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_securitygroupids();

  // repeated string Subnets = 2;
  int subnets_size() const;
  void clear_subnets();
  static const int kSubnetsFieldNumber = 2;
  const ::std::string& subnets(int index) const;
  ::std::string* mutable_subnets(int index);
  void set_subnets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subnets(int index, ::std::string&& value);
  #endif
  void set_subnets(int index, const char* value);
  void set_subnets(int index, const char* value, size_t size);
  ::std::string* add_subnets();
  void add_subnets(const ::std::string& value);
  #if LANG_CXX11
  void add_subnets(::std::string&& value);
  #endif
  void add_subnets(const char* value);
  void add_subnets(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& subnets() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_subnets();

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.VpcConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> securitygroupids_;
  ::google::protobuf::RepeatedPtrField<::std::string> subnets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class SagemakerTrainingJob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.SagemakerTrainingJob) */ {
 public:
  SagemakerTrainingJob();
  virtual ~SagemakerTrainingJob();

  SagemakerTrainingJob(const SagemakerTrainingJob& from);

  inline SagemakerTrainingJob& operator=(const SagemakerTrainingJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SagemakerTrainingJob(SagemakerTrainingJob&& from) noexcept
    : SagemakerTrainingJob() {
    *this = ::std::move(from);
  }

  inline SagemakerTrainingJob& operator=(SagemakerTrainingJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SagemakerTrainingJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SagemakerTrainingJob* internal_default_instance() {
    return reinterpret_cast<const SagemakerTrainingJob*>(
               &_SagemakerTrainingJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SagemakerTrainingJob* other);
  friend void swap(SagemakerTrainingJob& a, SagemakerTrainingJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SagemakerTrainingJob* New() const final {
    return CreateMaybeMessage<SagemakerTrainingJob>(nullptr);
  }

  SagemakerTrainingJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SagemakerTrainingJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SagemakerTrainingJob& from);
  void MergeFrom(const SagemakerTrainingJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SagemakerTrainingJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Region = 1;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string RoleArn = 2;
  void clear_rolearn();
  static const int kRoleArnFieldNumber = 2;
  const ::std::string& rolearn() const;
  void set_rolearn(const ::std::string& value);
  #if LANG_CXX11
  void set_rolearn(::std::string&& value);
  #endif
  void set_rolearn(const char* value);
  void set_rolearn(const char* value, size_t size);
  ::std::string* mutable_rolearn();
  ::std::string* release_rolearn();
  void set_allocated_rolearn(::std::string* rolearn);

  // .flyteidl.plugins.sagemaker.AlgorithmSpecification AlgorithmSpecification = 3;
  bool has_algorithmspecification() const;
  void clear_algorithmspecification();
  static const int kAlgorithmSpecificationFieldNumber = 3;
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& algorithmspecification() const;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* release_algorithmspecification();
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* mutable_algorithmspecification();
  void set_allocated_algorithmspecification(::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithmspecification);

  // .flyteidl.plugins.sagemaker.ResourceConfig ResourceConfig = 4;
  bool has_resourceconfig() const;
  void clear_resourceconfig();
  static const int kResourceConfigFieldNumber = 4;
  const ::flyteidl::plugins::sagemaker::ResourceConfig& resourceconfig() const;
  ::flyteidl::plugins::sagemaker::ResourceConfig* release_resourceconfig();
  ::flyteidl::plugins::sagemaker::ResourceConfig* mutable_resourceconfig();
  void set_allocated_resourceconfig(::flyteidl::plugins::sagemaker::ResourceConfig* resourceconfig);

  // .flyteidl.plugins.sagemaker.StoppingCondition StoppingCondition = 5;
  bool has_stoppingcondition() const;
  void clear_stoppingcondition();
  static const int kStoppingConditionFieldNumber = 5;
  const ::flyteidl::plugins::sagemaker::StoppingCondition& stoppingcondition() const;
  ::flyteidl::plugins::sagemaker::StoppingCondition* release_stoppingcondition();
  ::flyteidl::plugins::sagemaker::StoppingCondition* mutable_stoppingcondition();
  void set_allocated_stoppingcondition(::flyteidl::plugins::sagemaker::StoppingCondition* stoppingcondition);

  // .flyteidl.plugins.sagemaker.VpcConfig VpcConfig = 6;
  bool has_vpcconfig() const;
  void clear_vpcconfig();
  static const int kVpcConfigFieldNumber = 6;
  const ::flyteidl::plugins::sagemaker::VpcConfig& vpcconfig() const;
  ::flyteidl::plugins::sagemaker::VpcConfig* release_vpcconfig();
  ::flyteidl::plugins::sagemaker::VpcConfig* mutable_vpcconfig();
  void set_allocated_vpcconfig(::flyteidl::plugins::sagemaker::VpcConfig* vpcconfig);

  // bool EnableSpotTraining = 7;
  void clear_enablespottraining();
  static const int kEnableSpotTrainingFieldNumber = 7;
  bool enablespottraining() const;
  void set_enablespottraining(bool value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.SagemakerTrainingJob)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr rolearn_;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithmspecification_;
  ::flyteidl::plugins::sagemaker::ResourceConfig* resourceconfig_;
  ::flyteidl::plugins::sagemaker::StoppingCondition* stoppingcondition_;
  ::flyteidl::plugins::sagemaker::VpcConfig* vpcconfig_;
  bool enablespottraining_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class HPOJobObjective final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.HPOJobObjective) */ {
 public:
  HPOJobObjective();
  virtual ~HPOJobObjective();

  HPOJobObjective(const HPOJobObjective& from);

  inline HPOJobObjective& operator=(const HPOJobObjective& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HPOJobObjective(HPOJobObjective&& from) noexcept
    : HPOJobObjective() {
    *this = ::std::move(from);
  }

  inline HPOJobObjective& operator=(HPOJobObjective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HPOJobObjective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HPOJobObjective* internal_default_instance() {
    return reinterpret_cast<const HPOJobObjective*>(
               &_HPOJobObjective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(HPOJobObjective* other);
  friend void swap(HPOJobObjective& a, HPOJobObjective& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HPOJobObjective* New() const final {
    return CreateMaybeMessage<HPOJobObjective>(nullptr);
  }

  HPOJobObjective* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HPOJobObjective>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HPOJobObjective& from);
  void MergeFrom(const HPOJobObjective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HPOJobObjective* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HPOJobObjective_HPOJobObjectiveType HPOJobObjectiveType;
  static const HPOJobObjectiveType MINIMIZE =
    HPOJobObjective_HPOJobObjectiveType_MINIMIZE;
  static const HPOJobObjectiveType MAXIMIZE =
    HPOJobObjective_HPOJobObjectiveType_MAXIMIZE;
  static inline bool HPOJobObjectiveType_IsValid(int value) {
    return HPOJobObjective_HPOJobObjectiveType_IsValid(value);
  }
  static const HPOJobObjectiveType HPOJobObjectiveType_MIN =
    HPOJobObjective_HPOJobObjectiveType_HPOJobObjectiveType_MIN;
  static const HPOJobObjectiveType HPOJobObjectiveType_MAX =
    HPOJobObjective_HPOJobObjectiveType_HPOJobObjectiveType_MAX;
  static const int HPOJobObjectiveType_ARRAYSIZE =
    HPOJobObjective_HPOJobObjectiveType_HPOJobObjectiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HPOJobObjectiveType_descriptor() {
    return HPOJobObjective_HPOJobObjectiveType_descriptor();
  }
  static inline const ::std::string& HPOJobObjectiveType_Name(HPOJobObjectiveType value) {
    return HPOJobObjective_HPOJobObjectiveType_Name(value);
  }
  static inline bool HPOJobObjectiveType_Parse(const ::std::string& name,
      HPOJobObjectiveType* value) {
    return HPOJobObjective_HPOJobObjectiveType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string MetricName = 2;
  void clear_metricname();
  static const int kMetricNameFieldNumber = 2;
  const ::std::string& metricname() const;
  void set_metricname(const ::std::string& value);
  #if LANG_CXX11
  void set_metricname(::std::string&& value);
  #endif
  void set_metricname(const char* value);
  void set_metricname(const char* value, size_t size);
  ::std::string* mutable_metricname();
  ::std::string* release_metricname();
  void set_allocated_metricname(::std::string* metricname);

  // .flyteidl.plugins.sagemaker.HPOJobObjective.HPOJobObjectiveType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::flyteidl::plugins::sagemaker::HPOJobObjective_HPOJobObjectiveType type() const;
  void set_type(::flyteidl::plugins::sagemaker::HPOJobObjective_HPOJobObjectiveType value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.HPOJobObjective)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metricname_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// -------------------------------------------------------------------

class SagemakerHPOJob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.SagemakerHPOJob) */ {
 public:
  SagemakerHPOJob();
  virtual ~SagemakerHPOJob();

  SagemakerHPOJob(const SagemakerHPOJob& from);

  inline SagemakerHPOJob& operator=(const SagemakerHPOJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SagemakerHPOJob(SagemakerHPOJob&& from) noexcept
    : SagemakerHPOJob() {
    *this = ::std::move(from);
  }

  inline SagemakerHPOJob& operator=(SagemakerHPOJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SagemakerHPOJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SagemakerHPOJob* internal_default_instance() {
    return reinterpret_cast<const SagemakerHPOJob*>(
               &_SagemakerHPOJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SagemakerHPOJob* other);
  friend void swap(SagemakerHPOJob& a, SagemakerHPOJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SagemakerHPOJob* New() const final {
    return CreateMaybeMessage<SagemakerHPOJob>(nullptr);
  }

  SagemakerHPOJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SagemakerHPOJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SagemakerHPOJob& from);
  void MergeFrom(const SagemakerHPOJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SagemakerHPOJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Strategy = 1;
  void clear_strategy();
  static const int kStrategyFieldNumber = 1;
  const ::std::string& strategy() const;
  void set_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_strategy(::std::string&& value);
  #endif
  void set_strategy(const char* value);
  void set_strategy(const char* value, size_t size);
  ::std::string* mutable_strategy();
  ::std::string* release_strategy();
  void set_allocated_strategy(::std::string* strategy);

  // .flyteidl.plugins.sagemaker.HPOJobObjective Objective = 2;
  bool has_objective() const;
  void clear_objective();
  static const int kObjectiveFieldNumber = 2;
  const ::flyteidl::plugins::sagemaker::HPOJobObjective& objective() const;
  ::flyteidl::plugins::sagemaker::HPOJobObjective* release_objective();
  ::flyteidl::plugins::sagemaker::HPOJobObjective* mutable_objective();
  void set_allocated_objective(::flyteidl::plugins::sagemaker::HPOJobObjective* objective);

  // .flyteidl.plugins.sagemaker.ParameterRanges ParameterRanges = 5;
  bool has_parameterranges() const;
  void clear_parameterranges();
  static const int kParameterRangesFieldNumber = 5;
  const ::flyteidl::plugins::sagemaker::ParameterRanges& parameterranges() const;
  ::flyteidl::plugins::sagemaker::ParameterRanges* release_parameterranges();
  ::flyteidl::plugins::sagemaker::ParameterRanges* mutable_parameterranges();
  void set_allocated_parameterranges(::flyteidl::plugins::sagemaker::ParameterRanges* parameterranges);

  // .flyteidl.plugins.sagemaker.SagemakerTrainingJob TrainingJob = 6;
  bool has_trainingjob() const;
  void clear_trainingjob();
  static const int kTrainingJobFieldNumber = 6;
  const ::flyteidl::plugins::sagemaker::SagemakerTrainingJob& trainingjob() const;
  ::flyteidl::plugins::sagemaker::SagemakerTrainingJob* release_trainingjob();
  ::flyteidl::plugins::sagemaker::SagemakerTrainingJob* mutable_trainingjob();
  void set_allocated_trainingjob(::flyteidl::plugins::sagemaker::SagemakerTrainingJob* trainingjob);

  // int64 MaxNumberOfTrainingJobs = 3;
  void clear_maxnumberoftrainingjobs();
  static const int kMaxNumberOfTrainingJobsFieldNumber = 3;
  ::google::protobuf::int64 maxnumberoftrainingjobs() const;
  void set_maxnumberoftrainingjobs(::google::protobuf::int64 value);

  // int64 MaxParallelTrainingJobs = 4;
  void clear_maxparalleltrainingjobs();
  static const int kMaxParallelTrainingJobsFieldNumber = 4;
  ::google::protobuf::int64 maxparalleltrainingjobs() const;
  void set_maxparalleltrainingjobs(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.SagemakerHPOJob)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strategy_;
  ::flyteidl::plugins::sagemaker::HPOJobObjective* objective_;
  ::flyteidl::plugins::sagemaker::ParameterRanges* parameterranges_;
  ::flyteidl::plugins::sagemaker::SagemakerTrainingJob* trainingjob_;
  ::google::protobuf::int64 maxnumberoftrainingjobs_;
  ::google::protobuf::int64 maxparalleltrainingjobs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContinuousParameterRange

// string Name = 1;
inline void ContinuousParameterRange::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContinuousParameterRange::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ContinuousParameterRange.Name)
  return name_.GetNoArena();
}
inline void ContinuousParameterRange::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ContinuousParameterRange.Name)
}
#if LANG_CXX11
inline void ContinuousParameterRange::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.ContinuousParameterRange.Name)
}
#endif
inline void ContinuousParameterRange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.ContinuousParameterRange.Name)
}
inline void ContinuousParameterRange::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.ContinuousParameterRange.Name)
}
inline ::std::string* ContinuousParameterRange::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ContinuousParameterRange.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContinuousParameterRange::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.ContinuousParameterRange.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinuousParameterRange::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.ContinuousParameterRange.Name)
}

// double MaxValue = 2;
inline void ContinuousParameterRange::clear_maxvalue() {
  maxvalue_ = 0;
}
inline double ContinuousParameterRange::maxvalue() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ContinuousParameterRange.MaxValue)
  return maxvalue_;
}
inline void ContinuousParameterRange::set_maxvalue(double value) {
  
  maxvalue_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ContinuousParameterRange.MaxValue)
}

// double MinValue = 3;
inline void ContinuousParameterRange::clear_minvalue() {
  minvalue_ = 0;
}
inline double ContinuousParameterRange::minvalue() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ContinuousParameterRange.MinValue)
  return minvalue_;
}
inline void ContinuousParameterRange::set_minvalue(double value) {
  
  minvalue_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ContinuousParameterRange.MinValue)
}

// .flyteidl.plugins.sagemaker.HyperparameterScalingType ScalingType = 4;
inline void ContinuousParameterRange::clear_scalingtype() {
  scalingtype_ = 0;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterScalingType ContinuousParameterRange::scalingtype() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ContinuousParameterRange.ScalingType)
  return static_cast< ::flyteidl::plugins::sagemaker::HyperparameterScalingType >(scalingtype_);
}
inline void ContinuousParameterRange::set_scalingtype(::flyteidl::plugins::sagemaker::HyperparameterScalingType value) {
  
  scalingtype_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ContinuousParameterRange.ScalingType)
}

// -------------------------------------------------------------------

// IntegerParameterRange

// string Name = 1;
inline void IntegerParameterRange::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IntegerParameterRange::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.IntegerParameterRange.Name)
  return name_.GetNoArena();
}
inline void IntegerParameterRange::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.IntegerParameterRange.Name)
}
#if LANG_CXX11
inline void IntegerParameterRange::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.IntegerParameterRange.Name)
}
#endif
inline void IntegerParameterRange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.IntegerParameterRange.Name)
}
inline void IntegerParameterRange::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.IntegerParameterRange.Name)
}
inline ::std::string* IntegerParameterRange::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.IntegerParameterRange.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IntegerParameterRange::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.IntegerParameterRange.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IntegerParameterRange::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.IntegerParameterRange.Name)
}

// float MaxValue = 2;
inline void IntegerParameterRange::clear_maxvalue() {
  maxvalue_ = 0;
}
inline float IntegerParameterRange::maxvalue() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.IntegerParameterRange.MaxValue)
  return maxvalue_;
}
inline void IntegerParameterRange::set_maxvalue(float value) {
  
  maxvalue_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.IntegerParameterRange.MaxValue)
}

// float MinValue = 3;
inline void IntegerParameterRange::clear_minvalue() {
  minvalue_ = 0;
}
inline float IntegerParameterRange::minvalue() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.IntegerParameterRange.MinValue)
  return minvalue_;
}
inline void IntegerParameterRange::set_minvalue(float value) {
  
  minvalue_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.IntegerParameterRange.MinValue)
}

// .flyteidl.plugins.sagemaker.HyperparameterScalingType ScalingType = 4;
inline void IntegerParameterRange::clear_scalingtype() {
  scalingtype_ = 0;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterScalingType IntegerParameterRange::scalingtype() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.IntegerParameterRange.ScalingType)
  return static_cast< ::flyteidl::plugins::sagemaker::HyperparameterScalingType >(scalingtype_);
}
inline void IntegerParameterRange::set_scalingtype(::flyteidl::plugins::sagemaker::HyperparameterScalingType value) {
  
  scalingtype_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.IntegerParameterRange.ScalingType)
}

// -------------------------------------------------------------------

// CategoricalParameterRange

// string Name = 1;
inline void CategoricalParameterRange::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoricalParameterRange::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.CategoricalParameterRange.Name)
  return name_.GetNoArena();
}
inline void CategoricalParameterRange::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.CategoricalParameterRange.Name)
}
#if LANG_CXX11
inline void CategoricalParameterRange::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.CategoricalParameterRange.Name)
}
#endif
inline void CategoricalParameterRange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.CategoricalParameterRange.Name)
}
inline void CategoricalParameterRange::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.CategoricalParameterRange.Name)
}
inline ::std::string* CategoricalParameterRange::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.CategoricalParameterRange.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoricalParameterRange::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.CategoricalParameterRange.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoricalParameterRange::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.CategoricalParameterRange.Name)
}

// repeated string Values = 2;
inline int CategoricalParameterRange::values_size() const {
  return values_.size();
}
inline void CategoricalParameterRange::clear_values() {
  values_.Clear();
}
inline const ::std::string& CategoricalParameterRange::values(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
  return values_.Get(index);
}
inline ::std::string* CategoricalParameterRange::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
  return values_.Mutable(index);
}
inline void CategoricalParameterRange::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CategoricalParameterRange::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CategoricalParameterRange::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
}
inline void CategoricalParameterRange::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
}
inline ::std::string* CategoricalParameterRange::add_values() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
  return values_.Add();
}
inline void CategoricalParameterRange::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
}
#if LANG_CXX11
inline void CategoricalParameterRange::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
}
#endif
inline void CategoricalParameterRange::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
}
inline void CategoricalParameterRange::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CategoricalParameterRange::values() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CategoricalParameterRange::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.CategoricalParameterRange.Values)
  return &values_;
}

// -------------------------------------------------------------------

// ParameterRanges

// repeated .flyteidl.plugins.sagemaker.ContinuousParameterRange ContinuousParameterRanges = 1;
inline int ParameterRanges::continuousparameterranges_size() const {
  return continuousparameterranges_.size();
}
inline void ParameterRanges::clear_continuousparameterranges() {
  continuousparameterranges_.Clear();
}
inline ::flyteidl::plugins::sagemaker::ContinuousParameterRange* ParameterRanges::mutable_continuousparameterranges(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ParameterRanges.ContinuousParameterRanges)
  return continuousparameterranges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::ContinuousParameterRange >*
ParameterRanges::mutable_continuousparameterranges() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.ParameterRanges.ContinuousParameterRanges)
  return &continuousparameterranges_;
}
inline const ::flyteidl::plugins::sagemaker::ContinuousParameterRange& ParameterRanges::continuousparameterranges(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ParameterRanges.ContinuousParameterRanges)
  return continuousparameterranges_.Get(index);
}
inline ::flyteidl::plugins::sagemaker::ContinuousParameterRange* ParameterRanges::add_continuousparameterranges() {
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.ParameterRanges.ContinuousParameterRanges)
  return continuousparameterranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::ContinuousParameterRange >&
ParameterRanges::continuousparameterranges() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.ParameterRanges.ContinuousParameterRanges)
  return continuousparameterranges_;
}

// repeated .flyteidl.plugins.sagemaker.IntegerParameterRange IntegerParameterRanges = 2;
inline int ParameterRanges::integerparameterranges_size() const {
  return integerparameterranges_.size();
}
inline void ParameterRanges::clear_integerparameterranges() {
  integerparameterranges_.Clear();
}
inline ::flyteidl::plugins::sagemaker::IntegerParameterRange* ParameterRanges::mutable_integerparameterranges(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ParameterRanges.IntegerParameterRanges)
  return integerparameterranges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::IntegerParameterRange >*
ParameterRanges::mutable_integerparameterranges() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.ParameterRanges.IntegerParameterRanges)
  return &integerparameterranges_;
}
inline const ::flyteidl::plugins::sagemaker::IntegerParameterRange& ParameterRanges::integerparameterranges(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ParameterRanges.IntegerParameterRanges)
  return integerparameterranges_.Get(index);
}
inline ::flyteidl::plugins::sagemaker::IntegerParameterRange* ParameterRanges::add_integerparameterranges() {
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.ParameterRanges.IntegerParameterRanges)
  return integerparameterranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::IntegerParameterRange >&
ParameterRanges::integerparameterranges() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.ParameterRanges.IntegerParameterRanges)
  return integerparameterranges_;
}

// repeated .flyteidl.plugins.sagemaker.CategoricalParameterRange CategoricalParameterRanges = 3;
inline int ParameterRanges::categoricalparameterranges_size() const {
  return categoricalparameterranges_.size();
}
inline void ParameterRanges::clear_categoricalparameterranges() {
  categoricalparameterranges_.Clear();
}
inline ::flyteidl::plugins::sagemaker::CategoricalParameterRange* ParameterRanges::mutable_categoricalparameterranges(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ParameterRanges.CategoricalParameterRanges)
  return categoricalparameterranges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::CategoricalParameterRange >*
ParameterRanges::mutable_categoricalparameterranges() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.ParameterRanges.CategoricalParameterRanges)
  return &categoricalparameterranges_;
}
inline const ::flyteidl::plugins::sagemaker::CategoricalParameterRange& ParameterRanges::categoricalparameterranges(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ParameterRanges.CategoricalParameterRanges)
  return categoricalparameterranges_.Get(index);
}
inline ::flyteidl::plugins::sagemaker::CategoricalParameterRange* ParameterRanges::add_categoricalparameterranges() {
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.ParameterRanges.CategoricalParameterRanges)
  return categoricalparameterranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::CategoricalParameterRange >&
ParameterRanges::categoricalparameterranges() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.ParameterRanges.CategoricalParameterRanges)
  return categoricalparameterranges_;
}

// -------------------------------------------------------------------

// AlgorithmSpecification_MetricDefinition

// string Name = 1;
inline void AlgorithmSpecification_MetricDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification_MetricDefinition::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Name)
  return name_.GetNoArena();
}
inline void AlgorithmSpecification_MetricDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Name)
}
#if LANG_CXX11
inline void AlgorithmSpecification_MetricDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Name)
}
#endif
inline void AlgorithmSpecification_MetricDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Name)
}
inline void AlgorithmSpecification_MetricDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Name)
}
inline ::std::string* AlgorithmSpecification_MetricDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification_MetricDefinition::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification_MetricDefinition::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Name)
}

// string Regex = 2;
inline void AlgorithmSpecification_MetricDefinition::clear_regex() {
  regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification_MetricDefinition::regex() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Regex)
  return regex_.GetNoArena();
}
inline void AlgorithmSpecification_MetricDefinition::set_regex(const ::std::string& value) {
  
  regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Regex)
}
#if LANG_CXX11
inline void AlgorithmSpecification_MetricDefinition::set_regex(::std::string&& value) {
  
  regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Regex)
}
#endif
inline void AlgorithmSpecification_MetricDefinition::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Regex)
}
inline void AlgorithmSpecification_MetricDefinition::set_regex(const char* value, size_t size) {
  
  regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Regex)
}
inline ::std::string* AlgorithmSpecification_MetricDefinition::mutable_regex() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Regex)
  return regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification_MetricDefinition::release_regex() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Regex)
  
  return regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification_MetricDefinition::set_allocated_regex(::std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.Regex)
}

// -------------------------------------------------------------------

// AlgorithmSpecification

// string TrainingImage = 1;
inline void AlgorithmSpecification::clear_trainingimage() {
  trainingimage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification::trainingimage() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingImage)
  return trainingimage_.GetNoArena();
}
inline void AlgorithmSpecification::set_trainingimage(const ::std::string& value) {
  
  trainingimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingImage)
}
#if LANG_CXX11
inline void AlgorithmSpecification::set_trainingimage(::std::string&& value) {
  
  trainingimage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingImage)
}
#endif
inline void AlgorithmSpecification::set_trainingimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trainingimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingImage)
}
inline void AlgorithmSpecification::set_trainingimage(const char* value, size_t size) {
  
  trainingimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingImage)
}
inline ::std::string* AlgorithmSpecification::mutable_trainingimage() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingImage)
  return trainingimage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification::release_trainingimage() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingImage)
  
  return trainingimage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification::set_allocated_trainingimage(::std::string* trainingimage) {
  if (trainingimage != nullptr) {
    
  } else {
    
  }
  trainingimage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trainingimage);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingImage)
}

// string TrainingInputMode = 2;
inline void AlgorithmSpecification::clear_traininginputmode() {
  traininginputmode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification::traininginputmode() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingInputMode)
  return traininginputmode_.GetNoArena();
}
inline void AlgorithmSpecification::set_traininginputmode(const ::std::string& value) {
  
  traininginputmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingInputMode)
}
#if LANG_CXX11
inline void AlgorithmSpecification::set_traininginputmode(::std::string&& value) {
  
  traininginputmode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingInputMode)
}
#endif
inline void AlgorithmSpecification::set_traininginputmode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  traininginputmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingInputMode)
}
inline void AlgorithmSpecification::set_traininginputmode(const char* value, size_t size) {
  
  traininginputmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingInputMode)
}
inline ::std::string* AlgorithmSpecification::mutable_traininginputmode() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingInputMode)
  return traininginputmode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification::release_traininginputmode() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingInputMode)
  
  return traininginputmode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification::set_allocated_traininginputmode(::std::string* traininginputmode) {
  if (traininginputmode != nullptr) {
    
  } else {
    
  }
  traininginputmode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traininginputmode);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.TrainingInputMode)
}

// string AlgorithmName = 3;
inline void AlgorithmSpecification::clear_algorithmname() {
  algorithmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification::algorithmname() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.AlgorithmName)
  return algorithmname_.GetNoArena();
}
inline void AlgorithmSpecification::set_algorithmname(const ::std::string& value) {
  
  algorithmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.AlgorithmName)
}
#if LANG_CXX11
inline void AlgorithmSpecification::set_algorithmname(::std::string&& value) {
  
  algorithmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.AlgorithmName)
}
#endif
inline void AlgorithmSpecification::set_algorithmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.AlgorithmName)
}
inline void AlgorithmSpecification::set_algorithmname(const char* value, size_t size) {
  
  algorithmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.AlgorithmName)
}
inline ::std::string* AlgorithmSpecification::mutable_algorithmname() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.AlgorithmName)
  return algorithmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification::release_algorithmname() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.AlgorithmName)
  
  return algorithmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification::set_allocated_algorithmname(::std::string* algorithmname) {
  if (algorithmname != nullptr) {
    
  } else {
    
  }
  algorithmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithmname);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.AlgorithmName)
}

// repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition MetricDefinitions = 4;
inline int AlgorithmSpecification::metricdefinitions_size() const {
  return metricdefinitions_.size();
}
inline void AlgorithmSpecification::clear_metricdefinitions() {
  metricdefinitions_.Clear();
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* AlgorithmSpecification::mutable_metricdefinitions(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinitions)
  return metricdefinitions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >*
AlgorithmSpecification::mutable_metricdefinitions() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinitions)
  return &metricdefinitions_;
}
inline const ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition& AlgorithmSpecification::metricdefinitions(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinitions)
  return metricdefinitions_.Get(index);
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* AlgorithmSpecification::add_metricdefinitions() {
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinitions)
  return metricdefinitions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >&
AlgorithmSpecification::metricdefinitions() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinitions)
  return metricdefinitions_;
}

// -------------------------------------------------------------------

// ResourceConfig

// string InstanceType = 1;
inline void ResourceConfig::clear_instancetype() {
  instancetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceConfig::instancetype() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ResourceConfig.InstanceType)
  return instancetype_.GetNoArena();
}
inline void ResourceConfig::set_instancetype(const ::std::string& value) {
  
  instancetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ResourceConfig.InstanceType)
}
#if LANG_CXX11
inline void ResourceConfig::set_instancetype(::std::string&& value) {
  
  instancetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.ResourceConfig.InstanceType)
}
#endif
inline void ResourceConfig::set_instancetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instancetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.ResourceConfig.InstanceType)
}
inline void ResourceConfig::set_instancetype(const char* value, size_t size) {
  
  instancetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.ResourceConfig.InstanceType)
}
inline ::std::string* ResourceConfig::mutable_instancetype() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ResourceConfig.InstanceType)
  return instancetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceConfig::release_instancetype() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.ResourceConfig.InstanceType)
  
  return instancetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceConfig::set_allocated_instancetype(::std::string* instancetype) {
  if (instancetype != nullptr) {
    
  } else {
    
  }
  instancetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instancetype);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.ResourceConfig.InstanceType)
}

// int64 InstanceCount = 2;
inline void ResourceConfig::clear_instancecount() {
  instancecount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ResourceConfig::instancecount() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ResourceConfig.InstanceCount)
  return instancecount_;
}
inline void ResourceConfig::set_instancecount(::google::protobuf::int64 value) {
  
  instancecount_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ResourceConfig.InstanceCount)
}

// int64 VolumeSizeInGB = 3;
inline void ResourceConfig::clear_volumesizeingb() {
  volumesizeingb_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ResourceConfig::volumesizeingb() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ResourceConfig.VolumeSizeInGB)
  return volumesizeingb_;
}
inline void ResourceConfig::set_volumesizeingb(::google::protobuf::int64 value) {
  
  volumesizeingb_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ResourceConfig.VolumeSizeInGB)
}

// string VolumeKmsKeyId = 4;
inline void ResourceConfig::clear_volumekmskeyid() {
  volumekmskeyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceConfig::volumekmskeyid() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ResourceConfig.VolumeKmsKeyId)
  return volumekmskeyid_.GetNoArena();
}
inline void ResourceConfig::set_volumekmskeyid(const ::std::string& value) {
  
  volumekmskeyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ResourceConfig.VolumeKmsKeyId)
}
#if LANG_CXX11
inline void ResourceConfig::set_volumekmskeyid(::std::string&& value) {
  
  volumekmskeyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.ResourceConfig.VolumeKmsKeyId)
}
#endif
inline void ResourceConfig::set_volumekmskeyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volumekmskeyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.ResourceConfig.VolumeKmsKeyId)
}
inline void ResourceConfig::set_volumekmskeyid(const char* value, size_t size) {
  
  volumekmskeyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.ResourceConfig.VolumeKmsKeyId)
}
inline ::std::string* ResourceConfig::mutable_volumekmskeyid() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ResourceConfig.VolumeKmsKeyId)
  return volumekmskeyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceConfig::release_volumekmskeyid() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.ResourceConfig.VolumeKmsKeyId)
  
  return volumekmskeyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceConfig::set_allocated_volumekmskeyid(::std::string* volumekmskeyid) {
  if (volumekmskeyid != nullptr) {
    
  } else {
    
  }
  volumekmskeyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volumekmskeyid);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.ResourceConfig.VolumeKmsKeyId)
}

// -------------------------------------------------------------------

// StoppingCondition

// int64 MaxRuntimeInSeconds = 1;
inline void StoppingCondition::clear_maxruntimeinseconds() {
  maxruntimeinseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StoppingCondition::maxruntimeinseconds() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.StoppingCondition.MaxRuntimeInSeconds)
  return maxruntimeinseconds_;
}
inline void StoppingCondition::set_maxruntimeinseconds(::google::protobuf::int64 value) {
  
  maxruntimeinseconds_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.StoppingCondition.MaxRuntimeInSeconds)
}

// int64 MaxWaitTimeInSeconds = 2;
inline void StoppingCondition::clear_maxwaittimeinseconds() {
  maxwaittimeinseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StoppingCondition::maxwaittimeinseconds() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.StoppingCondition.MaxWaitTimeInSeconds)
  return maxwaittimeinseconds_;
}
inline void StoppingCondition::set_maxwaittimeinseconds(::google::protobuf::int64 value) {
  
  maxwaittimeinseconds_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.StoppingCondition.MaxWaitTimeInSeconds)
}

// -------------------------------------------------------------------

// VpcConfig

// repeated string SecurityGroupIds = 1;
inline int VpcConfig::securitygroupids_size() const {
  return securitygroupids_.size();
}
inline void VpcConfig::clear_securitygroupids() {
  securitygroupids_.Clear();
}
inline const ::std::string& VpcConfig::securitygroupids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
  return securitygroupids_.Get(index);
}
inline ::std::string* VpcConfig::mutable_securitygroupids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
  return securitygroupids_.Mutable(index);
}
inline void VpcConfig::set_securitygroupids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
  securitygroupids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VpcConfig::set_securitygroupids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
  securitygroupids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VpcConfig::set_securitygroupids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  securitygroupids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
}
inline void VpcConfig::set_securitygroupids(int index, const char* value, size_t size) {
  securitygroupids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
}
inline ::std::string* VpcConfig::add_securitygroupids() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
  return securitygroupids_.Add();
}
inline void VpcConfig::add_securitygroupids(const ::std::string& value) {
  securitygroupids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
}
#if LANG_CXX11
inline void VpcConfig::add_securitygroupids(::std::string&& value) {
  securitygroupids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
}
#endif
inline void VpcConfig::add_securitygroupids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  securitygroupids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
}
inline void VpcConfig::add_securitygroupids(const char* value, size_t size) {
  securitygroupids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
VpcConfig::securitygroupids() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
  return securitygroupids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
VpcConfig::mutable_securitygroupids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.VpcConfig.SecurityGroupIds)
  return &securitygroupids_;
}

// repeated string Subnets = 2;
inline int VpcConfig::subnets_size() const {
  return subnets_.size();
}
inline void VpcConfig::clear_subnets() {
  subnets_.Clear();
}
inline const ::std::string& VpcConfig::subnets(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
  return subnets_.Get(index);
}
inline ::std::string* VpcConfig::mutable_subnets(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
  return subnets_.Mutable(index);
}
inline void VpcConfig::set_subnets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
  subnets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VpcConfig::set_subnets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
  subnets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VpcConfig::set_subnets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subnets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
}
inline void VpcConfig::set_subnets(int index, const char* value, size_t size) {
  subnets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
}
inline ::std::string* VpcConfig::add_subnets() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
  return subnets_.Add();
}
inline void VpcConfig::add_subnets(const ::std::string& value) {
  subnets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
}
#if LANG_CXX11
inline void VpcConfig::add_subnets(::std::string&& value) {
  subnets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
}
#endif
inline void VpcConfig::add_subnets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subnets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
}
inline void VpcConfig::add_subnets(const char* value, size_t size) {
  subnets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
VpcConfig::subnets() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
  return subnets_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
VpcConfig::mutable_subnets() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.VpcConfig.Subnets)
  return &subnets_;
}

// -------------------------------------------------------------------

// SagemakerTrainingJob

// string Region = 1;
inline void SagemakerTrainingJob::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SagemakerTrainingJob::region() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerTrainingJob.Region)
  return region_.GetNoArena();
}
inline void SagemakerTrainingJob::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.SagemakerTrainingJob.Region)
}
#if LANG_CXX11
inline void SagemakerTrainingJob::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.SagemakerTrainingJob.Region)
}
#endif
inline void SagemakerTrainingJob::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.SagemakerTrainingJob.Region)
}
inline void SagemakerTrainingJob::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.SagemakerTrainingJob.Region)
}
inline ::std::string* SagemakerTrainingJob::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerTrainingJob.Region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SagemakerTrainingJob::release_region() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerTrainingJob.Region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SagemakerTrainingJob::set_allocated_region(::std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerTrainingJob.Region)
}

// string RoleArn = 2;
inline void SagemakerTrainingJob::clear_rolearn() {
  rolearn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SagemakerTrainingJob::rolearn() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerTrainingJob.RoleArn)
  return rolearn_.GetNoArena();
}
inline void SagemakerTrainingJob::set_rolearn(const ::std::string& value) {
  
  rolearn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.SagemakerTrainingJob.RoleArn)
}
#if LANG_CXX11
inline void SagemakerTrainingJob::set_rolearn(::std::string&& value) {
  
  rolearn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.SagemakerTrainingJob.RoleArn)
}
#endif
inline void SagemakerTrainingJob::set_rolearn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rolearn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.SagemakerTrainingJob.RoleArn)
}
inline void SagemakerTrainingJob::set_rolearn(const char* value, size_t size) {
  
  rolearn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.SagemakerTrainingJob.RoleArn)
}
inline ::std::string* SagemakerTrainingJob::mutable_rolearn() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerTrainingJob.RoleArn)
  return rolearn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SagemakerTrainingJob::release_rolearn() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerTrainingJob.RoleArn)
  
  return rolearn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SagemakerTrainingJob::set_allocated_rolearn(::std::string* rolearn) {
  if (rolearn != nullptr) {
    
  } else {
    
  }
  rolearn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolearn);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerTrainingJob.RoleArn)
}

// .flyteidl.plugins.sagemaker.AlgorithmSpecification AlgorithmSpecification = 3;
inline bool SagemakerTrainingJob::has_algorithmspecification() const {
  return this != internal_default_instance() && algorithmspecification_ != nullptr;
}
inline void SagemakerTrainingJob::clear_algorithmspecification() {
  if (GetArenaNoVirtual() == nullptr && algorithmspecification_ != nullptr) {
    delete algorithmspecification_;
  }
  algorithmspecification_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& SagemakerTrainingJob::algorithmspecification() const {
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification* p = algorithmspecification_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerTrainingJob.AlgorithmSpecification)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::AlgorithmSpecification*>(
      &::flyteidl::plugins::sagemaker::_AlgorithmSpecification_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification* SagemakerTrainingJob::release_algorithmspecification() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerTrainingJob.AlgorithmSpecification)
  
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* temp = algorithmspecification_;
  algorithmspecification_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification* SagemakerTrainingJob::mutable_algorithmspecification() {
  
  if (algorithmspecification_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmSpecification>(GetArenaNoVirtual());
    algorithmspecification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerTrainingJob.AlgorithmSpecification)
  return algorithmspecification_;
}
inline void SagemakerTrainingJob::set_allocated_algorithmspecification(::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithmspecification) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete algorithmspecification_;
  }
  if (algorithmspecification) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      algorithmspecification = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, algorithmspecification, submessage_arena);
    }
    
  } else {
    
  }
  algorithmspecification_ = algorithmspecification;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerTrainingJob.AlgorithmSpecification)
}

// .flyteidl.plugins.sagemaker.ResourceConfig ResourceConfig = 4;
inline bool SagemakerTrainingJob::has_resourceconfig() const {
  return this != internal_default_instance() && resourceconfig_ != nullptr;
}
inline void SagemakerTrainingJob::clear_resourceconfig() {
  if (GetArenaNoVirtual() == nullptr && resourceconfig_ != nullptr) {
    delete resourceconfig_;
  }
  resourceconfig_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::ResourceConfig& SagemakerTrainingJob::resourceconfig() const {
  const ::flyteidl::plugins::sagemaker::ResourceConfig* p = resourceconfig_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerTrainingJob.ResourceConfig)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::ResourceConfig*>(
      &::flyteidl::plugins::sagemaker::_ResourceConfig_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::ResourceConfig* SagemakerTrainingJob::release_resourceconfig() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerTrainingJob.ResourceConfig)
  
  ::flyteidl::plugins::sagemaker::ResourceConfig* temp = resourceconfig_;
  resourceconfig_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::ResourceConfig* SagemakerTrainingJob::mutable_resourceconfig() {
  
  if (resourceconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::ResourceConfig>(GetArenaNoVirtual());
    resourceconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerTrainingJob.ResourceConfig)
  return resourceconfig_;
}
inline void SagemakerTrainingJob::set_allocated_resourceconfig(::flyteidl::plugins::sagemaker::ResourceConfig* resourceconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resourceconfig_;
  }
  if (resourceconfig) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resourceconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resourceconfig, submessage_arena);
    }
    
  } else {
    
  }
  resourceconfig_ = resourceconfig;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerTrainingJob.ResourceConfig)
}

// .flyteidl.plugins.sagemaker.StoppingCondition StoppingCondition = 5;
inline bool SagemakerTrainingJob::has_stoppingcondition() const {
  return this != internal_default_instance() && stoppingcondition_ != nullptr;
}
inline void SagemakerTrainingJob::clear_stoppingcondition() {
  if (GetArenaNoVirtual() == nullptr && stoppingcondition_ != nullptr) {
    delete stoppingcondition_;
  }
  stoppingcondition_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::StoppingCondition& SagemakerTrainingJob::stoppingcondition() const {
  const ::flyteidl::plugins::sagemaker::StoppingCondition* p = stoppingcondition_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerTrainingJob.StoppingCondition)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::StoppingCondition*>(
      &::flyteidl::plugins::sagemaker::_StoppingCondition_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::StoppingCondition* SagemakerTrainingJob::release_stoppingcondition() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerTrainingJob.StoppingCondition)
  
  ::flyteidl::plugins::sagemaker::StoppingCondition* temp = stoppingcondition_;
  stoppingcondition_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::StoppingCondition* SagemakerTrainingJob::mutable_stoppingcondition() {
  
  if (stoppingcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::StoppingCondition>(GetArenaNoVirtual());
    stoppingcondition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerTrainingJob.StoppingCondition)
  return stoppingcondition_;
}
inline void SagemakerTrainingJob::set_allocated_stoppingcondition(::flyteidl::plugins::sagemaker::StoppingCondition* stoppingcondition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stoppingcondition_;
  }
  if (stoppingcondition) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stoppingcondition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stoppingcondition, submessage_arena);
    }
    
  } else {
    
  }
  stoppingcondition_ = stoppingcondition;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerTrainingJob.StoppingCondition)
}

// .flyteidl.plugins.sagemaker.VpcConfig VpcConfig = 6;
inline bool SagemakerTrainingJob::has_vpcconfig() const {
  return this != internal_default_instance() && vpcconfig_ != nullptr;
}
inline void SagemakerTrainingJob::clear_vpcconfig() {
  if (GetArenaNoVirtual() == nullptr && vpcconfig_ != nullptr) {
    delete vpcconfig_;
  }
  vpcconfig_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::VpcConfig& SagemakerTrainingJob::vpcconfig() const {
  const ::flyteidl::plugins::sagemaker::VpcConfig* p = vpcconfig_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerTrainingJob.VpcConfig)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::VpcConfig*>(
      &::flyteidl::plugins::sagemaker::_VpcConfig_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::VpcConfig* SagemakerTrainingJob::release_vpcconfig() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerTrainingJob.VpcConfig)
  
  ::flyteidl::plugins::sagemaker::VpcConfig* temp = vpcconfig_;
  vpcconfig_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::VpcConfig* SagemakerTrainingJob::mutable_vpcconfig() {
  
  if (vpcconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::VpcConfig>(GetArenaNoVirtual());
    vpcconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerTrainingJob.VpcConfig)
  return vpcconfig_;
}
inline void SagemakerTrainingJob::set_allocated_vpcconfig(::flyteidl::plugins::sagemaker::VpcConfig* vpcconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vpcconfig_;
  }
  if (vpcconfig) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vpcconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpcconfig, submessage_arena);
    }
    
  } else {
    
  }
  vpcconfig_ = vpcconfig;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerTrainingJob.VpcConfig)
}

// bool EnableSpotTraining = 7;
inline void SagemakerTrainingJob::clear_enablespottraining() {
  enablespottraining_ = false;
}
inline bool SagemakerTrainingJob::enablespottraining() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerTrainingJob.EnableSpotTraining)
  return enablespottraining_;
}
inline void SagemakerTrainingJob::set_enablespottraining(bool value) {
  
  enablespottraining_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.SagemakerTrainingJob.EnableSpotTraining)
}

// -------------------------------------------------------------------

// HPOJobObjective

// .flyteidl.plugins.sagemaker.HPOJobObjective.HPOJobObjectiveType Type = 1;
inline void HPOJobObjective::clear_type() {
  type_ = 0;
}
inline ::flyteidl::plugins::sagemaker::HPOJobObjective_HPOJobObjectiveType HPOJobObjective::type() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HPOJobObjective.Type)
  return static_cast< ::flyteidl::plugins::sagemaker::HPOJobObjective_HPOJobObjectiveType >(type_);
}
inline void HPOJobObjective::set_type(::flyteidl::plugins::sagemaker::HPOJobObjective_HPOJobObjectiveType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.HPOJobObjective.Type)
}

// string MetricName = 2;
inline void HPOJobObjective::clear_metricname() {
  metricname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HPOJobObjective::metricname() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HPOJobObjective.MetricName)
  return metricname_.GetNoArena();
}
inline void HPOJobObjective::set_metricname(const ::std::string& value) {
  
  metricname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.HPOJobObjective.MetricName)
}
#if LANG_CXX11
inline void HPOJobObjective::set_metricname(::std::string&& value) {
  
  metricname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.HPOJobObjective.MetricName)
}
#endif
inline void HPOJobObjective::set_metricname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metricname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.HPOJobObjective.MetricName)
}
inline void HPOJobObjective::set_metricname(const char* value, size_t size) {
  
  metricname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.HPOJobObjective.MetricName)
}
inline ::std::string* HPOJobObjective::mutable_metricname() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.HPOJobObjective.MetricName)
  return metricname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HPOJobObjective::release_metricname() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.HPOJobObjective.MetricName)
  
  return metricname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HPOJobObjective::set_allocated_metricname(::std::string* metricname) {
  if (metricname != nullptr) {
    
  } else {
    
  }
  metricname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metricname);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.HPOJobObjective.MetricName)
}

// -------------------------------------------------------------------

// SagemakerHPOJob

// string Strategy = 1;
inline void SagemakerHPOJob::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SagemakerHPOJob::strategy() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerHPOJob.Strategy)
  return strategy_.GetNoArena();
}
inline void SagemakerHPOJob::set_strategy(const ::std::string& value) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.SagemakerHPOJob.Strategy)
}
#if LANG_CXX11
inline void SagemakerHPOJob::set_strategy(::std::string&& value) {
  
  strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.SagemakerHPOJob.Strategy)
}
#endif
inline void SagemakerHPOJob::set_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.SagemakerHPOJob.Strategy)
}
inline void SagemakerHPOJob::set_strategy(const char* value, size_t size) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.SagemakerHPOJob.Strategy)
}
inline ::std::string* SagemakerHPOJob::mutable_strategy() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerHPOJob.Strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SagemakerHPOJob::release_strategy() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerHPOJob.Strategy)
  
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SagemakerHPOJob::set_allocated_strategy(::std::string* strategy) {
  if (strategy != nullptr) {
    
  } else {
    
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerHPOJob.Strategy)
}

// .flyteidl.plugins.sagemaker.HPOJobObjective Objective = 2;
inline bool SagemakerHPOJob::has_objective() const {
  return this != internal_default_instance() && objective_ != nullptr;
}
inline void SagemakerHPOJob::clear_objective() {
  if (GetArenaNoVirtual() == nullptr && objective_ != nullptr) {
    delete objective_;
  }
  objective_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::HPOJobObjective& SagemakerHPOJob::objective() const {
  const ::flyteidl::plugins::sagemaker::HPOJobObjective* p = objective_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerHPOJob.Objective)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::HPOJobObjective*>(
      &::flyteidl::plugins::sagemaker::_HPOJobObjective_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::HPOJobObjective* SagemakerHPOJob::release_objective() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerHPOJob.Objective)
  
  ::flyteidl::plugins::sagemaker::HPOJobObjective* temp = objective_;
  objective_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::HPOJobObjective* SagemakerHPOJob::mutable_objective() {
  
  if (objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::HPOJobObjective>(GetArenaNoVirtual());
    objective_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerHPOJob.Objective)
  return objective_;
}
inline void SagemakerHPOJob::set_allocated_objective(::flyteidl::plugins::sagemaker::HPOJobObjective* objective) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete objective_;
  }
  if (objective) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      objective = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, objective, submessage_arena);
    }
    
  } else {
    
  }
  objective_ = objective;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerHPOJob.Objective)
}

// int64 MaxNumberOfTrainingJobs = 3;
inline void SagemakerHPOJob::clear_maxnumberoftrainingjobs() {
  maxnumberoftrainingjobs_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SagemakerHPOJob::maxnumberoftrainingjobs() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerHPOJob.MaxNumberOfTrainingJobs)
  return maxnumberoftrainingjobs_;
}
inline void SagemakerHPOJob::set_maxnumberoftrainingjobs(::google::protobuf::int64 value) {
  
  maxnumberoftrainingjobs_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.SagemakerHPOJob.MaxNumberOfTrainingJobs)
}

// int64 MaxParallelTrainingJobs = 4;
inline void SagemakerHPOJob::clear_maxparalleltrainingjobs() {
  maxparalleltrainingjobs_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SagemakerHPOJob::maxparalleltrainingjobs() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerHPOJob.MaxParallelTrainingJobs)
  return maxparalleltrainingjobs_;
}
inline void SagemakerHPOJob::set_maxparalleltrainingjobs(::google::protobuf::int64 value) {
  
  maxparalleltrainingjobs_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.SagemakerHPOJob.MaxParallelTrainingJobs)
}

// .flyteidl.plugins.sagemaker.ParameterRanges ParameterRanges = 5;
inline bool SagemakerHPOJob::has_parameterranges() const {
  return this != internal_default_instance() && parameterranges_ != nullptr;
}
inline void SagemakerHPOJob::clear_parameterranges() {
  if (GetArenaNoVirtual() == nullptr && parameterranges_ != nullptr) {
    delete parameterranges_;
  }
  parameterranges_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::ParameterRanges& SagemakerHPOJob::parameterranges() const {
  const ::flyteidl::plugins::sagemaker::ParameterRanges* p = parameterranges_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerHPOJob.ParameterRanges)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::ParameterRanges*>(
      &::flyteidl::plugins::sagemaker::_ParameterRanges_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::ParameterRanges* SagemakerHPOJob::release_parameterranges() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerHPOJob.ParameterRanges)
  
  ::flyteidl::plugins::sagemaker::ParameterRanges* temp = parameterranges_;
  parameterranges_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::ParameterRanges* SagemakerHPOJob::mutable_parameterranges() {
  
  if (parameterranges_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::ParameterRanges>(GetArenaNoVirtual());
    parameterranges_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerHPOJob.ParameterRanges)
  return parameterranges_;
}
inline void SagemakerHPOJob::set_allocated_parameterranges(::flyteidl::plugins::sagemaker::ParameterRanges* parameterranges) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parameterranges_;
  }
  if (parameterranges) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parameterranges = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameterranges, submessage_arena);
    }
    
  } else {
    
  }
  parameterranges_ = parameterranges;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerHPOJob.ParameterRanges)
}

// .flyteidl.plugins.sagemaker.SagemakerTrainingJob TrainingJob = 6;
inline bool SagemakerHPOJob::has_trainingjob() const {
  return this != internal_default_instance() && trainingjob_ != nullptr;
}
inline void SagemakerHPOJob::clear_trainingjob() {
  if (GetArenaNoVirtual() == nullptr && trainingjob_ != nullptr) {
    delete trainingjob_;
  }
  trainingjob_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::SagemakerTrainingJob& SagemakerHPOJob::trainingjob() const {
  const ::flyteidl::plugins::sagemaker::SagemakerTrainingJob* p = trainingjob_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.SagemakerHPOJob.TrainingJob)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::SagemakerTrainingJob*>(
      &::flyteidl::plugins::sagemaker::_SagemakerTrainingJob_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::SagemakerTrainingJob* SagemakerHPOJob::release_trainingjob() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.SagemakerHPOJob.TrainingJob)
  
  ::flyteidl::plugins::sagemaker::SagemakerTrainingJob* temp = trainingjob_;
  trainingjob_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::SagemakerTrainingJob* SagemakerHPOJob::mutable_trainingjob() {
  
  if (trainingjob_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::SagemakerTrainingJob>(GetArenaNoVirtual());
    trainingjob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.SagemakerHPOJob.TrainingJob)
  return trainingjob_;
}
inline void SagemakerHPOJob::set_allocated_trainingjob(::flyteidl::plugins::sagemaker::SagemakerTrainingJob* trainingjob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trainingjob_;
  }
  if (trainingjob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trainingjob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trainingjob, submessage_arena);
    }
    
  } else {
    
  }
  trainingjob_ = trainingjob;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.SagemakerHPOJob.TrainingJob)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::HPOJobObjective_HPOJobObjectiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::HPOJobObjective_HPOJobObjectiveType>() {
  return ::flyteidl::plugins::sagemaker::HPOJobObjective_HPOJobObjectiveType_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::HyperparameterScalingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::HyperparameterScalingType>() {
  return ::flyteidl::plugins::sagemaker::HyperparameterScalingType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fsagemaker_2eproto
