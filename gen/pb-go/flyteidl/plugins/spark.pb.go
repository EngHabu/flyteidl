// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/spark.proto

package plugins // import "github.com/lyft/flyteidl/gen/pb-go/plugins"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SparkApplicationType int32

const (
	SparkApplicationType_PythonApplicationType SparkApplicationType = 0
	SparkApplicationType_JavaApplicationType   SparkApplicationType = 1
	SparkApplicationType_ScalaApplicationType  SparkApplicationType = 2
	SparkApplicationType_RApplicationType      SparkApplicationType = 3
)

var SparkApplicationType_name = map[int32]string{
	0: "PythonApplicationType",
	1: "JavaApplicationType",
	2: "ScalaApplicationType",
	3: "RApplicationType",
}
var SparkApplicationType_value = map[string]int32{
	"PythonApplicationType": 0,
	"JavaApplicationType":   1,
	"ScalaApplicationType":  2,
	"RApplicationType":      3,
}

func (x SparkApplicationType) String() string {
	return proto.EnumName(SparkApplicationType_name, int32(x))
}
func (SparkApplicationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_spark_5fb0c92558430bdb, []int{0}
}

// Custom Proto for Spark Plugin.
type SparkJob struct {
	ApplicationType      SparkApplicationType `protobuf:"varint,1,opt,name=applicationType,proto3,enum=flyteidl.plugins.SparkApplicationType" json:"applicationType,omitempty"`
	MainApplicationFile  string               `protobuf:"bytes,2,opt,name=mainApplicationFile,proto3" json:"mainApplicationFile,omitempty"`
	MainClass            string               `protobuf:"bytes,3,opt,name=mainClass,proto3" json:"mainClass,omitempty"`
	SparkConf            map[string]string    `protobuf:"bytes,4,rep,name=sparkConf,proto3" json:"sparkConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HadoopConf           map[string]string    `protobuf:"bytes,5,rep,name=hadoopConf,proto3" json:"hadoopConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SparkJob) Reset()         { *m = SparkJob{} }
func (m *SparkJob) String() string { return proto.CompactTextString(m) }
func (*SparkJob) ProtoMessage()    {}
func (*SparkJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_spark_5fb0c92558430bdb, []int{0}
}
func (m *SparkJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparkJob.Unmarshal(m, b)
}
func (m *SparkJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparkJob.Marshal(b, m, deterministic)
}
func (dst *SparkJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparkJob.Merge(dst, src)
}
func (m *SparkJob) XXX_Size() int {
	return xxx_messageInfo_SparkJob.Size(m)
}
func (m *SparkJob) XXX_DiscardUnknown() {
	xxx_messageInfo_SparkJob.DiscardUnknown(m)
}

var xxx_messageInfo_SparkJob proto.InternalMessageInfo

func (m *SparkJob) GetApplicationType() SparkApplicationType {
	if m != nil {
		return m.ApplicationType
	}
	return SparkApplicationType_PythonApplicationType
}

func (m *SparkJob) GetMainApplicationFile() string {
	if m != nil {
		return m.MainApplicationFile
	}
	return ""
}

func (m *SparkJob) GetMainClass() string {
	if m != nil {
		return m.MainClass
	}
	return ""
}

func (m *SparkJob) GetSparkConf() map[string]string {
	if m != nil {
		return m.SparkConf
	}
	return nil
}

func (m *SparkJob) GetHadoopConf() map[string]string {
	if m != nil {
		return m.HadoopConf
	}
	return nil
}

func init() {
	proto.RegisterType((*SparkJob)(nil), "flyteidl.plugins.SparkJob")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.plugins.SparkJob.HadoopConfEntry")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.plugins.SparkJob.SparkConfEntry")
	proto.RegisterEnum("flyteidl.plugins.SparkApplicationType", SparkApplicationType_name, SparkApplicationType_value)
}

func init() { proto.RegisterFile("flyteidl/plugins/spark.proto", fileDescriptor_spark_5fb0c92558430bdb) }

var fileDescriptor_spark_5fb0c92558430bdb = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x4f, 0xf2, 0x40,
	0x14, 0x85, 0xdf, 0xd2, 0x17, 0x63, 0xaf, 0x09, 0x34, 0x43, 0x8d, 0x95, 0xb0, 0x20, 0x2e, 0x0c,
	0x12, 0x6d, 0x0d, 0x6e, 0x8c, 0xd1, 0x85, 0x12, 0x3f, 0xd2, 0x15, 0x29, 0xae, 0xdc, 0x4d, 0xa1,
	0x94, 0x09, 0xc3, 0xcc, 0x84, 0x0e, 0x24, 0xf5, 0xc7, 0xf9, 0xdb, 0x4c, 0x07, 0xcb, 0xc7, 0x88,
	0x26, 0xee, 0x6e, 0xef, 0x39, 0xcf, 0xe9, 0xdc, 0x99, 0x0b, 0x8d, 0x11, 0xcd, 0x64, 0x4c, 0x86,
	0xd4, 0x17, 0x74, 0x9e, 0x10, 0x96, 0xfa, 0xa9, 0xc0, 0xb3, 0x89, 0x27, 0x66, 0x5c, 0x72, 0x64,
	0x17, 0xaa, 0xf7, 0xa5, 0x9e, 0x7c, 0x98, 0xb0, 0xdf, 0xcf, 0x1d, 0x01, 0x8f, 0x50, 0x0f, 0xaa,
	0x58, 0x08, 0x4a, 0x06, 0x58, 0x12, 0xce, 0x5e, 0x33, 0x11, 0xbb, 0x46, 0xd3, 0x68, 0x55, 0x3a,
	0xa7, 0x9e, 0x0e, 0x7a, 0x0a, 0xba, 0xdf, 0x76, 0x87, 0x3a, 0x8e, 0x2e, 0xa1, 0x36, 0xc5, 0x84,
	0x6d, 0xf8, 0x9e, 0x08, 0x8d, 0xdd, 0x52, 0xd3, 0x68, 0x59, 0xe1, 0x2e, 0x09, 0x35, 0xc0, 0xca,
	0xdb, 0x5d, 0x8a, 0xd3, 0xd4, 0x35, 0x95, 0x6f, 0xdd, 0x40, 0xcf, 0x60, 0xa9, 0x79, 0xba, 0x9c,
	0x8d, 0xdc, 0xff, 0x4d, 0xb3, 0x75, 0xd0, 0x39, 0xfb, 0xe1, 0x6c, 0x01, 0x8f, 0x96, 0x45, 0xee,
	0x7d, 0x64, 0x72, 0x96, 0x85, 0x6b, 0x16, 0x05, 0x00, 0x63, 0x3c, 0xe4, 0x5c, 0xa8, 0xa4, 0xb2,
	0x4a, 0x6a, 0xff, 0x92, 0xf4, 0xb2, 0x32, 0x2f, 0xa3, 0x36, 0xe8, 0xfa, 0x2d, 0x54, 0xb6, 0x7f,
	0x84, 0x6c, 0x30, 0x27, 0x71, 0xa6, 0x2e, 0xcf, 0x0a, 0xf3, 0x12, 0x39, 0x50, 0x5e, 0x60, 0x3a,
	0x2f, 0x46, 0x5f, 0x7e, 0xdc, 0x94, 0xae, 0x8d, 0xfa, 0x1d, 0x54, 0xb5, 0xf0, 0xbf, 0xe0, 0xed,
	0x77, 0x70, 0x76, 0x3d, 0x05, 0x3a, 0x86, 0xc3, 0x5e, 0x26, 0xc7, 0x9c, 0x69, 0x82, 0xfd, 0x0f,
	0x1d, 0x41, 0x2d, 0xc0, 0x0b, 0xac, 0x0b, 0x06, 0x72, 0xc1, 0xe9, 0x0f, 0x30, 0xfd, 0xa6, 0x94,
	0x90, 0x03, 0x76, 0xa8, 0x77, 0xcd, 0x87, 0xf3, 0xb7, 0x76, 0x42, 0xe4, 0x78, 0x1e, 0x79, 0x03,
	0x3e, 0xf5, 0x69, 0x36, 0x92, 0xfe, 0x6a, 0xfd, 0x92, 0x98, 0xf9, 0x22, 0xba, 0x48, 0x78, 0xb1,
	0x88, 0xd1, 0x9e, 0xda, 0xc1, 0xab, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x90, 0xc3, 0xb7,
	0xa3, 0x02, 0x00, 0x00,
}
