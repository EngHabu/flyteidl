syntax = "proto3";

package flyteidl.plugins;

option go_package = "github.com/lyft/flyteidl/gen/pb-go/flyteidl/plugins";

// This configuration allows executing raw containers in Flyte using the Flyte CoPilot system.
// Flyte CoPilot, eliminates the needs of flytekit or sdk inside the container. Any inputs required by the users container are side-loaded in the input_path
// Any outputs generated by the user container - within output_path are automatically uploaded.
// We are starting this as a plugin, but after the container within Pod ordering stabilizes, we can move this
// into the default task definition.
message CoPilot {
  // MetadataFormat is used to decide the format in which the input metadata so that the users containers can read it. If the user has access to the protocol buffer definitions, 
  // it is recommended to use the PROTO format.
  // JSON and YAML do not need any protobuf definitions to read it
  enum MetadataFormat {
    JSON = 0;
    PROTO = 1;
    YAML = 2;
  }
  // File system path (start at root). This folder will contain all the inputs exploded to a separate file. 
  // Example, if the input interface needs (x: int, y: blob, z: multipart_blob) and the input path is "/var/flyte/inputs", then the file system will look like
  // /var/flyte/inputs/inputs.<metadata format dependent -> .pb .json .yaml>
  // /var/flyte/inputs/x -> X is a file that contains the value of x (integer) in string format
  // /var/flyte/inputs/y -> Y is a file in Binary format
  // /var/flyte/inputs/z/... -> Note Z itself is a directory
  // More information about the protocol - refer to docs #TODO reference docs here
  string input_path = 1;
  // File system path (start at root). This folder should contain all the outputs for the task as individual files and/or an error text file
  uint32 output_path = 2;
  // In the inputs folder, there will be an additional summary/metadata file that contains references to all files or inlined primitive values.
  // This format decides the actual encoding for the data
  MetadataFormat format = 3;
}
