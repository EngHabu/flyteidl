// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/audit.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2faudit_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2faudit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2faudit_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2faudit_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2faudit_2eproto();
namespace flyteidl {
namespace admin {
class AuditLog;
class AuditLogDefaultTypeInternal;
extern AuditLogDefaultTypeInternal _AuditLog_default_instance_;
class Principal;
class PrincipalDefaultTypeInternal;
extern PrincipalDefaultTypeInternal _Principal_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_ParametersEntry_DoNotUse;
class Request_ParametersEntry_DoNotUseDefaultTypeInternal;
extern Request_ParametersEntry_DoNotUseDefaultTypeInternal _Request_ParametersEntry_DoNotUse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::AuditLog* Arena::CreateMaybeMessage<::flyteidl::admin::AuditLog>(Arena*);
template<> ::flyteidl::admin::Principal* Arena::CreateMaybeMessage<::flyteidl::admin::Principal>(Arena*);
template<> ::flyteidl::admin::Request* Arena::CreateMaybeMessage<::flyteidl::admin::Request>(Arena*);
template<> ::flyteidl::admin::Request_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::Request_ParametersEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::Response* Arena::CreateMaybeMessage<::flyteidl::admin::Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

enum Request_Mode {
  Request_Mode_READ_ONLY = 0,
  Request_Mode_READ_WRITE = 1,
  Request_Mode_Request_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Request_Mode_Request_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Request_Mode_IsValid(int value);
const Request_Mode Request_Mode_Mode_MIN = Request_Mode_READ_ONLY;
const Request_Mode Request_Mode_Mode_MAX = Request_Mode_READ_WRITE;
const int Request_Mode_Mode_ARRAYSIZE = Request_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Mode_descriptor();
inline const ::std::string& Request_Mode_Name(Request_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Mode_descriptor(), value);
}
inline bool Request_Mode_Parse(
    const ::std::string& name, Request_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Mode>(
    Request_Mode_descriptor(), name, value);
}
// ===================================================================

class AuditLog final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.AuditLog) */ {
 public:
  AuditLog();
  virtual ~AuditLog();

  AuditLog(const AuditLog& from);

  inline AuditLog& operator=(const AuditLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditLog(AuditLog&& from) noexcept
    : AuditLog() {
    *this = ::std::move(from);
  }

  inline AuditLog& operator=(AuditLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuditLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditLog* internal_default_instance() {
    return reinterpret_cast<const AuditLog*>(
               &_AuditLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AuditLog* other);
  friend void swap(AuditLog& a, AuditLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditLog* New() const final {
    return CreateMaybeMessage<AuditLog>(nullptr);
  }

  AuditLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditLog& from);
  void MergeFrom(const AuditLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_ip = 2;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 2;
  const ::std::string& client_ip() const;
  void set_client_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_client_ip(::std::string&& value);
  #endif
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  ::std::string* mutable_client_ip();
  ::std::string* release_client_ip();
  void set_allocated_client_ip(::std::string* client_ip);

  // string client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // .flyteidl.admin.Principal principal = 1;
  bool has_principal() const;
  void clear_principal();
  static const int kPrincipalFieldNumber = 1;
  const ::flyteidl::admin::Principal& principal() const;
  ::flyteidl::admin::Principal* release_principal();
  ::flyteidl::admin::Principal* mutable_principal();
  void set_allocated_principal(::flyteidl::admin::Principal* principal);

  // .flyteidl.admin.Request request = 4;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 4;
  const ::flyteidl::admin::Request& request() const;
  ::flyteidl::admin::Request* release_request();
  ::flyteidl::admin::Request* mutable_request();
  void set_allocated_request(::flyteidl::admin::Request* request);

  // .flyteidl.admin.Response response = 5;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 5;
  const ::flyteidl::admin::Response& response() const;
  ::flyteidl::admin::Response* release_response();
  ::flyteidl::admin::Response* mutable_response();
  void set_allocated_response(::flyteidl::admin::Response* response);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.AuditLog)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr client_ip_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::flyteidl::admin::Principal* principal_;
  ::flyteidl::admin::Request* request_;
  ::flyteidl::admin::Response* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2faudit_2eproto;
};
// -------------------------------------------------------------------

class Principal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Principal) */ {
 public:
  Principal();
  virtual ~Principal();

  Principal(const Principal& from);

  inline Principal& operator=(const Principal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Principal(Principal&& from) noexcept
    : Principal() {
    *this = ::std::move(from);
  }

  inline Principal& operator=(Principal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Principal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Principal* internal_default_instance() {
    return reinterpret_cast<const Principal*>(
               &_Principal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Principal* other);
  friend void swap(Principal& a, Principal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Principal* New() const final {
    return CreateMaybeMessage<Principal>(nullptr);
  }

  Principal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Principal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Principal& from);
  void MergeFrom(const Principal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Principal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // .google.protobuf.Timestamp token_issued_at = 2;
  bool has_token_issued_at() const;
  void clear_token_issued_at();
  static const int kTokenIssuedAtFieldNumber = 2;
  const ::google::protobuf::Timestamp& token_issued_at() const;
  ::google::protobuf::Timestamp* release_token_issued_at();
  ::google::protobuf::Timestamp* mutable_token_issued_at();
  void set_allocated_token_issued_at(::google::protobuf::Timestamp* token_issued_at);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Principal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::Timestamp* token_issued_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2faudit_2eproto;
};
// -------------------------------------------------------------------

class Request_ParametersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Request_ParametersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Request_ParametersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Request_ParametersEntry_DoNotUse();
  Request_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Request_ParametersEntry_DoNotUse& other);
  static const Request_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Request_ParametersEntry_DoNotUse*>(&_Request_ParametersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Request_Mode Mode;
  static const Mode READ_ONLY =
    Request_Mode_READ_ONLY;
  static const Mode READ_WRITE =
    Request_Mode_READ_WRITE;
  static inline bool Mode_IsValid(int value) {
    return Request_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    Request_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    Request_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    Request_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return Request_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return Request_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return Request_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> parameters = 3;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      parameters() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_parameters();

  // string method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // string http_verb = 2;
  void clear_http_verb();
  static const int kHttpVerbFieldNumber = 2;
  const ::std::string& http_verb() const;
  void set_http_verb(const ::std::string& value);
  #if LANG_CXX11
  void set_http_verb(::std::string&& value);
  #endif
  void set_http_verb(const char* value);
  void set_http_verb(const char* value, size_t size);
  ::std::string* mutable_http_verb();
  ::std::string* release_http_verb();
  void set_allocated_http_verb(::std::string* http_verb);

  // .google.protobuf.Timestamp received_at = 5;
  bool has_received_at() const;
  void clear_received_at();
  static const int kReceivedAtFieldNumber = 5;
  const ::google::protobuf::Timestamp& received_at() const;
  ::google::protobuf::Timestamp* release_received_at();
  ::google::protobuf::Timestamp* mutable_received_at();
  void set_allocated_received_at(::google::protobuf::Timestamp* received_at);

  // .flyteidl.admin.Request.Mode mode = 4;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::flyteidl::admin::Request_Mode mode() const;
  void set_mode(::flyteidl::admin::Request_Mode value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Request_ParametersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > parameters_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr http_verb_;
  ::google::protobuf::Timestamp* received_at_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2faudit_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string response_code = 1;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  const ::std::string& response_code() const;
  void set_response_code(const ::std::string& value);
  #if LANG_CXX11
  void set_response_code(::std::string&& value);
  #endif
  void set_response_code(const char* value);
  void set_response_code(const char* value, size_t size);
  ::std::string* mutable_response_code();
  ::std::string* release_response_code();
  void set_allocated_response_code(::std::string* response_code);

  // .google.protobuf.Timestamp sent_at = 2;
  bool has_sent_at() const;
  void clear_sent_at();
  static const int kSentAtFieldNumber = 2;
  const ::google::protobuf::Timestamp& sent_at() const;
  ::google::protobuf::Timestamp* release_sent_at();
  ::google::protobuf::Timestamp* mutable_sent_at();
  void set_allocated_sent_at(::google::protobuf::Timestamp* sent_at);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_code_;
  ::google::protobuf::Timestamp* sent_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2faudit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuditLog

// .flyteidl.admin.Principal principal = 1;
inline bool AuditLog::has_principal() const {
  return this != internal_default_instance() && principal_ != nullptr;
}
inline void AuditLog::clear_principal() {
  if (GetArenaNoVirtual() == nullptr && principal_ != nullptr) {
    delete principal_;
  }
  principal_ = nullptr;
}
inline const ::flyteidl::admin::Principal& AuditLog::principal() const {
  const ::flyteidl::admin::Principal* p = principal_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.AuditLog.principal)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Principal*>(
      &::flyteidl::admin::_Principal_default_instance_);
}
inline ::flyteidl::admin::Principal* AuditLog::release_principal() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.AuditLog.principal)
  
  ::flyteidl::admin::Principal* temp = principal_;
  principal_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Principal* AuditLog::mutable_principal() {
  
  if (principal_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Principal>(GetArenaNoVirtual());
    principal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.AuditLog.principal)
  return principal_;
}
inline void AuditLog::set_allocated_principal(::flyteidl::admin::Principal* principal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete principal_;
  }
  if (principal) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      principal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, principal, submessage_arena);
    }
    
  } else {
    
  }
  principal_ = principal;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.AuditLog.principal)
}

// string client_ip = 2;
inline void AuditLog::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuditLog::client_ip() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.AuditLog.client_ip)
  return client_ip_.GetNoArena();
}
inline void AuditLog::set_client_ip(const ::std::string& value) {
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.AuditLog.client_ip)
}
#if LANG_CXX11
inline void AuditLog::set_client_ip(::std::string&& value) {
  
  client_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.AuditLog.client_ip)
}
#endif
inline void AuditLog::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.AuditLog.client_ip)
}
inline void AuditLog::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.AuditLog.client_ip)
}
inline ::std::string* AuditLog::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.AuditLog.client_ip)
  return client_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuditLog::release_client_ip() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.AuditLog.client_ip)
  
  return client_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuditLog::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.AuditLog.client_ip)
}

// string client_id = 3;
inline void AuditLog::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuditLog::client_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.AuditLog.client_id)
  return client_id_.GetNoArena();
}
inline void AuditLog::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.AuditLog.client_id)
}
#if LANG_CXX11
inline void AuditLog::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.AuditLog.client_id)
}
#endif
inline void AuditLog::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.AuditLog.client_id)
}
inline void AuditLog::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.AuditLog.client_id)
}
inline ::std::string* AuditLog::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.AuditLog.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuditLog::release_client_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.AuditLog.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuditLog::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.AuditLog.client_id)
}

// .flyteidl.admin.Request request = 4;
inline bool AuditLog::has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline void AuditLog::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::flyteidl::admin::Request& AuditLog::request() const {
  const ::flyteidl::admin::Request* p = request_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.AuditLog.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Request*>(
      &::flyteidl::admin::_Request_default_instance_);
}
inline ::flyteidl::admin::Request* AuditLog::release_request() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.AuditLog.request)
  
  ::flyteidl::admin::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Request* AuditLog::mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Request>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.AuditLog.request)
  return request_;
}
inline void AuditLog::set_allocated_request(::flyteidl::admin::Request* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.AuditLog.request)
}

// .flyteidl.admin.Response response = 5;
inline bool AuditLog::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline void AuditLog::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::flyteidl::admin::Response& AuditLog::response() const {
  const ::flyteidl::admin::Response* p = response_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.AuditLog.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Response*>(
      &::flyteidl::admin::_Response_default_instance_);
}
inline ::flyteidl::admin::Response* AuditLog::release_response() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.AuditLog.response)
  
  ::flyteidl::admin::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Response* AuditLog::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.AuditLog.response)
  return response_;
}
inline void AuditLog::set_allocated_response(::flyteidl::admin::Response* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.AuditLog.response)
}

// -------------------------------------------------------------------

// Principal

// string subject = 1;
inline void Principal::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Principal::subject() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Principal.subject)
  return subject_.GetNoArena();
}
inline void Principal::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Principal.subject)
}
#if LANG_CXX11
inline void Principal::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Principal.subject)
}
#endif
inline void Principal::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Principal.subject)
}
inline void Principal::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Principal.subject)
}
inline ::std::string* Principal::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Principal.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Principal::release_subject() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Principal.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Principal::set_allocated_subject(::std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Principal.subject)
}

// .google.protobuf.Timestamp token_issued_at = 2;
inline bool Principal::has_token_issued_at() const {
  return this != internal_default_instance() && token_issued_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Principal::token_issued_at() const {
  const ::google::protobuf::Timestamp* p = token_issued_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Principal.token_issued_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Principal::release_token_issued_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Principal.token_issued_at)
  
  ::google::protobuf::Timestamp* temp = token_issued_at_;
  token_issued_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Principal::mutable_token_issued_at() {
  
  if (token_issued_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    token_issued_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Principal.token_issued_at)
  return token_issued_at_;
}
inline void Principal::set_allocated_token_issued_at(::google::protobuf::Timestamp* token_issued_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(token_issued_at_);
  }
  if (token_issued_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(token_issued_at)->GetArena();
    if (message_arena != submessage_arena) {
      token_issued_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, token_issued_at, submessage_arena);
    }
    
  } else {
    
  }
  token_issued_at_ = token_issued_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Principal.token_issued_at)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Request

// string method = 1;
inline void Request::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Request.method)
  return method_.GetNoArena();
}
inline void Request::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Request.method)
}
#if LANG_CXX11
inline void Request::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Request.method)
}
#endif
inline void Request::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Request.method)
}
inline void Request::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Request.method)
}
inline ::std::string* Request::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Request.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Request.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_method(::std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Request.method)
}

// string http_verb = 2;
inline void Request::clear_http_verb() {
  http_verb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::http_verb() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Request.http_verb)
  return http_verb_.GetNoArena();
}
inline void Request::set_http_verb(const ::std::string& value) {
  
  http_verb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Request.http_verb)
}
#if LANG_CXX11
inline void Request::set_http_verb(::std::string&& value) {
  
  http_verb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Request.http_verb)
}
#endif
inline void Request::set_http_verb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  http_verb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Request.http_verb)
}
inline void Request::set_http_verb(const char* value, size_t size) {
  
  http_verb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Request.http_verb)
}
inline ::std::string* Request::mutable_http_verb() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Request.http_verb)
  return http_verb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_http_verb() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Request.http_verb)
  
  return http_verb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_http_verb(::std::string* http_verb) {
  if (http_verb != nullptr) {
    
  } else {
    
  }
  http_verb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_verb);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Request.http_verb)
}

// map<string, string> parameters = 3;
inline int Request::parameters_size() const {
  return parameters_.size();
}
inline void Request::clear_parameters() {
  parameters_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Request::parameters() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.Request.parameters)
  return parameters_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Request::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.Request.parameters)
  return parameters_.MutableMap();
}

// .flyteidl.admin.Request.Mode mode = 4;
inline void Request::clear_mode() {
  mode_ = 0;
}
inline ::flyteidl::admin::Request_Mode Request::mode() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Request.mode)
  return static_cast< ::flyteidl::admin::Request_Mode >(mode_);
}
inline void Request::set_mode(::flyteidl::admin::Request_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.Request.mode)
}

// .google.protobuf.Timestamp received_at = 5;
inline bool Request::has_received_at() const {
  return this != internal_default_instance() && received_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Request::received_at() const {
  const ::google::protobuf::Timestamp* p = received_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Request.received_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Request::release_received_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Request.received_at)
  
  ::google::protobuf::Timestamp* temp = received_at_;
  received_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Request::mutable_received_at() {
  
  if (received_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    received_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Request.received_at)
  return received_at_;
}
inline void Request::set_allocated_received_at(::google::protobuf::Timestamp* received_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(received_at_);
  }
  if (received_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(received_at)->GetArena();
    if (message_arena != submessage_arena) {
      received_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, received_at, submessage_arena);
    }
    
  } else {
    
  }
  received_at_ = received_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Request.received_at)
}

// -------------------------------------------------------------------

// Response

// string response_code = 1;
inline void Response::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::response_code() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Response.response_code)
  return response_code_.GetNoArena();
}
inline void Response::set_response_code(const ::std::string& value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Response.response_code)
}
#if LANG_CXX11
inline void Response::set_response_code(::std::string&& value) {
  
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Response.response_code)
}
#endif
inline void Response::set_response_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Response.response_code)
}
inline void Response::set_response_code(const char* value, size_t size) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Response.response_code)
}
inline ::std::string* Response::mutable_response_code() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Response.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_response_code() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Response.response_code)
  
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_response_code(::std::string* response_code) {
  if (response_code != nullptr) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Response.response_code)
}

// .google.protobuf.Timestamp sent_at = 2;
inline bool Response::has_sent_at() const {
  return this != internal_default_instance() && sent_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Response::sent_at() const {
  const ::google::protobuf::Timestamp* p = sent_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Response.sent_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Response::release_sent_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Response.sent_at)
  
  ::google::protobuf::Timestamp* temp = sent_at_;
  sent_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Response::mutable_sent_at() {
  
  if (sent_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    sent_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Response.sent_at)
  return sent_at_;
}
inline void Response::set_allocated_sent_at(::google::protobuf::Timestamp* sent_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sent_at_);
  }
  if (sent_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(sent_at)->GetArena();
    if (message_arena != submessage_arena) {
      sent_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sent_at, submessage_arena);
    }
    
  } else {
    
  }
  sent_at_ = sent_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Response.sent_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::admin::Request_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::Request_Mode>() {
  return ::flyteidl::admin::Request_Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2faudit_2eproto
