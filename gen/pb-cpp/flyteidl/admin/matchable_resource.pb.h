// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/matchable_resource.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto();
namespace flyteidl {
namespace admin {
class ClusterResourceAttributes;
class ClusterResourceAttributesDefaultTypeInternal;
extern ClusterResourceAttributesDefaultTypeInternal _ClusterResourceAttributes_default_instance_;
class ClusterResourceAttributes_AttributesEntry_DoNotUse;
class ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal;
extern ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal _ClusterResourceAttributes_AttributesEntry_DoNotUse_default_instance_;
class ExecutionQueueAttributes;
class ExecutionQueueAttributesDefaultTypeInternal;
extern ExecutionQueueAttributesDefaultTypeInternal _ExecutionQueueAttributes_default_instance_;
class MatchingAttributes;
class MatchingAttributesDefaultTypeInternal;
extern MatchingAttributesDefaultTypeInternal _MatchingAttributes_default_instance_;
class TaskResourceAttributes;
class TaskResourceAttributesDefaultTypeInternal;
extern TaskResourceAttributesDefaultTypeInternal _TaskResourceAttributes_default_instance_;
class TaskResourceSpec;
class TaskResourceSpecDefaultTypeInternal;
extern TaskResourceSpecDefaultTypeInternal _TaskResourceSpec_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::ClusterResourceAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::ClusterResourceAttributes>(Arena*);
template<> ::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::ExecutionQueueAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::ExecutionQueueAttributes>(Arena*);
template<> ::flyteidl::admin::MatchingAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::MatchingAttributes>(Arena*);
template<> ::flyteidl::admin::TaskResourceAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::TaskResourceAttributes>(Arena*);
template<> ::flyteidl::admin::TaskResourceSpec* Arena::CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

enum MatchableResource {
  TASK_RESOURCE = 0,
  CLUSTER_RESOURCE = 1,
  EXECUTION_QUEUE = 2,
  CLUSTER_LABEL = 3,
  MatchableResource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  MatchableResource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool MatchableResource_IsValid(int value);
const MatchableResource MatchableResource_MIN = TASK_RESOURCE;
const MatchableResource MatchableResource_MAX = CLUSTER_LABEL;
const int MatchableResource_ARRAYSIZE = MatchableResource_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchableResource_descriptor();
inline const ::std::string& MatchableResource_Name(MatchableResource value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchableResource_descriptor(), value);
}
inline bool MatchableResource_Parse(
    const ::std::string& name, MatchableResource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchableResource>(
    MatchableResource_descriptor(), name, value);
}
// ===================================================================

class TaskResourceSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskResourceSpec) */ {
 public:
  TaskResourceSpec();
  virtual ~TaskResourceSpec();

  TaskResourceSpec(const TaskResourceSpec& from);

  inline TaskResourceSpec& operator=(const TaskResourceSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskResourceSpec(TaskResourceSpec&& from) noexcept
    : TaskResourceSpec() {
    *this = ::std::move(from);
  }

  inline TaskResourceSpec& operator=(TaskResourceSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskResourceSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResourceSpec* internal_default_instance() {
    return reinterpret_cast<const TaskResourceSpec*>(
               &_TaskResourceSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TaskResourceSpec* other);
  friend void swap(TaskResourceSpec& a, TaskResourceSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskResourceSpec* New() const final {
    return CreateMaybeMessage<TaskResourceSpec>(nullptr);
  }

  TaskResourceSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskResourceSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskResourceSpec& from);
  void MergeFrom(const TaskResourceSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResourceSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu = 1;
  void clear_cpu();
  static const int kCpuFieldNumber = 1;
  const ::std::string& cpu() const;
  void set_cpu(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu(::std::string&& value);
  #endif
  void set_cpu(const char* value);
  void set_cpu(const char* value, size_t size);
  ::std::string* mutable_cpu();
  ::std::string* release_cpu();
  void set_allocated_cpu(::std::string* cpu);

  // string gpu = 2;
  void clear_gpu();
  static const int kGpuFieldNumber = 2;
  const ::std::string& gpu() const;
  void set_gpu(const ::std::string& value);
  #if LANG_CXX11
  void set_gpu(::std::string&& value);
  #endif
  void set_gpu(const char* value);
  void set_gpu(const char* value, size_t size);
  ::std::string* mutable_gpu();
  ::std::string* release_gpu();
  void set_allocated_gpu(::std::string* gpu);

  // string memory = 3;
  void clear_memory();
  static const int kMemoryFieldNumber = 3;
  const ::std::string& memory() const;
  void set_memory(const ::std::string& value);
  #if LANG_CXX11
  void set_memory(::std::string&& value);
  #endif
  void set_memory(const char* value);
  void set_memory(const char* value, size_t size);
  ::std::string* mutable_memory();
  ::std::string* release_memory();
  void set_allocated_memory(::std::string* memory);

  // string storage = 4;
  void clear_storage();
  static const int kStorageFieldNumber = 4;
  const ::std::string& storage() const;
  void set_storage(const ::std::string& value);
  #if LANG_CXX11
  void set_storage(::std::string&& value);
  #endif
  void set_storage(const char* value);
  void set_storage(const char* value, size_t size);
  ::std::string* mutable_storage();
  ::std::string* release_storage();
  void set_allocated_storage(::std::string* storage);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskResourceSpec)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_;
  ::google::protobuf::internal::ArenaStringPtr gpu_;
  ::google::protobuf::internal::ArenaStringPtr memory_;
  ::google::protobuf::internal::ArenaStringPtr storage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class TaskResourceAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskResourceAttributes) */ {
 public:
  TaskResourceAttributes();
  virtual ~TaskResourceAttributes();

  TaskResourceAttributes(const TaskResourceAttributes& from);

  inline TaskResourceAttributes& operator=(const TaskResourceAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskResourceAttributes(TaskResourceAttributes&& from) noexcept
    : TaskResourceAttributes() {
    *this = ::std::move(from);
  }

  inline TaskResourceAttributes& operator=(TaskResourceAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskResourceAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResourceAttributes* internal_default_instance() {
    return reinterpret_cast<const TaskResourceAttributes*>(
               &_TaskResourceAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TaskResourceAttributes* other);
  friend void swap(TaskResourceAttributes& a, TaskResourceAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskResourceAttributes* New() const final {
    return CreateMaybeMessage<TaskResourceAttributes>(nullptr);
  }

  TaskResourceAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskResourceAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskResourceAttributes& from);
  void MergeFrom(const TaskResourceAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResourceAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.TaskResourceSpec defaults = 1;
  bool has_defaults() const;
  void clear_defaults();
  static const int kDefaultsFieldNumber = 1;
  const ::flyteidl::admin::TaskResourceSpec& defaults() const;
  ::flyteidl::admin::TaskResourceSpec* release_defaults();
  ::flyteidl::admin::TaskResourceSpec* mutable_defaults();
  void set_allocated_defaults(::flyteidl::admin::TaskResourceSpec* defaults);

  // .flyteidl.admin.TaskResourceSpec limits = 2;
  bool has_limits() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 2;
  const ::flyteidl::admin::TaskResourceSpec& limits() const;
  ::flyteidl::admin::TaskResourceSpec* release_limits();
  ::flyteidl::admin::TaskResourceSpec* mutable_limits();
  void set_allocated_limits(::flyteidl::admin::TaskResourceSpec* limits);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskResourceAttributes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::TaskResourceSpec* defaults_;
  ::flyteidl::admin::TaskResourceSpec* limits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ClusterResourceAttributes_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ClusterResourceAttributes_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ClusterResourceAttributes_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ClusterResourceAttributes_AttributesEntry_DoNotUse();
  ClusterResourceAttributes_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ClusterResourceAttributes_AttributesEntry_DoNotUse& other);
  static const ClusterResourceAttributes_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ClusterResourceAttributes_AttributesEntry_DoNotUse*>(&_ClusterResourceAttributes_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ClusterResourceAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ClusterResourceAttributes) */ {
 public:
  ClusterResourceAttributes();
  virtual ~ClusterResourceAttributes();

  ClusterResourceAttributes(const ClusterResourceAttributes& from);

  inline ClusterResourceAttributes& operator=(const ClusterResourceAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterResourceAttributes(ClusterResourceAttributes&& from) noexcept
    : ClusterResourceAttributes() {
    *this = ::std::move(from);
  }

  inline ClusterResourceAttributes& operator=(ClusterResourceAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClusterResourceAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterResourceAttributes* internal_default_instance() {
    return reinterpret_cast<const ClusterResourceAttributes*>(
               &_ClusterResourceAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClusterResourceAttributes* other);
  friend void swap(ClusterResourceAttributes& a, ClusterResourceAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterResourceAttributes* New() const final {
    return CreateMaybeMessage<ClusterResourceAttributes>(nullptr);
  }

  ClusterResourceAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterResourceAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterResourceAttributes& from);
  void MergeFrom(const ClusterResourceAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterResourceAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> attributes = 1;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ClusterResourceAttributes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ClusterResourceAttributes_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ExecutionQueueAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionQueueAttributes) */ {
 public:
  ExecutionQueueAttributes();
  virtual ~ExecutionQueueAttributes();

  ExecutionQueueAttributes(const ExecutionQueueAttributes& from);

  inline ExecutionQueueAttributes& operator=(const ExecutionQueueAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionQueueAttributes(ExecutionQueueAttributes&& from) noexcept
    : ExecutionQueueAttributes() {
    *this = ::std::move(from);
  }

  inline ExecutionQueueAttributes& operator=(ExecutionQueueAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionQueueAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionQueueAttributes* internal_default_instance() {
    return reinterpret_cast<const ExecutionQueueAttributes*>(
               &_ExecutionQueueAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ExecutionQueueAttributes* other);
  friend void swap(ExecutionQueueAttributes& a, ExecutionQueueAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionQueueAttributes* New() const final {
    return CreateMaybeMessage<ExecutionQueueAttributes>(nullptr);
  }

  ExecutionQueueAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionQueueAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionQueueAttributes& from);
  void MergeFrom(const ExecutionQueueAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionQueueAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 1;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 1;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionQueueAttributes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class MatchingAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.MatchingAttributes) */ {
 public:
  MatchingAttributes();
  virtual ~MatchingAttributes();

  MatchingAttributes(const MatchingAttributes& from);

  inline MatchingAttributes& operator=(const MatchingAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchingAttributes(MatchingAttributes&& from) noexcept
    : MatchingAttributes() {
    *this = ::std::move(from);
  }

  inline MatchingAttributes& operator=(MatchingAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatchingAttributes& default_instance();

  enum TargetCase {
    kTaskResourceAttributes = 1,
    kClusterResourceAttributes = 2,
    kExecutionQueueAttributes = 3,
    kClusterLabel = 4,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchingAttributes* internal_default_instance() {
    return reinterpret_cast<const MatchingAttributes*>(
               &_MatchingAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MatchingAttributes* other);
  friend void swap(MatchingAttributes& a, MatchingAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchingAttributes* New() const final {
    return CreateMaybeMessage<MatchingAttributes>(nullptr);
  }

  MatchingAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchingAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchingAttributes& from);
  void MergeFrom(const MatchingAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchingAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1;
  bool has_task_resource_attributes() const;
  void clear_task_resource_attributes();
  static const int kTaskResourceAttributesFieldNumber = 1;
  const ::flyteidl::admin::TaskResourceAttributes& task_resource_attributes() const;
  ::flyteidl::admin::TaskResourceAttributes* release_task_resource_attributes();
  ::flyteidl::admin::TaskResourceAttributes* mutable_task_resource_attributes();
  void set_allocated_task_resource_attributes(::flyteidl::admin::TaskResourceAttributes* task_resource_attributes);

  // .flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2;
  bool has_cluster_resource_attributes() const;
  void clear_cluster_resource_attributes();
  static const int kClusterResourceAttributesFieldNumber = 2;
  const ::flyteidl::admin::ClusterResourceAttributes& cluster_resource_attributes() const;
  ::flyteidl::admin::ClusterResourceAttributes* release_cluster_resource_attributes();
  ::flyteidl::admin::ClusterResourceAttributes* mutable_cluster_resource_attributes();
  void set_allocated_cluster_resource_attributes(::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes);

  // .flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3;
  bool has_execution_queue_attributes() const;
  void clear_execution_queue_attributes();
  static const int kExecutionQueueAttributesFieldNumber = 3;
  const ::flyteidl::admin::ExecutionQueueAttributes& execution_queue_attributes() const;
  ::flyteidl::admin::ExecutionQueueAttributes* release_execution_queue_attributes();
  ::flyteidl::admin::ExecutionQueueAttributes* mutable_execution_queue_attributes();
  void set_allocated_execution_queue_attributes(::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes);

  // string cluster_label = 4;
  private:
  bool has_cluster_label() const;
  public:
  void clear_cluster_label();
  static const int kClusterLabelFieldNumber = 4;
  const ::std::string& cluster_label() const;
  void set_cluster_label(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_label(::std::string&& value);
  #endif
  void set_cluster_label(const char* value);
  void set_cluster_label(const char* value, size_t size);
  ::std::string* mutable_cluster_label();
  ::std::string* release_cluster_label();
  void set_allocated_cluster_label(::std::string* cluster_label);

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.MatchingAttributes)
 private:
  class HasBitSetters;
  void set_has_task_resource_attributes();
  void set_has_cluster_resource_attributes();
  void set_has_execution_queue_attributes();
  void set_has_cluster_label();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TargetUnion {
    TargetUnion() {}
    ::flyteidl::admin::TaskResourceAttributes* task_resource_attributes_;
    ::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes_;
    ::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes_;
    ::google::protobuf::internal::ArenaStringPtr cluster_label_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskResourceSpec

// string cpu = 1;
inline void TaskResourceSpec::clear_cpu() {
  cpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::cpu() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.cpu)
  return cpu_.GetNoArena();
}
inline void TaskResourceSpec::set_cpu(const ::std::string& value) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.cpu)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_cpu(::std::string&& value) {
  
  cpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.cpu)
}
#endif
inline void TaskResourceSpec::set_cpu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.cpu)
}
inline void TaskResourceSpec::set_cpu(const char* value, size_t size) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.cpu)
}
inline ::std::string* TaskResourceSpec::mutable_cpu() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.cpu)
  return cpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_cpu() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.cpu)
  
  return cpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_cpu(::std::string* cpu) {
  if (cpu != nullptr) {
    
  } else {
    
  }
  cpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.cpu)
}

// string gpu = 2;
inline void TaskResourceSpec::clear_gpu() {
  gpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::gpu() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.gpu)
  return gpu_.GetNoArena();
}
inline void TaskResourceSpec::set_gpu(const ::std::string& value) {
  
  gpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.gpu)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_gpu(::std::string&& value) {
  
  gpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.gpu)
}
#endif
inline void TaskResourceSpec::set_gpu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.gpu)
}
inline void TaskResourceSpec::set_gpu(const char* value, size_t size) {
  
  gpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.gpu)
}
inline ::std::string* TaskResourceSpec::mutable_gpu() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.gpu)
  return gpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_gpu() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.gpu)
  
  return gpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_gpu(::std::string* gpu) {
  if (gpu != nullptr) {
    
  } else {
    
  }
  gpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.gpu)
}

// string memory = 3;
inline void TaskResourceSpec::clear_memory() {
  memory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::memory() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.memory)
  return memory_.GetNoArena();
}
inline void TaskResourceSpec::set_memory(const ::std::string& value) {
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.memory)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_memory(::std::string&& value) {
  
  memory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.memory)
}
#endif
inline void TaskResourceSpec::set_memory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.memory)
}
inline void TaskResourceSpec::set_memory(const char* value, size_t size) {
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.memory)
}
inline ::std::string* TaskResourceSpec::mutable_memory() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.memory)
  return memory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_memory() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.memory)
  
  return memory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_memory(::std::string* memory) {
  if (memory != nullptr) {
    
  } else {
    
  }
  memory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.memory)
}

// string storage = 4;
inline void TaskResourceSpec::clear_storage() {
  storage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::storage() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.storage)
  return storage_.GetNoArena();
}
inline void TaskResourceSpec::set_storage(const ::std::string& value) {
  
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.storage)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_storage(::std::string&& value) {
  
  storage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.storage)
}
#endif
inline void TaskResourceSpec::set_storage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.storage)
}
inline void TaskResourceSpec::set_storage(const char* value, size_t size) {
  
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.storage)
}
inline ::std::string* TaskResourceSpec::mutable_storage() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.storage)
  return storage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_storage() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.storage)
  
  return storage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_storage(::std::string* storage) {
  if (storage != nullptr) {
    
  } else {
    
  }
  storage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.storage)
}

// -------------------------------------------------------------------

// TaskResourceAttributes

// .flyteidl.admin.TaskResourceSpec defaults = 1;
inline bool TaskResourceAttributes::has_defaults() const {
  return this != internal_default_instance() && defaults_ != nullptr;
}
inline void TaskResourceAttributes::clear_defaults() {
  if (GetArenaNoVirtual() == nullptr && defaults_ != nullptr) {
    delete defaults_;
  }
  defaults_ = nullptr;
}
inline const ::flyteidl::admin::TaskResourceSpec& TaskResourceAttributes::defaults() const {
  const ::flyteidl::admin::TaskResourceSpec* p = defaults_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceAttributes.defaults)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::TaskResourceSpec*>(
      &::flyteidl::admin::_TaskResourceSpec_default_instance_);
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::release_defaults() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceAttributes.defaults)
  
  ::flyteidl::admin::TaskResourceSpec* temp = defaults_;
  defaults_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::mutable_defaults() {
  
  if (defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(GetArenaNoVirtual());
    defaults_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceAttributes.defaults)
  return defaults_;
}
inline void TaskResourceAttributes::set_allocated_defaults(::flyteidl::admin::TaskResourceSpec* defaults) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete defaults_;
  }
  if (defaults) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      defaults = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, defaults, submessage_arena);
    }
    
  } else {
    
  }
  defaults_ = defaults;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceAttributes.defaults)
}

// .flyteidl.admin.TaskResourceSpec limits = 2;
inline bool TaskResourceAttributes::has_limits() const {
  return this != internal_default_instance() && limits_ != nullptr;
}
inline void TaskResourceAttributes::clear_limits() {
  if (GetArenaNoVirtual() == nullptr && limits_ != nullptr) {
    delete limits_;
  }
  limits_ = nullptr;
}
inline const ::flyteidl::admin::TaskResourceSpec& TaskResourceAttributes::limits() const {
  const ::flyteidl::admin::TaskResourceSpec* p = limits_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceAttributes.limits)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::TaskResourceSpec*>(
      &::flyteidl::admin::_TaskResourceSpec_default_instance_);
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::release_limits() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceAttributes.limits)
  
  ::flyteidl::admin::TaskResourceSpec* temp = limits_;
  limits_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::mutable_limits() {
  
  if (limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(GetArenaNoVirtual());
    limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceAttributes.limits)
  return limits_;
}
inline void TaskResourceAttributes::set_allocated_limits(::flyteidl::admin::TaskResourceSpec* limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete limits_;
  }
  if (limits) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    
  } else {
    
  }
  limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceAttributes.limits)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClusterResourceAttributes

// map<string, string> attributes = 1;
inline int ClusterResourceAttributes::attributes_size() const {
  return attributes_.size();
}
inline void ClusterResourceAttributes::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ClusterResourceAttributes::attributes() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.ClusterResourceAttributes.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ClusterResourceAttributes::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.ClusterResourceAttributes.attributes)
  return attributes_.MutableMap();
}

// -------------------------------------------------------------------

// ExecutionQueueAttributes

// repeated string tags = 1;
inline int ExecutionQueueAttributes::tags_size() const {
  return tags_.size();
}
inline void ExecutionQueueAttributes::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& ExecutionQueueAttributes::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_.Get(index);
}
inline ::std::string* ExecutionQueueAttributes::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_.Mutable(index);
}
inline void ExecutionQueueAttributes::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionQueueAttributes.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ExecutionQueueAttributes::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionQueueAttributes.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ExecutionQueueAttributes::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline ::std::string* ExecutionQueueAttributes::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_.Add();
}
inline void ExecutionQueueAttributes::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.ExecutionQueueAttributes.tags)
}
#if LANG_CXX11
inline void ExecutionQueueAttributes::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.ExecutionQueueAttributes.tags)
}
#endif
inline void ExecutionQueueAttributes::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ExecutionQueueAttributes::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ExecutionQueueAttributes::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.ExecutionQueueAttributes.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// MatchingAttributes

// .flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1;
inline bool MatchingAttributes::has_task_resource_attributes() const {
  return target_case() == kTaskResourceAttributes;
}
inline void MatchingAttributes::set_has_task_resource_attributes() {
  _oneof_case_[0] = kTaskResourceAttributes;
}
inline void MatchingAttributes::clear_task_resource_attributes() {
  if (has_task_resource_attributes()) {
    delete target_.task_resource_attributes_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::TaskResourceAttributes* MatchingAttributes::release_task_resource_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  if (has_task_resource_attributes()) {
    clear_has_target();
      ::flyteidl::admin::TaskResourceAttributes* temp = target_.task_resource_attributes_;
    target_.task_resource_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::TaskResourceAttributes& MatchingAttributes::task_resource_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  return has_task_resource_attributes()
      ? *target_.task_resource_attributes_
      : *reinterpret_cast< ::flyteidl::admin::TaskResourceAttributes*>(&::flyteidl::admin::_TaskResourceAttributes_default_instance_);
}
inline ::flyteidl::admin::TaskResourceAttributes* MatchingAttributes::mutable_task_resource_attributes() {
  if (!has_task_resource_attributes()) {
    clear_target();
    set_has_task_resource_attributes();
    target_.task_resource_attributes_ = CreateMaybeMessage< ::flyteidl::admin::TaskResourceAttributes >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  return target_.task_resource_attributes_;
}

// .flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2;
inline bool MatchingAttributes::has_cluster_resource_attributes() const {
  return target_case() == kClusterResourceAttributes;
}
inline void MatchingAttributes::set_has_cluster_resource_attributes() {
  _oneof_case_[0] = kClusterResourceAttributes;
}
inline void MatchingAttributes::clear_cluster_resource_attributes() {
  if (has_cluster_resource_attributes()) {
    delete target_.cluster_resource_attributes_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::ClusterResourceAttributes* MatchingAttributes::release_cluster_resource_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  if (has_cluster_resource_attributes()) {
    clear_has_target();
      ::flyteidl::admin::ClusterResourceAttributes* temp = target_.cluster_resource_attributes_;
    target_.cluster_resource_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ClusterResourceAttributes& MatchingAttributes::cluster_resource_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  return has_cluster_resource_attributes()
      ? *target_.cluster_resource_attributes_
      : *reinterpret_cast< ::flyteidl::admin::ClusterResourceAttributes*>(&::flyteidl::admin::_ClusterResourceAttributes_default_instance_);
}
inline ::flyteidl::admin::ClusterResourceAttributes* MatchingAttributes::mutable_cluster_resource_attributes() {
  if (!has_cluster_resource_attributes()) {
    clear_target();
    set_has_cluster_resource_attributes();
    target_.cluster_resource_attributes_ = CreateMaybeMessage< ::flyteidl::admin::ClusterResourceAttributes >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  return target_.cluster_resource_attributes_;
}

// .flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3;
inline bool MatchingAttributes::has_execution_queue_attributes() const {
  return target_case() == kExecutionQueueAttributes;
}
inline void MatchingAttributes::set_has_execution_queue_attributes() {
  _oneof_case_[0] = kExecutionQueueAttributes;
}
inline void MatchingAttributes::clear_execution_queue_attributes() {
  if (has_execution_queue_attributes()) {
    delete target_.execution_queue_attributes_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::ExecutionQueueAttributes* MatchingAttributes::release_execution_queue_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  if (has_execution_queue_attributes()) {
    clear_has_target();
      ::flyteidl::admin::ExecutionQueueAttributes* temp = target_.execution_queue_attributes_;
    target_.execution_queue_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ExecutionQueueAttributes& MatchingAttributes::execution_queue_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  return has_execution_queue_attributes()
      ? *target_.execution_queue_attributes_
      : *reinterpret_cast< ::flyteidl::admin::ExecutionQueueAttributes*>(&::flyteidl::admin::_ExecutionQueueAttributes_default_instance_);
}
inline ::flyteidl::admin::ExecutionQueueAttributes* MatchingAttributes::mutable_execution_queue_attributes() {
  if (!has_execution_queue_attributes()) {
    clear_target();
    set_has_execution_queue_attributes();
    target_.execution_queue_attributes_ = CreateMaybeMessage< ::flyteidl::admin::ExecutionQueueAttributes >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  return target_.execution_queue_attributes_;
}

// string cluster_label = 4;
inline bool MatchingAttributes::has_cluster_label() const {
  return target_case() == kClusterLabel;
}
inline void MatchingAttributes::set_has_cluster_label() {
  _oneof_case_[0] = kClusterLabel;
}
inline void MatchingAttributes::clear_cluster_label() {
  if (has_cluster_label()) {
    target_.cluster_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& MatchingAttributes::cluster_label() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.cluster_label)
  if (has_cluster_label()) {
    return target_.cluster_label_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void MatchingAttributes::set_cluster_label(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchingAttributes.cluster_label)
  if (!has_cluster_label()) {
    clear_target();
    set_has_cluster_label();
    target_.cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.cluster_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchingAttributes.cluster_label)
}
#if LANG_CXX11
inline void MatchingAttributes::set_cluster_label(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchingAttributes.cluster_label)
  if (!has_cluster_label()) {
    clear_target();
    set_has_cluster_label();
    target_.cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.cluster_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.MatchingAttributes.cluster_label)
}
#endif
inline void MatchingAttributes::set_cluster_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_cluster_label()) {
    clear_target();
    set_has_cluster_label();
    target_.cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.cluster_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.MatchingAttributes.cluster_label)
}
inline void MatchingAttributes::set_cluster_label(const char* value, size_t size) {
  if (!has_cluster_label()) {
    clear_target();
    set_has_cluster_label();
    target_.cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.cluster_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.MatchingAttributes.cluster_label)
}
inline ::std::string* MatchingAttributes::mutable_cluster_label() {
  if (!has_cluster_label()) {
    clear_target();
    set_has_cluster_label();
    target_.cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.cluster_label)
  return target_.cluster_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingAttributes::release_cluster_label() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.cluster_label)
  if (has_cluster_label()) {
    clear_has_target();
    return target_.cluster_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::set_allocated_cluster_label(::std::string* cluster_label) {
  if (has_target()) {
    clear_target();
  }
  if (cluster_label != nullptr) {
    set_has_cluster_label();
    target_.cluster_label_.UnsafeSetDefault(cluster_label);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.cluster_label)
}

inline bool MatchingAttributes::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void MatchingAttributes::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline MatchingAttributes::TargetCase MatchingAttributes::target_case() const {
  return MatchingAttributes::TargetCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::admin::MatchableResource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::MatchableResource>() {
  return ::flyteidl::admin::MatchableResource_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto
