syntax = "proto3";

package flyteidl.admin;
option go_package = "github.com/lyft/flyteidl/gen/pb-go/flyteidl/admin";

import "flyteidl/core/literals.proto";
import "flyteidl/core/execution.proto";
import "flyteidl/admin/common.proto";
import "validate/validate.proto";

message ExecutionCreateRequest {
    Identifier id       = 1;
    ExecutionSpec spec  = 2;
}

message ExecutionCreateResponse {
    string urn  = 1;
}

message Execution {
    Identifier id               = 1;

    // The execution_id string is contructed from the 'id'.
    // If name is not available in the 'id', the system will generate a random name
    string execution_id         = 2;

    ExecutionSpec spec          = 3;
    ExecutionClosure closure    = 4;
}

message ExecutionList {
    repeated Execution executions     = 1;
}

// Input/output data can represented by actual values or a link to where it is stored
message LiteralMapBlob {
    oneof data {
        // Data in LiteralMap format
        core.LiteralMap values = 1;

        // In the event that the map is too large, we return a uri to the data
        string uri = 2;
    }
}

// Encapsultes the results of the Execution
message ExecutionClosure {
    oneof output_result {
        LiteralMapBlob outputs	= 1;

        // Error information for the Node
        core.ExecutionError error		= 2;
    }

    // Inputs computed and passed for execution.
    // computed_inputs depends on inputs in ExecutionSpec, fixed and default inputs in launch plan
    core.LiteralMap computed_inputs      = 3;

    // Phase of the executions
    core.WorkflowExecutionPhase phase                 = 4;
}

message ExecutionMetadata {
    enum ExecutionMode {
        MANUAL        = 0;
        SCHEDULED     = 1;
        SYSTEM        = 2;
    }
    ExecutionMode mode    = 1 [(validate.rules).enum.defined_only = true];

    // Identifier of the entity that triggered this execution.
    string principal      = 2;

    // Indicates the "nestedness" of this execution.
    // If a user launches a workflow execution, the default nesting is 0.
    // If this execution further launches a workflow (child workflow), the nesting level is incremented by 0 => 1
    // Generally, if workflow at nesting level k launches a workflow then the child workflow will have
    // nesting = k + 1.
    int32 nesting         = 3;
}

message ExecutionSpec {
    // Launch plan urn to be executed
    string launch_plan_urn        = 1;

    // Input values to be passed for the execution
    core.LiteralMap inputs          = 2;

    // Metadata for the execution
    ExecutionMetadata metadata    = 3;

    // List of notifications based on Execution status transitions
    repeated Notification notifications = 4;
}
