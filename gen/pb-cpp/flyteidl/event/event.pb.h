// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/event.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fevent_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fevent_2fevent_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fevent_2fevent_2eproto();
namespace flyteidl {
namespace event {
class NodeExecutionEvent;
class NodeExecutionEventDefaultTypeInternal;
extern NodeExecutionEventDefaultTypeInternal _NodeExecutionEvent_default_instance_;
class ParentNodeExecutionMetadata;
class ParentNodeExecutionMetadataDefaultTypeInternal;
extern ParentNodeExecutionMetadataDefaultTypeInternal _ParentNodeExecutionMetadata_default_instance_;
class ParentTaskExecutionMetadata;
class ParentTaskExecutionMetadataDefaultTypeInternal;
extern ParentTaskExecutionMetadataDefaultTypeInternal _ParentTaskExecutionMetadata_default_instance_;
class TaskExecutionEvent;
class TaskExecutionEventDefaultTypeInternal;
extern TaskExecutionEventDefaultTypeInternal _TaskExecutionEvent_default_instance_;
class WorkflowExecutionEvent;
class WorkflowExecutionEventDefaultTypeInternal;
extern WorkflowExecutionEventDefaultTypeInternal _WorkflowExecutionEvent_default_instance_;
class WorkflowNodeMetadata;
class WorkflowNodeMetadataDefaultTypeInternal;
extern WorkflowNodeMetadataDefaultTypeInternal _WorkflowNodeMetadata_default_instance_;
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::event::NodeExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::NodeExecutionEvent>(Arena*);
template<> ::flyteidl::event::ParentNodeExecutionMetadata* Arena::CreateMaybeMessage<::flyteidl::event::ParentNodeExecutionMetadata>(Arena*);
template<> ::flyteidl::event::ParentTaskExecutionMetadata* Arena::CreateMaybeMessage<::flyteidl::event::ParentTaskExecutionMetadata>(Arena*);
template<> ::flyteidl::event::TaskExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::TaskExecutionEvent>(Arena*);
template<> ::flyteidl::event::WorkflowExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::WorkflowExecutionEvent>(Arena*);
template<> ::flyteidl::event::WorkflowNodeMetadata* Arena::CreateMaybeMessage<::flyteidl::event::WorkflowNodeMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace event {

// ===================================================================

class WorkflowExecutionEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.WorkflowExecutionEvent) */ {
 public:
  WorkflowExecutionEvent();
  virtual ~WorkflowExecutionEvent();

  WorkflowExecutionEvent(const WorkflowExecutionEvent& from);

  inline WorkflowExecutionEvent& operator=(const WorkflowExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionEvent(WorkflowExecutionEvent&& from) noexcept
    : WorkflowExecutionEvent() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionEvent& operator=(WorkflowExecutionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecutionEvent& default_instance();

  enum OutputResultCase {
    kOutputUri = 5,
    kError = 6,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionEvent*>(
               &_WorkflowExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WorkflowExecutionEvent* other);
  friend void swap(WorkflowExecutionEvent& a, WorkflowExecutionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionEvent* New() const final {
    return CreateMaybeMessage<WorkflowExecutionEvent>(nullptr);
  }

  WorkflowExecutionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecutionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecutionEvent& from);
  void MergeFrom(const WorkflowExecutionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string producer_id = 2;
  void clear_producer_id();
  static const int kProducerIdFieldNumber = 2;
  const ::std::string& producer_id() const;
  void set_producer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_id(::std::string&& value);
  #endif
  void set_producer_id(const char* value);
  void set_producer_id(const char* value, size_t size);
  ::std::string* mutable_producer_id();
  ::std::string* release_producer_id();
  void set_allocated_producer_id(::std::string* producer_id);

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  bool has_execution_id() const;
  void clear_execution_id();
  static const int kExecutionIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_execution_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution_id();
  void set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id);

  // .google.protobuf.Timestamp occurred_at = 4;
  bool has_occurred_at() const;
  void clear_occurred_at();
  static const int kOccurredAtFieldNumber = 4;
  const ::google::protobuf::Timestamp& occurred_at() const;
  ::google::protobuf::Timestamp* release_occurred_at();
  ::google::protobuf::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at);

  // .flyteidl.core.WorkflowExecution.Phase phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::flyteidl::core::WorkflowExecution_Phase phase() const;
  void set_phase(::flyteidl::core::WorkflowExecution_Phase value);

  // string output_uri = 5;
  private:
  bool has_output_uri() const;
  public:
  void clear_output_uri();
  static const int kOutputUriFieldNumber = 5;
  const ::std::string& output_uri() const;
  void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri(::std::string&& value);
  #endif
  void set_output_uri(const char* value);
  void set_output_uri(const char* value, size_t size);
  ::std::string* mutable_output_uri();
  ::std::string* release_output_uri();
  void set_allocated_output_uri(::std::string* output_uri);

  // .flyteidl.core.ExecutionError error = 6;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 6;
  const ::flyteidl::core::ExecutionError& error() const;
  ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);

  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.WorkflowExecutionEvent)
 private:
  class HasBitSetters;
  void set_has_output_uri();
  void set_has_error();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr producer_id_;
  ::flyteidl::core::WorkflowExecutionIdentifier* execution_id_;
  ::google::protobuf::Timestamp* occurred_at_;
  int phase_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
  } output_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.NodeExecutionEvent) */ {
 public:
  NodeExecutionEvent();
  virtual ~NodeExecutionEvent();

  NodeExecutionEvent(const NodeExecutionEvent& from);

  inline NodeExecutionEvent& operator=(const NodeExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionEvent(NodeExecutionEvent&& from) noexcept
    : NodeExecutionEvent() {
    *this = ::std::move(from);
  }

  inline NodeExecutionEvent& operator=(NodeExecutionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionEvent& default_instance();

  enum OutputResultCase {
    kOutputUri = 6,
    kError = 7,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  enum TargetMetadataCase {
    kWorkflowNodeMetadata = 8,
    TARGET_METADATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionEvent*>(
               &_NodeExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeExecutionEvent* other);
  friend void swap(NodeExecutionEvent& a, NodeExecutionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionEvent* New() const final {
    return CreateMaybeMessage<NodeExecutionEvent>(nullptr);
  }

  NodeExecutionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionEvent& from);
  void MergeFrom(const NodeExecutionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string producer_id = 2;
  void clear_producer_id();
  static const int kProducerIdFieldNumber = 2;
  const ::std::string& producer_id() const;
  void set_producer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_id(::std::string&& value);
  #endif
  void set_producer_id(const char* value);
  void set_producer_id(const char* value, size_t size);
  ::std::string* mutable_producer_id();
  ::std::string* release_producer_id();
  void set_allocated_producer_id(::std::string* producer_id);

  // string input_uri = 5;
  void clear_input_uri();
  static const int kInputUriFieldNumber = 5;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // string group_id = 11;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 11;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string node_id = 12;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 12;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // string node_name = 13;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 13;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // .flyteidl.core.NodeExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::NodeExecutionIdentifier& id() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::NodeExecutionIdentifier* id);

  // .google.protobuf.Timestamp occurred_at = 4;
  bool has_occurred_at() const;
  void clear_occurred_at();
  static const int kOccurredAtFieldNumber = 4;
  const ::google::protobuf::Timestamp& occurred_at() const;
  ::google::protobuf::Timestamp* release_occurred_at();
  ::google::protobuf::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at);

  // .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9;
  bool has_parent_task_metadata() const;
  void clear_parent_task_metadata();
  static const int kParentTaskMetadataFieldNumber = 9;
  const ::flyteidl::event::ParentTaskExecutionMetadata& parent_task_metadata() const;
  ::flyteidl::event::ParentTaskExecutionMetadata* release_parent_task_metadata();
  ::flyteidl::event::ParentTaskExecutionMetadata* mutable_parent_task_metadata();
  void set_allocated_parent_task_metadata(::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata);

  // .flyteidl.event.ParentNodeExecutionMetadata parent_node_metadata = 10;
  bool has_parent_node_metadata() const;
  void clear_parent_node_metadata();
  static const int kParentNodeMetadataFieldNumber = 10;
  const ::flyteidl::event::ParentNodeExecutionMetadata& parent_node_metadata() const;
  ::flyteidl::event::ParentNodeExecutionMetadata* release_parent_node_metadata();
  ::flyteidl::event::ParentNodeExecutionMetadata* mutable_parent_node_metadata();
  void set_allocated_parent_node_metadata(::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata);

  // .flyteidl.core.NodeExecution.Phase phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::flyteidl::core::NodeExecution_Phase phase() const;
  void set_phase(::flyteidl::core::NodeExecution_Phase value);

  // string output_uri = 6;
  private:
  bool has_output_uri() const;
  public:
  void clear_output_uri();
  static const int kOutputUriFieldNumber = 6;
  const ::std::string& output_uri() const;
  void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri(::std::string&& value);
  #endif
  void set_output_uri(const char* value);
  void set_output_uri(const char* value, size_t size);
  ::std::string* mutable_output_uri();
  ::std::string* release_output_uri();
  void set_allocated_output_uri(::std::string* output_uri);

  // .flyteidl.core.ExecutionError error = 7;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 7;
  const ::flyteidl::core::ExecutionError& error() const;
  ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);

  // .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8;
  bool has_workflow_node_metadata() const;
  void clear_workflow_node_metadata();
  static const int kWorkflowNodeMetadataFieldNumber = 8;
  const ::flyteidl::event::WorkflowNodeMetadata& workflow_node_metadata() const;
  ::flyteidl::event::WorkflowNodeMetadata* release_workflow_node_metadata();
  ::flyteidl::event::WorkflowNodeMetadata* mutable_workflow_node_metadata();
  void set_allocated_workflow_node_metadata(::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata);

  void clear_output_result();
  OutputResultCase output_result_case() const;
  void clear_target_metadata();
  TargetMetadataCase target_metadata_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.NodeExecutionEvent)
 private:
  class HasBitSetters;
  void set_has_output_uri();
  void set_has_error();
  void set_has_workflow_node_metadata();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  inline bool has_target_metadata() const;
  inline void clear_has_target_metadata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr producer_id_;
  ::google::protobuf::internal::ArenaStringPtr input_uri_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::flyteidl::core::NodeExecutionIdentifier* id_;
  ::google::protobuf::Timestamp* occurred_at_;
  ::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata_;
  ::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata_;
  int phase_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
  } output_result_;
  union TargetMetadataUnion {
    TargetMetadataUnion() {}
    ::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata_;
  } target_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNodeMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.WorkflowNodeMetadata) */ {
 public:
  WorkflowNodeMetadata();
  virtual ~WorkflowNodeMetadata();

  WorkflowNodeMetadata(const WorkflowNodeMetadata& from);

  inline WorkflowNodeMetadata& operator=(const WorkflowNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowNodeMetadata(WorkflowNodeMetadata&& from) noexcept
    : WorkflowNodeMetadata() {
    *this = ::std::move(from);
  }

  inline WorkflowNodeMetadata& operator=(WorkflowNodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowNodeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const WorkflowNodeMetadata*>(
               &_WorkflowNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WorkflowNodeMetadata* other);
  friend void swap(WorkflowNodeMetadata& a, WorkflowNodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowNodeMetadata* New() const final {
    return CreateMaybeMessage<WorkflowNodeMetadata>(nullptr);
  }

  WorkflowNodeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowNodeMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowNodeMetadata& from);
  void MergeFrom(const WorkflowNodeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  bool has_execution_id() const;
  void clear_execution_id();
  static const int kExecutionIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_execution_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution_id();
  void set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.WorkflowNodeMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::WorkflowExecutionIdentifier* execution_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ParentTaskExecutionMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ParentTaskExecutionMetadata) */ {
 public:
  ParentTaskExecutionMetadata();
  virtual ~ParentTaskExecutionMetadata();

  ParentTaskExecutionMetadata(const ParentTaskExecutionMetadata& from);

  inline ParentTaskExecutionMetadata& operator=(const ParentTaskExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParentTaskExecutionMetadata(ParentTaskExecutionMetadata&& from) noexcept
    : ParentTaskExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline ParentTaskExecutionMetadata& operator=(ParentTaskExecutionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ParentTaskExecutionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParentTaskExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const ParentTaskExecutionMetadata*>(
               &_ParentTaskExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ParentTaskExecutionMetadata* other);
  friend void swap(ParentTaskExecutionMetadata& a, ParentTaskExecutionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParentTaskExecutionMetadata* New() const final {
    return CreateMaybeMessage<ParentTaskExecutionMetadata>(nullptr);
  }

  ParentTaskExecutionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParentTaskExecutionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParentTaskExecutionMetadata& from);
  void MergeFrom(const ParentTaskExecutionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentTaskExecutionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.ParentTaskExecutionMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ParentNodeExecutionMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ParentNodeExecutionMetadata) */ {
 public:
  ParentNodeExecutionMetadata();
  virtual ~ParentNodeExecutionMetadata();

  ParentNodeExecutionMetadata(const ParentNodeExecutionMetadata& from);

  inline ParentNodeExecutionMetadata& operator=(const ParentNodeExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParentNodeExecutionMetadata(ParentNodeExecutionMetadata&& from) noexcept
    : ParentNodeExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline ParentNodeExecutionMetadata& operator=(ParentNodeExecutionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ParentNodeExecutionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParentNodeExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const ParentNodeExecutionMetadata*>(
               &_ParentNodeExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ParentNodeExecutionMetadata* other);
  friend void swap(ParentNodeExecutionMetadata& a, ParentNodeExecutionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParentNodeExecutionMetadata* New() const final {
    return CreateMaybeMessage<ParentNodeExecutionMetadata>(nullptr);
  }

  ParentNodeExecutionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParentNodeExecutionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParentNodeExecutionMetadata& from);
  void MergeFrom(const ParentNodeExecutionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentNodeExecutionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.ParentNodeExecutionMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.TaskExecutionEvent) */ {
 public:
  TaskExecutionEvent();
  virtual ~TaskExecutionEvent();

  TaskExecutionEvent(const TaskExecutionEvent& from);

  inline TaskExecutionEvent& operator=(const TaskExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionEvent(TaskExecutionEvent&& from) noexcept
    : TaskExecutionEvent() {
    *this = ::std::move(from);
  }

  inline TaskExecutionEvent& operator=(TaskExecutionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionEvent& default_instance();

  enum OutputResultCase {
    kOutputUri = 9,
    kError = 10,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionEvent*>(
               &_TaskExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TaskExecutionEvent* other);
  friend void swap(TaskExecutionEvent& a, TaskExecutionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionEvent* New() const final {
    return CreateMaybeMessage<TaskExecutionEvent>(nullptr);
  }

  TaskExecutionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionEvent& from);
  void MergeFrom(const TaskExecutionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.TaskLog logs = 6;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 6;
  ::flyteidl::core::TaskLog* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >*
      mutable_logs();
  const ::flyteidl::core::TaskLog& logs(int index) const;
  ::flyteidl::core::TaskLog* add_logs();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >&
      logs() const;

  // string producer_id = 5;
  void clear_producer_id();
  static const int kProducerIdFieldNumber = 5;
  const ::std::string& producer_id() const;
  void set_producer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_id(::std::string&& value);
  #endif
  void set_producer_id(const char* value);
  void set_producer_id(const char* value, size_t size);
  ::std::string* mutable_producer_id();
  ::std::string* release_producer_id();
  void set_allocated_producer_id(::std::string* producer_id);

  // string input_uri = 8;
  void clear_input_uri();
  static const int kInputUriFieldNumber = 8;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // .flyteidl.core.Identifier task_id = 1;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& task_id() const;
  ::flyteidl::core::Identifier* release_task_id();
  ::flyteidl::core::Identifier* mutable_task_id();
  void set_allocated_task_id(::flyteidl::core::Identifier* task_id);

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;
  bool has_parent_node_execution_id() const;
  void clear_parent_node_execution_id();
  static const int kParentNodeExecutionIdFieldNumber = 2;
  const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_parent_node_execution_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_parent_node_execution_id();
  void set_allocated_parent_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id);

  // .google.protobuf.Timestamp occurred_at = 7;
  bool has_occurred_at() const;
  void clear_occurred_at();
  static const int kOccurredAtFieldNumber = 7;
  const ::google::protobuf::Timestamp& occurred_at() const;
  ::google::protobuf::Timestamp* release_occurred_at();
  ::google::protobuf::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at);

  // .google.protobuf.Struct custom_info = 11;
  bool has_custom_info() const;
  void clear_custom_info();
  static const int kCustomInfoFieldNumber = 11;
  const ::google::protobuf::Struct& custom_info() const;
  ::google::protobuf::Struct* release_custom_info();
  ::google::protobuf::Struct* mutable_custom_info();
  void set_allocated_custom_info(::google::protobuf::Struct* custom_info);

  // uint32 retry_attempt = 3;
  void clear_retry_attempt();
  static const int kRetryAttemptFieldNumber = 3;
  ::google::protobuf::uint32 retry_attempt() const;
  void set_retry_attempt(::google::protobuf::uint32 value);

  // .flyteidl.core.TaskExecution.Phase phase = 4;
  void clear_phase();
  static const int kPhaseFieldNumber = 4;
  ::flyteidl::core::TaskExecution_Phase phase() const;
  void set_phase(::flyteidl::core::TaskExecution_Phase value);

  // uint32 phase_version = 12;
  void clear_phase_version();
  static const int kPhaseVersionFieldNumber = 12;
  ::google::protobuf::uint32 phase_version() const;
  void set_phase_version(::google::protobuf::uint32 value);

  // string output_uri = 9;
  private:
  bool has_output_uri() const;
  public:
  void clear_output_uri();
  static const int kOutputUriFieldNumber = 9;
  const ::std::string& output_uri() const;
  void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri(::std::string&& value);
  #endif
  void set_output_uri(const char* value);
  void set_output_uri(const char* value, size_t size);
  ::std::string* mutable_output_uri();
  ::std::string* release_output_uri();
  void set_allocated_output_uri(::std::string* output_uri);

  // .flyteidl.core.ExecutionError error = 10;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 10;
  const ::flyteidl::core::ExecutionError& error() const;
  ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);

  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.TaskExecutionEvent)
 private:
  class HasBitSetters;
  void set_has_output_uri();
  void set_has_error();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog > logs_;
  ::google::protobuf::internal::ArenaStringPtr producer_id_;
  ::google::protobuf::internal::ArenaStringPtr input_uri_;
  ::flyteidl::core::Identifier* task_id_;
  ::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id_;
  ::google::protobuf::Timestamp* occurred_at_;
  ::google::protobuf::Struct* custom_info_;
  ::google::protobuf::uint32 retry_attempt_;
  int phase_;
  ::google::protobuf::uint32 phase_version_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
  } output_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowExecutionEvent

// .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
inline bool WorkflowExecutionEvent::has_execution_id() const {
  return this != internal_default_instance() && execution_id_ != nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowExecutionEvent::execution_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = execution_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionEvent::release_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.execution_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionEvent::mutable_execution_id() {
  
  if (execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.execution_id)
  return execution_id_;
}
inline void WorkflowExecutionEvent::set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_id_);
  }
  if (execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_id, submessage_arena);
    }
    
  } else {
    
  }
  execution_id_ = execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.execution_id)
}

// string producer_id = 2;
inline void WorkflowExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkflowExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.producer_id)
  return producer_id_.GetNoArena();
}
inline void WorkflowExecutionEvent::set_producer_id(const ::std::string& value) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
#if LANG_CXX11
inline void WorkflowExecutionEvent::set_producer_id(::std::string&& value) {
  
  producer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
#endif
inline void WorkflowExecutionEvent::set_producer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
inline void WorkflowExecutionEvent::set_producer_id(const char* value, size_t size) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
inline ::std::string* WorkflowExecutionEvent::mutable_producer_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.producer_id)
  return producer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.producer_id)
  
  return producer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowExecutionEvent::set_allocated_producer_id(::std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.producer_id)
}

// .flyteidl.core.WorkflowExecution.Phase phase = 3;
inline void WorkflowExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::WorkflowExecution_Phase WorkflowExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.phase)
  return static_cast< ::flyteidl::core::WorkflowExecution_Phase >(phase_);
}
inline void WorkflowExecutionEvent::set_phase(::flyteidl::core::WorkflowExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.phase)
}

// .google.protobuf.Timestamp occurred_at = 4;
inline bool WorkflowExecutionEvent::has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& WorkflowExecutionEvent::occurred_at() const {
  const ::google::protobuf::Timestamp* p = occurred_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* WorkflowExecutionEvent::release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  
  ::google::protobuf::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* WorkflowExecutionEvent::mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    occurred_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  return occurred_at_;
}
inline void WorkflowExecutionEvent::set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.occurred_at)
}

// string output_uri = 5;
inline bool WorkflowExecutionEvent::has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline void WorkflowExecutionEvent::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void WorkflowExecutionEvent::clear_output_uri() {
  if (has_output_uri()) {
    output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& WorkflowExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (has_output_uri()) {
    return output_result_.output_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void WorkflowExecutionEvent::set_output_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
#if LANG_CXX11
inline void WorkflowExecutionEvent::set_output_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
#endif
inline void WorkflowExecutionEvent::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
inline void WorkflowExecutionEvent::set_output_uri(const char* value, size_t size) {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
inline ::std::string* WorkflowExecutionEvent::mutable_output_uri() {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.output_uri)
  return output_result_.output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void WorkflowExecutionEvent::set_allocated_output_uri(::std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 6;
inline bool WorkflowExecutionEvent::has_error() const {
  return output_result_case() == kError;
}
inline void WorkflowExecutionEvent::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* WorkflowExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.error)
  if (has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& WorkflowExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::flyteidl::core::ExecutionError*>(&::flyteidl::core::_ExecutionError_default_instance_);
}
inline ::flyteidl::core::ExecutionError* WorkflowExecutionEvent::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.error)
  return output_result_.error_;
}

inline bool WorkflowExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void WorkflowExecutionEvent::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline WorkflowExecutionEvent::OutputResultCase WorkflowExecutionEvent::output_result_case() const {
  return WorkflowExecutionEvent::OutputResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NodeExecutionEvent

// .flyteidl.core.NodeExecutionIdentifier id = 1;
inline bool NodeExecutionEvent::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& NodeExecutionEvent::id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier*>(
      &::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* NodeExecutionEvent::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* NodeExecutionEvent::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.id)
  return id_;
}
inline void NodeExecutionEvent::set_allocated_id(::flyteidl::core::NodeExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.id)
}

// string producer_id = 2;
inline void NodeExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.producer_id)
  return producer_id_.GetNoArena();
}
inline void NodeExecutionEvent::set_producer_id(const ::std::string& value) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.producer_id)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_producer_id(::std::string&& value) {
  
  producer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.producer_id)
}
#endif
inline void NodeExecutionEvent::set_producer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.producer_id)
}
inline void NodeExecutionEvent::set_producer_id(const char* value, size_t size) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.producer_id)
}
inline ::std::string* NodeExecutionEvent::mutable_producer_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.producer_id)
  return producer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.producer_id)
  
  return producer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_producer_id(::std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.producer_id)
}

// .flyteidl.core.NodeExecution.Phase phase = 3;
inline void NodeExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::NodeExecution_Phase NodeExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.phase)
  return static_cast< ::flyteidl::core::NodeExecution_Phase >(phase_);
}
inline void NodeExecutionEvent::set_phase(::flyteidl::core::NodeExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.phase)
}

// .google.protobuf.Timestamp occurred_at = 4;
inline bool NodeExecutionEvent::has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& NodeExecutionEvent::occurred_at() const {
  const ::google::protobuf::Timestamp* p = occurred_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.occurred_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NodeExecutionEvent::release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.occurred_at)
  
  ::google::protobuf::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* NodeExecutionEvent::mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    occurred_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.occurred_at)
  return occurred_at_;
}
inline void NodeExecutionEvent::set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.occurred_at)
}

// string input_uri = 5;
inline void NodeExecutionEvent::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::input_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.input_uri)
  return input_uri_.GetNoArena();
}
inline void NodeExecutionEvent::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.input_uri)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.input_uri)
}
#endif
inline void NodeExecutionEvent::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.input_uri)
}
inline void NodeExecutionEvent::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.input_uri)
}
inline ::std::string* NodeExecutionEvent::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_input_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != nullptr) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.input_uri)
}

// string output_uri = 6;
inline bool NodeExecutionEvent::has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline void NodeExecutionEvent::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void NodeExecutionEvent::clear_output_uri() {
  if (has_output_uri()) {
    output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& NodeExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.output_uri)
  if (has_output_uri()) {
    return output_result_.output_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void NodeExecutionEvent::set_output_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.output_uri)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_output_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.output_uri)
}
#endif
inline void NodeExecutionEvent::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.output_uri)
}
inline void NodeExecutionEvent::set_output_uri(const char* value, size_t size) {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.output_uri)
}
inline ::std::string* NodeExecutionEvent::mutable_output_uri() {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.output_uri)
  return output_result_.output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.output_uri)
  if (has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void NodeExecutionEvent::set_allocated_output_uri(::std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 7;
inline bool NodeExecutionEvent::has_error() const {
  return output_result_case() == kError;
}
inline void NodeExecutionEvent::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* NodeExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.error)
  if (has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& NodeExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::flyteidl::core::ExecutionError*>(&::flyteidl::core::_ExecutionError_default_instance_);
}
inline ::flyteidl::core::ExecutionError* NodeExecutionEvent::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.error)
  return output_result_.error_;
}

// .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8;
inline bool NodeExecutionEvent::has_workflow_node_metadata() const {
  return target_metadata_case() == kWorkflowNodeMetadata;
}
inline void NodeExecutionEvent::set_has_workflow_node_metadata() {
  _oneof_case_[1] = kWorkflowNodeMetadata;
}
inline void NodeExecutionEvent::clear_workflow_node_metadata() {
  if (has_workflow_node_metadata()) {
    delete target_metadata_.workflow_node_metadata_;
    clear_has_target_metadata();
  }
}
inline ::flyteidl::event::WorkflowNodeMetadata* NodeExecutionEvent::release_workflow_node_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  if (has_workflow_node_metadata()) {
    clear_has_target_metadata();
      ::flyteidl::event::WorkflowNodeMetadata* temp = target_metadata_.workflow_node_metadata_;
    target_metadata_.workflow_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::WorkflowNodeMetadata& NodeExecutionEvent::workflow_node_metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  return has_workflow_node_metadata()
      ? *target_metadata_.workflow_node_metadata_
      : *reinterpret_cast< ::flyteidl::event::WorkflowNodeMetadata*>(&::flyteidl::event::_WorkflowNodeMetadata_default_instance_);
}
inline ::flyteidl::event::WorkflowNodeMetadata* NodeExecutionEvent::mutable_workflow_node_metadata() {
  if (!has_workflow_node_metadata()) {
    clear_target_metadata();
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = CreateMaybeMessage< ::flyteidl::event::WorkflowNodeMetadata >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  return target_metadata_.workflow_node_metadata_;
}

// .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9;
inline bool NodeExecutionEvent::has_parent_task_metadata() const {
  return this != internal_default_instance() && parent_task_metadata_ != nullptr;
}
inline void NodeExecutionEvent::clear_parent_task_metadata() {
  if (GetArenaNoVirtual() == nullptr && parent_task_metadata_ != nullptr) {
    delete parent_task_metadata_;
  }
  parent_task_metadata_ = nullptr;
}
inline const ::flyteidl::event::ParentTaskExecutionMetadata& NodeExecutionEvent::parent_task_metadata() const {
  const ::flyteidl::event::ParentTaskExecutionMetadata* p = parent_task_metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::ParentTaskExecutionMetadata*>(
      &::flyteidl::event::_ParentTaskExecutionMetadata_default_instance_);
}
inline ::flyteidl::event::ParentTaskExecutionMetadata* NodeExecutionEvent::release_parent_task_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  
  ::flyteidl::event::ParentTaskExecutionMetadata* temp = parent_task_metadata_;
  parent_task_metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::ParentTaskExecutionMetadata* NodeExecutionEvent::mutable_parent_task_metadata() {
  
  if (parent_task_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::ParentTaskExecutionMetadata>(GetArenaNoVirtual());
    parent_task_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  return parent_task_metadata_;
}
inline void NodeExecutionEvent::set_allocated_parent_task_metadata(::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_task_metadata_;
  }
  if (parent_task_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_task_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_task_metadata, submessage_arena);
    }
    
  } else {
    
  }
  parent_task_metadata_ = parent_task_metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
}

// .flyteidl.event.ParentNodeExecutionMetadata parent_node_metadata = 10;
inline bool NodeExecutionEvent::has_parent_node_metadata() const {
  return this != internal_default_instance() && parent_node_metadata_ != nullptr;
}
inline void NodeExecutionEvent::clear_parent_node_metadata() {
  if (GetArenaNoVirtual() == nullptr && parent_node_metadata_ != nullptr) {
    delete parent_node_metadata_;
  }
  parent_node_metadata_ = nullptr;
}
inline const ::flyteidl::event::ParentNodeExecutionMetadata& NodeExecutionEvent::parent_node_metadata() const {
  const ::flyteidl::event::ParentNodeExecutionMetadata* p = parent_node_metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::ParentNodeExecutionMetadata*>(
      &::flyteidl::event::_ParentNodeExecutionMetadata_default_instance_);
}
inline ::flyteidl::event::ParentNodeExecutionMetadata* NodeExecutionEvent::release_parent_node_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  
  ::flyteidl::event::ParentNodeExecutionMetadata* temp = parent_node_metadata_;
  parent_node_metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::ParentNodeExecutionMetadata* NodeExecutionEvent::mutable_parent_node_metadata() {
  
  if (parent_node_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::ParentNodeExecutionMetadata>(GetArenaNoVirtual());
    parent_node_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  return parent_node_metadata_;
}
inline void NodeExecutionEvent::set_allocated_parent_node_metadata(::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_node_metadata_;
  }
  if (parent_node_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_node_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_node_metadata, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_metadata_ = parent_node_metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
}

// string group_id = 11;
inline void NodeExecutionEvent::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::group_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.group_id)
  return group_id_.GetNoArena();
}
inline void NodeExecutionEvent::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.group_id)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.group_id)
}
#endif
inline void NodeExecutionEvent::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.group_id)
}
inline void NodeExecutionEvent::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.group_id)
}
inline ::std::string* NodeExecutionEvent::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_group_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.group_id)
}

// string node_id = 12;
inline void NodeExecutionEvent::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.node_id)
  return node_id_.GetNoArena();
}
inline void NodeExecutionEvent::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.node_id)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_node_id(::std::string&& value) {
  
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.node_id)
}
#endif
inline void NodeExecutionEvent::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.node_id)
}
inline void NodeExecutionEvent::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.node_id)
}
inline ::std::string* NodeExecutionEvent::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_node_id(::std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.node_id)
}

// string node_name = 13;
inline void NodeExecutionEvent::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::node_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.node_name)
  return node_name_.GetNoArena();
}
inline void NodeExecutionEvent::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.node_name)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.node_name)
}
#endif
inline void NodeExecutionEvent::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.node_name)
}
inline void NodeExecutionEvent::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.node_name)
}
inline ::std::string* NodeExecutionEvent::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_node_name() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_node_name(::std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.node_name)
}

inline bool NodeExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void NodeExecutionEvent::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline bool NodeExecutionEvent::has_target_metadata() const {
  return target_metadata_case() != TARGET_METADATA_NOT_SET;
}
inline void NodeExecutionEvent::clear_has_target_metadata() {
  _oneof_case_[1] = TARGET_METADATA_NOT_SET;
}
inline NodeExecutionEvent::OutputResultCase NodeExecutionEvent::output_result_case() const {
  return NodeExecutionEvent::OutputResultCase(_oneof_case_[0]);
}
inline NodeExecutionEvent::TargetMetadataCase NodeExecutionEvent::target_metadata_case() const {
  return NodeExecutionEvent::TargetMetadataCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// WorkflowNodeMetadata

// .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
inline bool WorkflowNodeMetadata::has_execution_id() const {
  return this != internal_default_instance() && execution_id_ != nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowNodeMetadata::execution_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = execution_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowNodeMetadata.execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::release_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowNodeMetadata.execution_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::mutable_execution_id() {
  
  if (execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowNodeMetadata.execution_id)
  return execution_id_;
}
inline void WorkflowNodeMetadata::set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_id_);
  }
  if (execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_id, submessage_arena);
    }
    
  } else {
    
  }
  execution_id_ = execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowNodeMetadata.execution_id)
}

// -------------------------------------------------------------------

// ParentTaskExecutionMetadata

// .flyteidl.core.TaskExecutionIdentifier id = 1;
inline bool ParentTaskExecutionMetadata::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::TaskExecutionIdentifier& ParentTaskExecutionMetadata::id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.ParentTaskExecutionMetadata.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier*>(
      &::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::TaskExecutionIdentifier* ParentTaskExecutionMetadata::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ParentTaskExecutionMetadata.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* ParentTaskExecutionMetadata::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ParentTaskExecutionMetadata.id)
  return id_;
}
inline void ParentTaskExecutionMetadata::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ParentTaskExecutionMetadata.id)
}

// -------------------------------------------------------------------

// ParentNodeExecutionMetadata

// string id = 1;
inline void ParentNodeExecutionMetadata::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParentNodeExecutionMetadata::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ParentNodeExecutionMetadata.id)
  return id_.GetNoArena();
}
inline void ParentNodeExecutionMetadata::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ParentNodeExecutionMetadata.id)
}
#if LANG_CXX11
inline void ParentNodeExecutionMetadata::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.ParentNodeExecutionMetadata.id)
}
#endif
inline void ParentNodeExecutionMetadata::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.ParentNodeExecutionMetadata.id)
}
inline void ParentNodeExecutionMetadata::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.ParentNodeExecutionMetadata.id)
}
inline ::std::string* ParentNodeExecutionMetadata::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ParentNodeExecutionMetadata.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParentNodeExecutionMetadata::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ParentNodeExecutionMetadata.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParentNodeExecutionMetadata::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ParentNodeExecutionMetadata.id)
}

// -------------------------------------------------------------------

// TaskExecutionEvent

// .flyteidl.core.Identifier task_id = 1;
inline bool TaskExecutionEvent::has_task_id() const {
  return this != internal_default_instance() && task_id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& TaskExecutionEvent::task_id() const {
  const ::flyteidl::core::Identifier* p = task_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.task_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* TaskExecutionEvent::release_task_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.task_id)
  
  ::flyteidl::core::Identifier* temp = task_id_;
  task_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* TaskExecutionEvent::mutable_task_id() {
  
  if (task_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    task_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.task_id)
  return task_id_;
}
inline void TaskExecutionEvent::set_allocated_task_id(::flyteidl::core::Identifier* task_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.task_id)
}

// .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;
inline bool TaskExecutionEvent::has_parent_node_execution_id() const {
  return this != internal_default_instance() && parent_node_execution_id_ != nullptr;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionEvent::parent_node_execution_id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = parent_node_execution_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier*>(
      &::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionEvent::release_parent_node_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = parent_node_execution_id_;
  parent_node_execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionEvent::mutable_parent_node_execution_id() {
  
  if (parent_node_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    parent_node_execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  return parent_node_execution_id_;
}
inline void TaskExecutionEvent::set_allocated_parent_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_node_execution_id_);
  }
  if (parent_node_execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_node_execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_node_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_execution_id_ = parent_node_execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
}

// uint32 retry_attempt = 3;
inline void TaskExecutionEvent::clear_retry_attempt() {
  retry_attempt_ = 0u;
}
inline ::google::protobuf::uint32 TaskExecutionEvent::retry_attempt() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.retry_attempt)
  return retry_attempt_;
}
inline void TaskExecutionEvent::set_retry_attempt(::google::protobuf::uint32 value) {
  
  retry_attempt_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.retry_attempt)
}

// .flyteidl.core.TaskExecution.Phase phase = 4;
inline void TaskExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::TaskExecution_Phase TaskExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.phase)
  return static_cast< ::flyteidl::core::TaskExecution_Phase >(phase_);
}
inline void TaskExecutionEvent::set_phase(::flyteidl::core::TaskExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.phase)
}

// string producer_id = 5;
inline void TaskExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.producer_id)
  return producer_id_.GetNoArena();
}
inline void TaskExecutionEvent::set_producer_id(const ::std::string& value) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.producer_id)
}
#if LANG_CXX11
inline void TaskExecutionEvent::set_producer_id(::std::string&& value) {
  
  producer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionEvent.producer_id)
}
#endif
inline void TaskExecutionEvent::set_producer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionEvent.producer_id)
}
inline void TaskExecutionEvent::set_producer_id(const char* value, size_t size) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionEvent.producer_id)
}
inline ::std::string* TaskExecutionEvent::mutable_producer_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.producer_id)
  return producer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.producer_id)
  
  return producer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionEvent::set_allocated_producer_id(::std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.producer_id)
}

// repeated .flyteidl.core.TaskLog logs = 6;
inline int TaskExecutionEvent::logs_size() const {
  return logs_.size();
}
inline ::flyteidl::core::TaskLog* TaskExecutionEvent::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.logs)
  return logs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >*
TaskExecutionEvent::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.TaskExecutionEvent.logs)
  return &logs_;
}
inline const ::flyteidl::core::TaskLog& TaskExecutionEvent::logs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.logs)
  return logs_.Get(index);
}
inline ::flyteidl::core::TaskLog* TaskExecutionEvent::add_logs() {
  // @@protoc_insertion_point(field_add:flyteidl.event.TaskExecutionEvent.logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >&
TaskExecutionEvent::logs() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.TaskExecutionEvent.logs)
  return logs_;
}

// .google.protobuf.Timestamp occurred_at = 7;
inline bool TaskExecutionEvent::has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& TaskExecutionEvent::occurred_at() const {
  const ::google::protobuf::Timestamp* p = occurred_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.occurred_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TaskExecutionEvent::release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.occurred_at)
  
  ::google::protobuf::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TaskExecutionEvent::mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    occurred_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.occurred_at)
  return occurred_at_;
}
inline void TaskExecutionEvent::set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.occurred_at)
}

// string input_uri = 8;
inline void TaskExecutionEvent::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionEvent::input_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.input_uri)
  return input_uri_.GetNoArena();
}
inline void TaskExecutionEvent::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.input_uri)
}
#if LANG_CXX11
inline void TaskExecutionEvent::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionEvent.input_uri)
}
#endif
inline void TaskExecutionEvent::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionEvent.input_uri)
}
inline void TaskExecutionEvent::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionEvent.input_uri)
}
inline ::std::string* TaskExecutionEvent::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEvent::release_input_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionEvent::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != nullptr) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.input_uri)
}

// string output_uri = 9;
inline bool TaskExecutionEvent::has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline void TaskExecutionEvent::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void TaskExecutionEvent::clear_output_uri() {
  if (has_output_uri()) {
    output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& TaskExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.output_uri)
  if (has_output_uri()) {
    return output_result_.output_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TaskExecutionEvent::set_output_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.output_uri)
}
#if LANG_CXX11
inline void TaskExecutionEvent::set_output_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionEvent.output_uri)
}
#endif
inline void TaskExecutionEvent::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionEvent.output_uri)
}
inline void TaskExecutionEvent::set_output_uri(const char* value, size_t size) {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionEvent.output_uri)
}
inline ::std::string* TaskExecutionEvent::mutable_output_uri() {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.output_uri)
  return output_result_.output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.output_uri)
  if (has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TaskExecutionEvent::set_allocated_output_uri(::std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 10;
inline bool TaskExecutionEvent::has_error() const {
  return output_result_case() == kError;
}
inline void TaskExecutionEvent::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* TaskExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.error)
  if (has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& TaskExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::flyteidl::core::ExecutionError*>(&::flyteidl::core::_ExecutionError_default_instance_);
}
inline ::flyteidl::core::ExecutionError* TaskExecutionEvent::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.error)
  return output_result_.error_;
}

// .google.protobuf.Struct custom_info = 11;
inline bool TaskExecutionEvent::has_custom_info() const {
  return this != internal_default_instance() && custom_info_ != nullptr;
}
inline const ::google::protobuf::Struct& TaskExecutionEvent::custom_info() const {
  const ::google::protobuf::Struct* p = custom_info_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.custom_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* TaskExecutionEvent::release_custom_info() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.custom_info)
  
  ::google::protobuf::Struct* temp = custom_info_;
  custom_info_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* TaskExecutionEvent::mutable_custom_info() {
  
  if (custom_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    custom_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.custom_info)
  return custom_info_;
}
inline void TaskExecutionEvent::set_allocated_custom_info(::google::protobuf::Struct* custom_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(custom_info_);
  }
  if (custom_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(custom_info)->GetArena();
    if (message_arena != submessage_arena) {
      custom_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_info, submessage_arena);
    }
    
  } else {
    
  }
  custom_info_ = custom_info;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.custom_info)
}

// uint32 phase_version = 12;
inline void TaskExecutionEvent::clear_phase_version() {
  phase_version_ = 0u;
}
inline ::google::protobuf::uint32 TaskExecutionEvent::phase_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.phase_version)
  return phase_version_;
}
inline void TaskExecutionEvent::set_phase_version(::google::protobuf::uint32 value) {
  
  phase_version_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.phase_version)
}

inline bool TaskExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void TaskExecutionEvent::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline TaskExecutionEvent::OutputResultCase TaskExecutionEvent::output_result_case() const {
  return TaskExecutionEvent::OutputResultCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto
