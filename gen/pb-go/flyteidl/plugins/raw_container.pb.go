// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/raw_container.proto

package plugins

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CoPilot_MetadataFormat int32

const (
	CoPilot_JSON  CoPilot_MetadataFormat = 0
	CoPilot_PROTO CoPilot_MetadataFormat = 1
	CoPilot_YAML  CoPilot_MetadataFormat = 2
)

var CoPilot_MetadataFormat_name = map[int32]string{
	0: "JSON",
	1: "PROTO",
	2: "YAML",
}

var CoPilot_MetadataFormat_value = map[string]int32{
	"JSON":  0,
	"PROTO": 1,
	"YAML":  2,
}

func (x CoPilot_MetadataFormat) String() string {
	return proto.EnumName(CoPilot_MetadataFormat_name, int32(x))
}

func (CoPilot_MetadataFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aa9a2ab24b00eebe, []int{0, 0}
}

// This configuration allows executing raw containers in Flyte.
// We are starting this as a plugin, but after the container within Pod ordering stabilizes, we can move this
// into the default task definition.
type CoPilot struct {
	InputPath            string                 `protobuf:"bytes,1,opt,name=input_path,json=inputPath,proto3" json:"input_path,omitempty"`
	OutputPath           uint32                 `protobuf:"varint,2,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	Format               CoPilot_MetadataFormat `protobuf:"varint,3,opt,name=format,proto3,enum=flyteidl.plugins.CoPilot_MetadataFormat" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CoPilot) Reset()         { *m = CoPilot{} }
func (m *CoPilot) String() string { return proto.CompactTextString(m) }
func (*CoPilot) ProtoMessage()    {}
func (*CoPilot) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa9a2ab24b00eebe, []int{0}
}

func (m *CoPilot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoPilot.Unmarshal(m, b)
}
func (m *CoPilot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoPilot.Marshal(b, m, deterministic)
}
func (m *CoPilot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoPilot.Merge(m, src)
}
func (m *CoPilot) XXX_Size() int {
	return xxx_messageInfo_CoPilot.Size(m)
}
func (m *CoPilot) XXX_DiscardUnknown() {
	xxx_messageInfo_CoPilot.DiscardUnknown(m)
}

var xxx_messageInfo_CoPilot proto.InternalMessageInfo

func (m *CoPilot) GetInputPath() string {
	if m != nil {
		return m.InputPath
	}
	return ""
}

func (m *CoPilot) GetOutputPath() uint32 {
	if m != nil {
		return m.OutputPath
	}
	return 0
}

func (m *CoPilot) GetFormat() CoPilot_MetadataFormat {
	if m != nil {
		return m.Format
	}
	return CoPilot_JSON
}

func init() {
	proto.RegisterEnum("flyteidl.plugins.CoPilot_MetadataFormat", CoPilot_MetadataFormat_name, CoPilot_MetadataFormat_value)
	proto.RegisterType((*CoPilot)(nil), "flyteidl.plugins.CoPilot")
}

func init() {
	proto.RegisterFile("flyteidl/plugins/raw_container.proto", fileDescriptor_aa9a2ab24b00eebe)
}

var fileDescriptor_aa9a2ab24b00eebe = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0x47, 0xdd, 0xaa, 0xd5, 0x8c, 0x58, 0xc2, 0x9e, 0x7a, 0x11, 0x43, 0xf1, 0x90, 0x8b, 0xbb,
	0x60, 0xf1, 0xee, 0x1f, 0xf0, 0x20, 0xd6, 0x84, 0xe8, 0x45, 0x2f, 0x65, 0xd2, 0xe6, 0xcf, 0xc2,
	0x76, 0x67, 0x89, 0x13, 0xa4, 0xdf, 0xcd, 0x0f, 0x27, 0xc6, 0x58, 0x30, 0xd7, 0x37, 0x6f, 0xf8,
	0xc1, 0x83, 0x8b, 0xd2, 0x6e, 0xb9, 0x30, 0x6b, 0xab, 0xbd, 0x6d, 0x2b, 0xe3, 0x3e, 0x74, 0x83,
	0x9f, 0xcb, 0x15, 0x39, 0x46, 0xe3, 0x8a, 0x46, 0xf9, 0x86, 0x98, 0x64, 0xf8, 0x67, 0xa9, 0xde,
	0x9a, 0x7d, 0x09, 0x38, 0xba, 0xa7, 0xd4, 0x58, 0x62, 0x79, 0x06, 0x60, 0x9c, 0x6f, 0x79, 0xe9,
	0x91, 0xeb, 0xa9, 0x88, 0x44, 0x1c, 0x64, 0x41, 0x47, 0x52, 0xe4, 0x5a, 0x9e, 0xc3, 0x09, 0xb5,
	0xbc, 0xbb, 0x8f, 0x22, 0x11, 0x9f, 0x66, 0xf0, 0x8b, 0x3a, 0xe1, 0x06, 0xc6, 0x25, 0x35, 0x1b,
	0xe4, 0xe9, 0x7e, 0x24, 0xe2, 0xc9, 0x55, 0xac, 0x86, 0x73, 0xaa, 0x9f, 0x52, 0x8b, 0x82, 0x71,
	0x8d, 0x8c, 0x0f, 0x9d, 0x9f, 0xf5, 0x7f, 0x33, 0x0d, 0x93, 0xff, 0x17, 0x79, 0x0c, 0x07, 0x8f,
	0x2f, 0xc9, 0x73, 0xb8, 0x27, 0x03, 0x38, 0x4c, 0xb3, 0xe4, 0x35, 0x09, 0xc5, 0x0f, 0x7c, 0xbb,
	0x5d, 0x3c, 0x85, 0xa3, 0xbb, 0xeb, 0xf7, 0x79, 0x65, 0xb8, 0x6e, 0x73, 0xb5, 0xa2, 0x8d, 0xb6,
	0xdb, 0x92, 0xf5, 0x2e, 0x44, 0x55, 0x38, 0xed, 0xf3, 0xcb, 0x8a, 0xf4, 0xb0, 0x4d, 0x3e, 0xee,
	0x72, 0xcc, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x2f, 0x94, 0x67, 0x36, 0x01, 0x00, 0x00,
}
