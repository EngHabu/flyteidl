// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/core/workflow.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Defines a condition and the execution unit that should be executed if the condition is satisfied.
type IfBlock struct {
	Condition            *BooleanExpression `protobuf:"bytes,1,opt,name=condition" json:"condition,omitempty"`
	ThenNode             *Node              `protobuf:"bytes,2,opt,name=then_node,json=thenNode" json:"then_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IfBlock) Reset()         { *m = IfBlock{} }
func (m *IfBlock) String() string { return proto.CompactTextString(m) }
func (*IfBlock) ProtoMessage()    {}
func (*IfBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{0}
}
func (m *IfBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IfBlock.Unmarshal(m, b)
}
func (m *IfBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IfBlock.Marshal(b, m, deterministic)
}
func (dst *IfBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IfBlock.Merge(dst, src)
}
func (m *IfBlock) XXX_Size() int {
	return xxx_messageInfo_IfBlock.Size(m)
}
func (m *IfBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_IfBlock.DiscardUnknown(m)
}

var xxx_messageInfo_IfBlock proto.InternalMessageInfo

func (m *IfBlock) GetCondition() *BooleanExpression {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *IfBlock) GetThenNode() *Node {
	if m != nil {
		return m.ThenNode
	}
	return nil
}

// Defines a series of if/else blocks. The first branch whose condition evaluates to true is the one to execute.
// If no conditions were satisfied, the else_node will be executed.
type IfElseBlock struct {
	// +required. First condition to evaluate.
	Case *IfBlock `protobuf:"bytes,1,opt,name=case" json:"case,omitempty"`
	// +optional. Additional branches to evaluate.
	Other []*IfBlock `protobuf:"bytes,2,rep,name=other" json:"other,omitempty"`
	// +required.
	//
	// Types that are valid to be assigned to Default:
	//	*IfElseBlock_ElseNode
	//	*IfElseBlock_Error
	Default              isIfElseBlock_Default `protobuf_oneof:"default"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IfElseBlock) Reset()         { *m = IfElseBlock{} }
func (m *IfElseBlock) String() string { return proto.CompactTextString(m) }
func (*IfElseBlock) ProtoMessage()    {}
func (*IfElseBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{1}
}
func (m *IfElseBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IfElseBlock.Unmarshal(m, b)
}
func (m *IfElseBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IfElseBlock.Marshal(b, m, deterministic)
}
func (dst *IfElseBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IfElseBlock.Merge(dst, src)
}
func (m *IfElseBlock) XXX_Size() int {
	return xxx_messageInfo_IfElseBlock.Size(m)
}
func (m *IfElseBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_IfElseBlock.DiscardUnknown(m)
}

var xxx_messageInfo_IfElseBlock proto.InternalMessageInfo

type isIfElseBlock_Default interface {
	isIfElseBlock_Default()
}

type IfElseBlock_ElseNode struct {
	ElseNode *Node `protobuf:"bytes,3,opt,name=else_node,json=elseNode,oneof"`
}
type IfElseBlock_Error struct {
	Error *Error `protobuf:"bytes,4,opt,name=error,oneof"`
}

func (*IfElseBlock_ElseNode) isIfElseBlock_Default() {}
func (*IfElseBlock_Error) isIfElseBlock_Default()    {}

func (m *IfElseBlock) GetDefault() isIfElseBlock_Default {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *IfElseBlock) GetCase() *IfBlock {
	if m != nil {
		return m.Case
	}
	return nil
}

func (m *IfElseBlock) GetOther() []*IfBlock {
	if m != nil {
		return m.Other
	}
	return nil
}

func (m *IfElseBlock) GetElseNode() *Node {
	if x, ok := m.GetDefault().(*IfElseBlock_ElseNode); ok {
		return x.ElseNode
	}
	return nil
}

func (m *IfElseBlock) GetError() *Error {
	if x, ok := m.GetDefault().(*IfElseBlock_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IfElseBlock) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IfElseBlock_OneofMarshaler, _IfElseBlock_OneofUnmarshaler, _IfElseBlock_OneofSizer, []interface{}{
		(*IfElseBlock_ElseNode)(nil),
		(*IfElseBlock_Error)(nil),
	}
}

func _IfElseBlock_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IfElseBlock)
	// default
	switch x := m.Default.(type) {
	case *IfElseBlock_ElseNode:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ElseNode); err != nil {
			return err
		}
	case *IfElseBlock_Error:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IfElseBlock.Default has unexpected type %T", x)
	}
	return nil
}

func _IfElseBlock_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IfElseBlock)
	switch tag {
	case 3: // default.else_node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Node)
		err := b.DecodeMessage(msg)
		m.Default = &IfElseBlock_ElseNode{msg}
		return true, err
	case 4: // default.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Default = &IfElseBlock_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IfElseBlock_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IfElseBlock)
	// default
	switch x := m.Default.(type) {
	case *IfElseBlock_ElseNode:
		s := proto.Size(x.ElseNode)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IfElseBlock_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BranchNode is a special node that alter the flow of the workflow graph. It allows the control flow to branch at
// runtime based on a series of conditions that get evaluated on various parameters (e.g. inputs, primtives).
type BranchNode struct {
	// +required
	IfElse               *IfElseBlock `protobuf:"bytes,2,opt,name=if_else,json=ifElse" json:"if_else,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BranchNode) Reset()         { *m = BranchNode{} }
func (m *BranchNode) String() string { return proto.CompactTextString(m) }
func (*BranchNode) ProtoMessage()    {}
func (*BranchNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{2}
}
func (m *BranchNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BranchNode.Unmarshal(m, b)
}
func (m *BranchNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BranchNode.Marshal(b, m, deterministic)
}
func (dst *BranchNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BranchNode.Merge(dst, src)
}
func (m *BranchNode) XXX_Size() int {
	return xxx_messageInfo_BranchNode.Size(m)
}
func (m *BranchNode) XXX_DiscardUnknown() {
	xxx_messageInfo_BranchNode.DiscardUnknown(m)
}

var xxx_messageInfo_BranchNode proto.InternalMessageInfo

func (m *BranchNode) GetIfElse() *IfElseBlock {
	if m != nil {
		return m.IfElse
	}
	return nil
}

// Refers to the task that the Node is to execute.
type TaskNode struct {
	// Types that are valid to be assigned to Reference:
	//	*TaskNode_ReferenceId
	Reference            isTaskNode_Reference `protobuf_oneof:"reference"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TaskNode) Reset()         { *m = TaskNode{} }
func (m *TaskNode) String() string { return proto.CompactTextString(m) }
func (*TaskNode) ProtoMessage()    {}
func (*TaskNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{3}
}
func (m *TaskNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskNode.Unmarshal(m, b)
}
func (m *TaskNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskNode.Marshal(b, m, deterministic)
}
func (dst *TaskNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskNode.Merge(dst, src)
}
func (m *TaskNode) XXX_Size() int {
	return xxx_messageInfo_TaskNode.Size(m)
}
func (m *TaskNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskNode.DiscardUnknown(m)
}

var xxx_messageInfo_TaskNode proto.InternalMessageInfo

type isTaskNode_Reference interface {
	isTaskNode_Reference()
}

type TaskNode_ReferenceId struct {
	ReferenceId string `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,oneof"`
}

func (*TaskNode_ReferenceId) isTaskNode_Reference() {}

func (m *TaskNode) GetReference() isTaskNode_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *TaskNode) GetReferenceId() string {
	if x, ok := m.GetReference().(*TaskNode_ReferenceId); ok {
		return x.ReferenceId
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TaskNode) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TaskNode_OneofMarshaler, _TaskNode_OneofUnmarshaler, _TaskNode_OneofSizer, []interface{}{
		(*TaskNode_ReferenceId)(nil),
	}
}

func _TaskNode_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TaskNode)
	// reference
	switch x := m.Reference.(type) {
	case *TaskNode_ReferenceId:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ReferenceId)
	case nil:
	default:
		return fmt.Errorf("TaskNode.Reference has unexpected type %T", x)
	}
	return nil
}

func _TaskNode_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TaskNode)
	switch tag {
	case 1: // reference.reference_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Reference = &TaskNode_ReferenceId{x}
		return true, err
	default:
		return false, nil
	}
}

func _TaskNode_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TaskNode)
	// reference
	switch x := m.Reference.(type) {
	case *TaskNode_ReferenceId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ReferenceId)))
		n += len(x.ReferenceId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Refers to a the workflow the node is to execute.
type WorkflowNode struct {
	// Types that are valid to be assigned to Reference:
	//	*WorkflowNode_LaunchPlanReferenceId
	//	*WorkflowNode_WorkflowTemplate
	Reference            isWorkflowNode_Reference `protobuf_oneof:"reference"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *WorkflowNode) Reset()         { *m = WorkflowNode{} }
func (m *WorkflowNode) String() string { return proto.CompactTextString(m) }
func (*WorkflowNode) ProtoMessage()    {}
func (*WorkflowNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{4}
}
func (m *WorkflowNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowNode.Unmarshal(m, b)
}
func (m *WorkflowNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowNode.Marshal(b, m, deterministic)
}
func (dst *WorkflowNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowNode.Merge(dst, src)
}
func (m *WorkflowNode) XXX_Size() int {
	return xxx_messageInfo_WorkflowNode.Size(m)
}
func (m *WorkflowNode) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowNode.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowNode proto.InternalMessageInfo

type isWorkflowNode_Reference interface {
	isWorkflowNode_Reference()
}

type WorkflowNode_LaunchPlanReferenceId struct {
	LaunchPlanReferenceId string `protobuf:"bytes,1,opt,name=launch_plan_reference_id,json=launchPlanReferenceId,oneof"`
}
type WorkflowNode_WorkflowTemplate struct {
	WorkflowTemplate *WorkflowTemplate `protobuf:"bytes,2,opt,name=workflow_template,json=workflowTemplate,oneof"`
}

func (*WorkflowNode_LaunchPlanReferenceId) isWorkflowNode_Reference() {}
func (*WorkflowNode_WorkflowTemplate) isWorkflowNode_Reference()      {}

func (m *WorkflowNode) GetReference() isWorkflowNode_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *WorkflowNode) GetLaunchPlanReferenceId() string {
	if x, ok := m.GetReference().(*WorkflowNode_LaunchPlanReferenceId); ok {
		return x.LaunchPlanReferenceId
	}
	return ""
}

func (m *WorkflowNode) GetWorkflowTemplate() *WorkflowTemplate {
	if x, ok := m.GetReference().(*WorkflowNode_WorkflowTemplate); ok {
		return x.WorkflowTemplate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WorkflowNode) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WorkflowNode_OneofMarshaler, _WorkflowNode_OneofUnmarshaler, _WorkflowNode_OneofSizer, []interface{}{
		(*WorkflowNode_LaunchPlanReferenceId)(nil),
		(*WorkflowNode_WorkflowTemplate)(nil),
	}
}

func _WorkflowNode_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WorkflowNode)
	// reference
	switch x := m.Reference.(type) {
	case *WorkflowNode_LaunchPlanReferenceId:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.LaunchPlanReferenceId)
	case *WorkflowNode_WorkflowTemplate:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkflowTemplate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("WorkflowNode.Reference has unexpected type %T", x)
	}
	return nil
}

func _WorkflowNode_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WorkflowNode)
	switch tag {
	case 1: // reference.launch_plan_reference_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Reference = &WorkflowNode_LaunchPlanReferenceId{x}
		return true, err
	case 2: // reference.workflow_template
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkflowTemplate)
		err := b.DecodeMessage(msg)
		m.Reference = &WorkflowNode_WorkflowTemplate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _WorkflowNode_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WorkflowNode)
	// reference
	switch x := m.Reference.(type) {
	case *WorkflowNode_LaunchPlanReferenceId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.LaunchPlanReferenceId)))
		n += len(x.LaunchPlanReferenceId)
	case *WorkflowNode_WorkflowTemplate:
		s := proto.Size(x.WorkflowTemplate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Defines extra information about the Node.
type NodeMetadata struct {
	// A friendly name for the Node
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The overall timeout of a task.
	Timeout *duration.Duration `protobuf:"bytes,4,opt,name=timeout" json:"timeout,omitempty"`
	// Number of retries per task.
	Retries              *RetryStrategy `protobuf:"bytes,5,opt,name=retries" json:"retries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NodeMetadata) Reset()         { *m = NodeMetadata{} }
func (m *NodeMetadata) String() string { return proto.CompactTextString(m) }
func (*NodeMetadata) ProtoMessage()    {}
func (*NodeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{5}
}
func (m *NodeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMetadata.Unmarshal(m, b)
}
func (m *NodeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMetadata.Marshal(b, m, deterministic)
}
func (dst *NodeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetadata.Merge(dst, src)
}
func (m *NodeMetadata) XXX_Size() int {
	return xxx_messageInfo_NodeMetadata.Size(m)
}
func (m *NodeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetadata proto.InternalMessageInfo

func (m *NodeMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeMetadata) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *NodeMetadata) GetRetries() *RetryStrategy {
	if m != nil {
		return m.Retries
	}
	return nil
}

// Links a variable to an alias.
type Alias struct {
	// Must match one of the output variable names on a node.
	Var string `protobuf:"bytes,1,opt,name=var" json:"var,omitempty"`
	// A workflow-level unique alias that downstream nodes can refer to in their input.
	Alias                string   `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Alias) Reset()         { *m = Alias{} }
func (m *Alias) String() string { return proto.CompactTextString(m) }
func (*Alias) ProtoMessage()    {}
func (*Alias) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{6}
}
func (m *Alias) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Alias.Unmarshal(m, b)
}
func (m *Alias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Alias.Marshal(b, m, deterministic)
}
func (dst *Alias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Alias.Merge(dst, src)
}
func (m *Alias) XXX_Size() int {
	return xxx_messageInfo_Alias.Size(m)
}
func (m *Alias) XXX_DiscardUnknown() {
	xxx_messageInfo_Alias.DiscardUnknown(m)
}

var xxx_messageInfo_Alias proto.InternalMessageInfo

func (m *Alias) GetVar() string {
	if m != nil {
		return m.Var
	}
	return ""
}

func (m *Alias) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

// A Workflow graph Node. One unit of execution in the graph. Each node can be linked to a Task, a Workflow or a branch
// node.
type Node struct {
	// A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
	// node ids that cannot be used by other nodes.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Extra metadata about the node.
	Metadata *NodeMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	// Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
	// must be fullfilled.
	Inputs []*Binding `protobuf:"bytes,3,rep,name=inputs" json:"inputs,omitempty"`
	// +optional Specifies execution depdendency for this node ensuring it will only get scheduled to run after all its
	// upstream nodes have completed. This node will have an implicit depdendency on any node that appears in inputs
	// field.
	UpstreamNodeIds []string `protobuf:"bytes,4,rep,name=upstream_node_ids,json=upstreamNodeIds" json:"upstream_node_ids,omitempty"`
	// +optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
	// need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
	// nodes outputs using the alias if one's specified.
	OutputAliases []*Alias `protobuf:"bytes,5,rep,name=output_aliases,json=outputAliases" json:"output_aliases,omitempty"`
	// Information about the target to execute in this node.
	//
	// Types that are valid to be assigned to Target:
	//	*Node_TaskNode
	//	*Node_WorkflowNode
	//	*Node_BranchNode
	Target               isNode_Target `protobuf_oneof:"target"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{7}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (dst *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(dst, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

type isNode_Target interface {
	isNode_Target()
}

type Node_TaskNode struct {
	TaskNode *TaskNode `protobuf:"bytes,6,opt,name=task_node,json=taskNode,oneof"`
}
type Node_WorkflowNode struct {
	WorkflowNode *WorkflowNode `protobuf:"bytes,7,opt,name=workflow_node,json=workflowNode,oneof"`
}
type Node_BranchNode struct {
	BranchNode *BranchNode `protobuf:"bytes,8,opt,name=branch_node,json=branchNode,oneof"`
}

func (*Node_TaskNode) isNode_Target()     {}
func (*Node_WorkflowNode) isNode_Target() {}
func (*Node_BranchNode) isNode_Target()   {}

func (m *Node) GetTarget() isNode_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetMetadata() *NodeMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Node) GetInputs() []*Binding {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Node) GetUpstreamNodeIds() []string {
	if m != nil {
		return m.UpstreamNodeIds
	}
	return nil
}

func (m *Node) GetOutputAliases() []*Alias {
	if m != nil {
		return m.OutputAliases
	}
	return nil
}

func (m *Node) GetTaskNode() *TaskNode {
	if x, ok := m.GetTarget().(*Node_TaskNode); ok {
		return x.TaskNode
	}
	return nil
}

func (m *Node) GetWorkflowNode() *WorkflowNode {
	if x, ok := m.GetTarget().(*Node_WorkflowNode); ok {
		return x.WorkflowNode
	}
	return nil
}

func (m *Node) GetBranchNode() *BranchNode {
	if x, ok := m.GetTarget().(*Node_BranchNode); ok {
		return x.BranchNode
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Node_OneofMarshaler, _Node_OneofUnmarshaler, _Node_OneofSizer, []interface{}{
		(*Node_TaskNode)(nil),
		(*Node_WorkflowNode)(nil),
		(*Node_BranchNode)(nil),
	}
}

func _Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Node)
	// target
	switch x := m.Target.(type) {
	case *Node_TaskNode:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TaskNode); err != nil {
			return err
		}
	case *Node_WorkflowNode:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkflowNode); err != nil {
			return err
		}
	case *Node_BranchNode:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BranchNode); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Node.Target has unexpected type %T", x)
	}
	return nil
}

func _Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Node)
	switch tag {
	case 6: // target.task_node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TaskNode)
		err := b.DecodeMessage(msg)
		m.Target = &Node_TaskNode{msg}
		return true, err
	case 7: // target.workflow_node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkflowNode)
		err := b.DecodeMessage(msg)
		m.Target = &Node_WorkflowNode{msg}
		return true, err
	case 8: // target.branch_node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BranchNode)
		err := b.DecodeMessage(msg)
		m.Target = &Node_BranchNode{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Node)
	// target
	switch x := m.Target.(type) {
	case *Node_TaskNode:
		s := proto.Size(x.TaskNode)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_WorkflowNode:
		s := proto.Size(x.WorkflowNode)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_BranchNode:
		s := proto.Size(x.BranchNode)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Metadata for the entire workflow.
type WorkflowMetadata struct {
	ExecutionRole        string   `protobuf:"bytes,1,opt,name=execution_role,json=executionRole" json:"execution_role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowMetadata) Reset()         { *m = WorkflowMetadata{} }
func (m *WorkflowMetadata) String() string { return proto.CompactTextString(m) }
func (*WorkflowMetadata) ProtoMessage()    {}
func (*WorkflowMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{8}
}
func (m *WorkflowMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowMetadata.Unmarshal(m, b)
}
func (m *WorkflowMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowMetadata.Marshal(b, m, deterministic)
}
func (dst *WorkflowMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowMetadata.Merge(dst, src)
}
func (m *WorkflowMetadata) XXX_Size() int {
	return xxx_messageInfo_WorkflowMetadata.Size(m)
}
func (m *WorkflowMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowMetadata proto.InternalMessageInfo

func (m *WorkflowMetadata) GetExecutionRole() string {
	if m != nil {
		return m.ExecutionRole
	}
	return ""
}

// Flyte Workflow Structure that encapsulates task, branch and subworkflow nodes to form a statically analyzable,
// directed acyclic graph.
type WorkflowTemplate struct {
	// This is an autogenerated id by the system. The id is globally unique across the system.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Extra metadata about the workflow.
	Metadata *WorkflowMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	// Defines a strongly typed interface for the Workflow. This can include some optional parameters.
	Interface *TypedInterface `protobuf:"bytes,3,opt,name=interface" json:"interface,omitempty"`
	// A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
	Nodes []*Node `protobuf:"bytes,4,rep,name=nodes" json:"nodes,omitempty"`
	// A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
	// specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
	// to be validated. A workflow has an implicit depdendency on all of its nodes to execute successfully in order to
	// bind final outputs.
	Outputs []*Binding `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	// +optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
	// The interface of this node must match the Workflow interface with an additional input named "error" of type
	// pb.lyft.flyte.core.Error.
	FailureNode          *Node    `protobuf:"bytes,6,opt,name=failure_node,json=failureNode" json:"failure_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowTemplate) Reset()         { *m = WorkflowTemplate{} }
func (m *WorkflowTemplate) String() string { return proto.CompactTextString(m) }
func (*WorkflowTemplate) ProtoMessage()    {}
func (*WorkflowTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_6d34fe9c3809ff6e, []int{9}
}
func (m *WorkflowTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowTemplate.Unmarshal(m, b)
}
func (m *WorkflowTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowTemplate.Marshal(b, m, deterministic)
}
func (dst *WorkflowTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowTemplate.Merge(dst, src)
}
func (m *WorkflowTemplate) XXX_Size() int {
	return xxx_messageInfo_WorkflowTemplate.Size(m)
}
func (m *WorkflowTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowTemplate proto.InternalMessageInfo

func (m *WorkflowTemplate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WorkflowTemplate) GetMetadata() *WorkflowMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *WorkflowTemplate) GetInterface() *TypedInterface {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (m *WorkflowTemplate) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *WorkflowTemplate) GetOutputs() []*Binding {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *WorkflowTemplate) GetFailureNode() *Node {
	if m != nil {
		return m.FailureNode
	}
	return nil
}

func init() {
	proto.RegisterType((*IfBlock)(nil), "core.IfBlock")
	proto.RegisterType((*IfElseBlock)(nil), "core.IfElseBlock")
	proto.RegisterType((*BranchNode)(nil), "core.BranchNode")
	proto.RegisterType((*TaskNode)(nil), "core.TaskNode")
	proto.RegisterType((*WorkflowNode)(nil), "core.WorkflowNode")
	proto.RegisterType((*NodeMetadata)(nil), "core.NodeMetadata")
	proto.RegisterType((*Alias)(nil), "core.Alias")
	proto.RegisterType((*Node)(nil), "core.Node")
	proto.RegisterType((*WorkflowMetadata)(nil), "core.WorkflowMetadata")
	proto.RegisterType((*WorkflowTemplate)(nil), "core.WorkflowTemplate")
}

func init() {
	proto.RegisterFile("flyteidl/core/workflow.proto", fileDescriptor_workflow_6d34fe9c3809ff6e)
}

var fileDescriptor_workflow_6d34fe9c3809ff6e = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0x5d, 0x6f, 0x23, 0x35,
	0x14, 0xcd, 0x77, 0x32, 0x37, 0x69, 0x69, 0xcd, 0x02, 0xd9, 0x15, 0xa0, 0x32, 0x08, 0xed, 0xb2,
	0x52, 0x13, 0xa9, 0x15, 0x12, 0x95, 0x78, 0xd9, 0x88, 0x4a, 0xc9, 0xc3, 0x22, 0x64, 0x56, 0x42,
	0xe2, 0x65, 0xe4, 0xce, 0xdc, 0x49, 0xad, 0x3a, 0xe3, 0x91, 0xc7, 0x43, 0x37, 0xef, 0x88, 0x7f,
	0xc1, 0x7f, 0xe0, 0xd7, 0xf1, 0x8c, 0xfc, 0x35, 0xf9, 0x68, 0xdf, 0x6c, 0x9f, 0x73, 0xaf, 0xcf,
	0xbd, 0xf7, 0x78, 0x06, 0xbe, 0xcc, 0xc5, 0x56, 0x23, 0xcf, 0xc4, 0x3c, 0x95, 0x0a, 0xe7, 0x8f,
	0x52, 0x3d, 0xe4, 0x42, 0x3e, 0xce, 0x4a, 0x25, 0xb5, 0x24, 0x3d, 0x73, 0xf8, 0xea, 0xab, 0x43,
	0x0e, 0x2f, 0x34, 0xaa, 0x9c, 0xa5, 0xe8, 0x48, 0xaf, 0x8e, 0x52, 0x08, 0xae, 0x51, 0x31, 0x51,
	0x79, 0xf4, 0xe5, 0x21, 0xaa, 0xb7, 0x25, 0x06, 0xe8, 0x28, 0x6f, 0x2a, 0x8b, 0x8c, 0x6b, 0x2e,
	0x0b, 0x0f, 0x7f, 0xbd, 0x96, 0x72, 0x2d, 0x70, 0x6e, 0x77, 0x77, 0x75, 0x3e, 0xcf, 0x6a, 0xc5,
	0x76, 0x78, 0xcc, 0x61, 0xb8, 0xca, 0x17, 0x42, 0xa6, 0x0f, 0xe4, 0x07, 0x88, 0x9a, 0xe8, 0x69,
	0xfb, 0xa2, 0xfd, 0x66, 0x7c, 0xf5, 0xc5, 0xcc, 0x24, 0x9d, 0x2d, 0xa4, 0x14, 0xc8, 0x8a, 0xdb,
	0x8f, 0xa5, 0xc2, 0xaa, 0xe2, 0xb2, 0xa0, 0x3b, 0x26, 0x79, 0x0d, 0x91, 0xbe, 0xc7, 0x22, 0x29,
	0x64, 0x86, 0xd3, 0x8e, 0x0d, 0x03, 0x17, 0xf6, 0x8b, 0xcc, 0x90, 0x8e, 0x0c, 0x68, 0x56, 0xf1,
	0xbf, 0x6d, 0x18, 0xaf, 0xf2, 0x5b, 0x51, 0xa1, 0xbb, 0xef, 0x1b, 0xe8, 0xa5, 0xac, 0x42, 0x7f,
	0xd5, 0x89, 0x8b, 0xf1, 0x62, 0xa8, 0x85, 0xc8, 0xb7, 0xd0, 0x97, 0xfa, 0x1e, 0xd5, 0xb4, 0x73,
	0xd1, 0x7d, 0xca, 0x71, 0x18, 0xf9, 0x1e, 0x22, 0x14, 0x15, 0x3a, 0x01, 0xdd, 0x63, 0x01, 0xcb,
	0x16, 0x1d, 0x19, 0xd8, 0xac, 0x4d, 0x3e, 0x54, 0x4a, 0xaa, 0x69, 0xcf, 0xd2, 0xc6, 0x8e, 0x76,
	0x6b, 0x8e, 0x96, 0x2d, 0xea, 0xb0, 0x45, 0x04, 0xc3, 0x0c, 0x73, 0x56, 0x0b, 0x1d, 0xff, 0x08,
	0xb0, 0x50, 0xac, 0x48, 0xef, 0x6d, 0xf4, 0x5b, 0x18, 0xf2, 0x3c, 0x31, 0xc9, 0x7c, 0x9d, 0xe7,
	0x41, 0x4f, 0x53, 0x14, 0x1d, 0x70, 0xbb, 0x89, 0x7f, 0x82, 0xd1, 0x07, 0x56, 0x3d, 0xf8, 0x5b,
	0x27, 0x0a, 0x73, 0x54, 0x58, 0xa4, 0x98, 0xf0, 0xcc, 0x16, 0x1c, 0x2d, 0x5b, 0x74, 0xdc, 0x9c,
	0xae, 0xb2, 0xc5, 0x18, 0xa2, 0x66, 0x1b, 0xff, 0xd3, 0x86, 0xc9, 0xef, 0xde, 0x45, 0x36, 0xc5,
	0x0d, 0x4c, 0x05, 0xab, 0x8b, 0xf4, 0x3e, 0x29, 0x05, 0x2b, 0x92, 0x67, 0xd3, 0x7d, 0xe6, 0x18,
	0xbf, 0x0a, 0x56, 0xd0, 0x5d, 0x62, 0x72, 0x0b, 0xe7, 0xc1, 0x90, 0x89, 0xc6, 0x4d, 0x29, 0x98,
	0x0e, 0xfa, 0x3f, 0x77, 0xfa, 0xc3, 0x4d, 0x1f, 0x3c, 0xba, 0x6c, 0xd1, 0xb3, 0xc7, 0xa3, 0xb3,
	0x43, 0x7d, 0x7f, 0xb7, 0x61, 0x62, 0x74, 0xbd, 0x47, 0xcd, 0x32, 0xa6, 0x19, 0x21, 0xd0, 0x2b,
	0xd8, 0xc6, 0xcd, 0x32, 0xa2, 0x76, 0x4d, 0xae, 0x61, 0xa8, 0xf9, 0x06, 0x65, 0xad, 0x7d, 0xbb,
	0x5f, 0xce, 0x9c, 0x19, 0x67, 0xc1, 0x8c, 0xb3, 0x9f, 0xbd, 0x19, 0x69, 0x60, 0x92, 0x4b, 0x18,
	0x2a, 0xd4, 0x8a, 0x63, 0x35, 0xed, 0xdb, 0xa0, 0x4f, 0x9d, 0x46, 0x8a, 0x5a, 0x6d, 0x7f, 0xd3,
	0x8a, 0x69, 0x5c, 0x6f, 0x69, 0xe0, 0xc4, 0x73, 0xe8, 0xbf, 0x13, 0x9c, 0x55, 0xe4, 0x0c, 0xba,
	0x7f, 0x32, 0xe5, 0xef, 0x37, 0x4b, 0xf2, 0x02, 0xfa, 0xcc, 0x40, 0xb6, 0xd6, 0x88, 0xba, 0x4d,
	0xfc, 0x5f, 0x07, 0x7a, 0xb6, 0xa3, 0xa7, 0xd0, 0x09, 0xbd, 0xa3, 0x1d, 0x9e, 0x91, 0x19, 0x8c,
	0x36, 0xbe, 0x1a, 0xdf, 0x1d, 0xb2, 0x33, 0x51, 0xa8, 0x93, 0x36, 0x1c, 0xf2, 0x1d, 0x0c, 0x78,
	0x51, 0xd6, 0xba, 0x9a, 0x76, 0xf7, 0xbd, 0xb9, 0xe0, 0x45, 0xc6, 0x8b, 0x35, 0xf5, 0x20, 0x79,
	0x0b, 0xe7, 0x75, 0x59, 0x69, 0x85, 0x6c, 0x63, 0x0d, 0x9a, 0xf0, 0xac, 0x9a, 0xf6, 0x2e, 0xba,
	0x6f, 0x22, 0xfa, 0x49, 0x00, 0xcc, 0x0d, 0xab, 0xac, 0x22, 0x57, 0x70, 0x2a, 0x6b, 0x5d, 0xd6,
	0x3a, 0xb1, 0x5a, 0x6d, 0x0b, 0xba, 0x3b, 0x9b, 0xda, 0x42, 0xe9, 0x89, 0xa3, 0xbc, 0x73, 0x0c,
	0x72, 0x09, 0x91, 0x66, 0xd5, 0x83, 0x33, 0xff, 0xc0, 0xea, 0x3e, 0x75, 0xf4, 0x60, 0x3f, 0xf3,
	0x00, 0x74, 0xb0, 0xe2, 0x0d, 0x9c, 0x34, 0x66, 0xb0, 0x21, 0xc3, 0xfd, 0x52, 0xf7, 0x2d, 0xb7,
	0x6c, 0xd1, 0xc9, 0xe3, 0xbe, 0x05, 0xaf, 0x61, 0x7c, 0x67, 0xdf, 0x82, 0x0b, 0x1c, 0xd9, 0xc0,
	0x33, 0x5f, 0x75, 0xf3, 0x48, 0x96, 0x2d, 0x0a, 0x77, 0xcd, 0x6e, 0x31, 0x82, 0x81, 0x66, 0x6a,
	0x8d, 0x3a, 0xbe, 0x81, 0xb3, 0x90, 0xfe, 0xfd, 0xae, 0x87, 0xa7, 0xf8, 0x11, 0xd3, 0xda, 0x58,
	0x20, 0x51, 0x52, 0x04, 0xff, 0x9c, 0x34, 0xa7, 0x54, 0x0a, 0x8c, 0xff, 0xea, 0xec, 0x62, 0x83,
	0x1f, 0x9f, 0xcc, 0xef, 0xea, 0xc9, 0xfc, 0x8e, 0xdc, 0xfd, 0xcc, 0x0c, 0xaf, 0x20, 0x6a, 0xbe,
	0xc3, 0xfe, 0xcb, 0xf1, 0xc2, 0x37, 0x6f, 0x5b, 0x62, 0xb6, 0x0a, 0x18, 0xdd, 0xd1, 0xc8, 0x05,
	0xf4, 0x4d, 0xfd, 0x6e, 0x88, 0x87, 0x9f, 0x3a, 0x07, 0x90, 0xd7, 0x30, 0x74, 0x33, 0x0a, 0xf3,
	0x3b, 0xb2, 0x46, 0x40, 0xc9, 0x25, 0x4c, 0x72, 0xc6, 0x45, 0xad, 0x70, 0x7f, 0x7c, 0xfb, 0x19,
	0xc7, 0x1e, 0xb7, 0xbd, 0x1c, 0xfc, 0x61, 0xff, 0x24, 0x77, 0x03, 0xfb, 0x7c, 0xae, 0xff, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0x19, 0x7d, 0x17, 0x54, 0x76, 0x06, 0x00, 0x00,
}
