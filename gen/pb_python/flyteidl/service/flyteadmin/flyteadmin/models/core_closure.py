# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_node import CoreNode  # noqa: F401,E501
from flyteadmin.models.core_task_template import CoreTaskTemplate  # noqa: F401,E501
from flyteadmin.models.core_workflow_template import CoreWorkflowTemplate  # noqa: F401,E501


class CoreClosure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node': 'CoreNode',
        'tasks': 'list[CoreTaskTemplate]',
        'sub_workflows': 'list[CoreWorkflowTemplate]'
    }

    attribute_map = {
        'node': 'node',
        'tasks': 'tasks',
        'sub_workflows': 'sub_workflows'
    }

    def __init__(self, node=None, tasks=None, sub_workflows=None):  # noqa: E501
        """CoreClosure - a model defined in Swagger"""  # noqa: E501

        self._node = None
        self._tasks = None
        self._sub_workflows = None
        self.discriminator = None

        if node is not None:
            self.node = node
        if tasks is not None:
            self.tasks = tasks
        if sub_workflows is not None:
            self.sub_workflows = sub_workflows

    @property
    def node(self):
        """Gets the node of this CoreClosure.  # noqa: E501

        A node to execute. All inputs of the node must be statically bound in node input bindings. Dynamic bindings is not yet supported.  # noqa: E501

        :return: The node of this CoreClosure.  # noqa: E501
        :rtype: CoreNode
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this CoreClosure.

        A node to execute. All inputs of the node must be statically bound in node input bindings. Dynamic bindings is not yet supported.  # noqa: E501

        :param node: The node of this CoreClosure.  # noqa: E501
        :type: CoreNode
        """

        self._node = node

    @property
    def tasks(self):
        """Gets the tasks of this CoreClosure.  # noqa: E501

        [Optional] List of task specs directly or indirectly referenced in node. This list will take precedence over other task specs found in the environment (e.g. in an enclosing workflow) when resolving task references.  # noqa: E501

        :return: The tasks of this CoreClosure.  # noqa: E501
        :rtype: list[CoreTaskTemplate]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this CoreClosure.

        [Optional] List of task specs directly or indirectly referenced in node. This list will take precedence over other task specs found in the environment (e.g. in an enclosing workflow) when resolving task references.  # noqa: E501

        :param tasks: The tasks of this CoreClosure.  # noqa: E501
        :type: list[CoreTaskTemplate]
        """

        self._tasks = tasks

    @property
    def sub_workflows(self):
        """Gets the sub_workflows of this CoreClosure.  # noqa: E501

        [Optional] List of workflow specs directly or indirectly referenced in node. This list will take precedence over other workflow specs found in the environment (e.g. in an enclosing workflow) when resolving workflows references.  # noqa: E501

        :return: The sub_workflows of this CoreClosure.  # noqa: E501
        :rtype: list[CoreWorkflowTemplate]
        """
        return self._sub_workflows

    @sub_workflows.setter
    def sub_workflows(self, sub_workflows):
        """Sets the sub_workflows of this CoreClosure.

        [Optional] List of workflow specs directly or indirectly referenced in node. This list will take precedence over other workflow specs found in the environment (e.g. in an enclosing workflow) when resolving workflows references.  # noqa: E501

        :param sub_workflows: The sub_workflows of this CoreClosure.  # noqa: E501
        :type: list[CoreWorkflowTemplate]
        """

        self._sub_workflows = sub_workflows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreClosure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreClosure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
