// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2019-08-22 17:13:37.783157053 -0700 PDT m=+5.000301635

package datacatalog

import (
	"encoding/json"
	"fmt"
	"reflect"
	"testing"

	"github.com/mitchellh/mapstructure"
	"github.com/stretchr/testify/assert"
)

var dereferencableKindsClientConfig = map[reflect.Kind]struct{}{
	reflect.Array: {}, reflect.Chan: {}, reflect.Map: {}, reflect.Ptr: {}, reflect.Slice: {},
}

// Checks if t is a kind that can be dereferenced to get its underlying type.
func canGetElementClientConfig(t reflect.Kind) bool {
	_, exists := dereferencableKindsClientConfig[t]
	return exists
}

// This decoder hook tests types for json unmarshaling capability. If implemented, it uses json unmarshal to build the
// object. Otherwise, it'll just pass on the original data.
func jsonUnmarshalerHookClientConfig(_, to reflect.Type, data interface{}) (interface{}, error) {
	unmarshalerType := reflect.TypeOf((*json.Unmarshaler)(nil)).Elem()
	if to.Implements(unmarshalerType) || reflect.PtrTo(to).Implements(unmarshalerType) ||
		(canGetElementClientConfig(to.Kind()) && to.Elem().Implements(unmarshalerType)) {

		raw, err := json.Marshal(data)
		if err != nil {
			fmt.Printf("Failed to marshal Data: %v. Error: %v. Skipping jsonUnmarshalHook", data, err)
			return data, nil
		}

		res := reflect.New(to).Interface()
		err = json.Unmarshal(raw, &res)
		if err != nil {
			fmt.Printf("Failed to umarshal Data: %v. Error: %v. Skipping jsonUnmarshalHook", data, err)
			return data, nil
		}

		return res, nil
	}

	return data, nil
}

func decode_ClientConfig(input, result interface{}) error {
	config := &mapstructure.DecoderConfig{
		TagName:          "json",
		WeaklyTypedInput: true,
		Result:           result,
		DecodeHook: mapstructure.ComposeDecodeHookFunc(
			mapstructure.StringToTimeDurationHookFunc(),
			mapstructure.StringToSliceHookFunc(","),
			jsonUnmarshalerHookClientConfig,
		),
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	return decoder.Decode(input)
}

func testDecodeJson_ClientConfig(t *testing.T, val, result interface{}) {
	assert.NoError(t, decode_ClientConfig(val, result))
}

func testDecodeSlice_ClientConfig(t *testing.T, vStringSlice, result interface{}) {
	assert.NoError(t, decode_ClientConfig(vStringSlice, result))
}

func TestClientConfig_GetPFlagSet(t *testing.T) {
	val := ClientConfig{}
	cmdFlags := val.GetPFlagSet("")
	assert.True(t, cmdFlags.HasFlags())
}

func TestClientConfig_SetFlags(t *testing.T) {
	actual := ClientConfig{}
	cmdFlags := actual.GetPFlagSet("")
	assert.True(t, cmdFlags.HasFlags())

	t.Run("Test_endpoint", func(t *testing.T) {
		t.Run("DefaultValue", func(t *testing.T) {
			// Test that default value is set properly
			if vString, err := cmdFlags.GetString("endpoint"); err == nil {
				assert.Equal(t, "", vString)
			} else {
				assert.FailNow(t, err.Error())
			}
		})

		t.Run("Override", func(t *testing.T) {
			cmdFlags.Set("endpoint", "1")
			if vString, err := cmdFlags.GetString("endpoint"); err == nil {
				testDecodeJson_ClientConfig(t, fmt.Sprintf("%v", vString), &actual.Endpoint)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_insecure", func(t *testing.T) {
		t.Run("DefaultValue", func(t *testing.T) {
			// Test that default value is set properly
			if vBool, err := cmdFlags.GetBool("insecure"); err == nil {
				assert.Equal(t, *new(bool), vBool)
			} else {
				assert.FailNow(t, err.Error())
			}
		})

		t.Run("Override", func(t *testing.T) {
			cmdFlags.Set("insecure", "1")
			if vBool, err := cmdFlags.GetBool("insecure"); err == nil {
				testDecodeJson_ClientConfig(t, fmt.Sprintf("%v", vBool), &actual.UseInsecureConnection)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_maxBackoffDelay", func(t *testing.T) {
		t.Run("DefaultValue", func(t *testing.T) {
			// Test that default value is set properly
			if vString, err := cmdFlags.GetString("maxBackoffDelay"); err == nil {
				assert.Equal(t, "", vString)
			} else {
				assert.FailNow(t, err.Error())
			}
		})

		t.Run("Override", func(t *testing.T) {
			cmdFlags.Set("maxBackoffDelay", "1")
			if vString, err := cmdFlags.GetString("maxBackoffDelay"); err == nil {
				testDecodeJson_ClientConfig(t, fmt.Sprintf("%v", vString), &actual.MaxBackoffDelay)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_perRetryTimeout", func(t *testing.T) {
		t.Run("DefaultValue", func(t *testing.T) {
			// Test that default value is set properly
			if vString, err := cmdFlags.GetString("perRetryTimeout"); err == nil {
				assert.Equal(t, "", vString)
			} else {
				assert.FailNow(t, err.Error())
			}
		})

		t.Run("Override", func(t *testing.T) {
			cmdFlags.Set("perRetryTimeout", "1")
			if vString, err := cmdFlags.GetString("perRetryTimeout"); err == nil {
				testDecodeJson_ClientConfig(t, fmt.Sprintf("%v", vString), &actual.PerRetryTimeout)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_maxRetries", func(t *testing.T) {
		t.Run("DefaultValue", func(t *testing.T) {
			// Test that default value is set properly
			if vInt, err := cmdFlags.GetInt("maxRetries"); err == nil {
				assert.Equal(t, *new(int), vInt)
			} else {
				assert.FailNow(t, err.Error())
			}
		})

		t.Run("Override", func(t *testing.T) {
			cmdFlags.Set("maxRetries", "1")
			if vInt, err := cmdFlags.GetInt("maxRetries"); err == nil {
				testDecodeJson_ClientConfig(t, fmt.Sprintf("%v", vInt), &actual.MaxRetries)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
}
