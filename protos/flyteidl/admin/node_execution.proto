syntax = "proto3";

package flyteidl.admin;
option go_package = "github.com/lyft/flyteidl/gen/pb-go/flyteidl/admin";

import "flyteidl/admin/common.proto";
import "flyteidl/core/execution.proto";
import "flyteidl/core/identifier.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// A message used to fetch a single node execution entity.
message NodeExecutionGetRequest {

   // Uniquely identifies an individual node execution.
   core.NodeExecutionIdentifier id  = 1;  
}

// Represents a request structure to retrieve a list of node execution entities.
message NodeExecutionListRequest {
    // Indicates the number of resources to be returned.
    // +optional
    uint32 limit    = 1;
    // In the case of multiple pages of results, the, server-provided token can be used to fetch the next page
    // in a query.
    // +optional
    string token    = 2;
    // Indicates a list of filters passed as string.
    // More info on constructing filters : <Link>
    // +optional
    string filters  = 3;

    // Sort ordering.
    // +optional
    Sort sort_by    = 4;
}

// Encapsulates all details for a single node execution entity.
message NodeExecution {
    core.NodeExecutionIdentifier id        = 1;

    string input_uri                       = 2;

    NodeExecutionClosure closure           = 3;
}

// Request structure to retrieve a list of node execution entities.
message NodeExecutionList {
    repeated NodeExecution node_executions = 1;

    // In the case of multiple pages of results, the server-provided token can be used to fetch the next page
    // in a query. If there are no more results, this value will be empty.
    string token                           = 2;
}

// Container for node execution details and results.
message NodeExecutionClosure {
    oneof output_result {
        string output_uri                  = 1;

        // Error information for the Node
        core.ExecutionError error          = 2;
    }

    core.NodeExecutionPhase phase          = 3;

    // Time at which the node execution began running.
    google.protobuf.Timestamp started_at   = 4;

    // The amount of time the node execution spent running.
    google.protobuf.Duration duration      = 5; 

    // Time at which the node execution was created.
    google.protobuf.Timestamp created_at   = 6;
    
    // Time at which the node execution was last updated.
    google.protobuf.Timestamp updated_at   = 7;
}
