syntax = "proto3";

package flyteidl.admin;
option go_package = "github.com/lyft/flyteidl/gen/pb-go/flyteidl/admin";

import "flyteidl/admin/common.proto";
import "flyteidl/core/literals.proto";
import "flyteidl/core/execution.proto";
import "flyteidl/core/identifier.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
// import "validate/validate.proto";

message ExecutionCreateRequest {
    // Name of the project the execution belongs to. 
    string project    = 1;

    // Name of the domain the execution belongs to. 
    // A domain can be considered as a subset within a specific project.
    string domain     = 2;

    // User provided value for the resource.
    // If none is provided the system will generate a unique string.
    // +optional
    string name       = 3;

    ExecutionSpec spec  = 4;
}

message ExecutionRelaunchRequest {
    // Identifier of the workflow execution to relaunch.
    core.WorkflowExecutionIdentifier id = 1;

    // User provided value for the relaunched execution.
    // If none is provided the system will generate a unique string.
    // +optional
    string name       = 3;
}

message ExecutionCreateResponse {
    core.WorkflowExecutionIdentifier id = 1;
}

// A message used to fetch a single workflow execution entity.
message WorkflowExecutionGetRequest {
   // Uniquely identifies an individual workflow execution.
   core.WorkflowExecutionIdentifier id  = 1;  
}

message Execution {
    core.WorkflowExecutionIdentifier id               = 1;

    ExecutionSpec spec                                = 2;
    ExecutionClosure closure                          = 3;
}

message ExecutionList {
    repeated Execution executions     = 1;

    // In the case of multiple pages of results, the server-provided token can be used to fetch the next page
    // in a query. If there are no more results, this value will be empty.
    string token                      = 2;
}

// Input/output data can represented by actual values or a link to where it is stored
message LiteralMapBlob {
    oneof data {
        // Data in LiteralMap format
        core.LiteralMap values = 1;

        // In the event that the map is too large, we return a uri to the data
        string uri = 2;
    }
}

// Encapsulates the results of the Execution
message ExecutionClosure {
    oneof output_result {
        LiteralMapBlob outputs	= 1;

        // Error information for the Node
        core.ExecutionError error		= 2;

        // In the case of a user-specified abort, this will pass along the user-supplied cause.
        string abort_cause                      = 10;
    }

    // Inputs computed and passed for execution.
    // computed_inputs depends on inputs in ExecutionSpec, fixed and default inputs in launch plan
    core.LiteralMap computed_inputs      = 3;

    // Phase of the executions
    core.WorkflowExecutionPhase phase                 = 4;

    // Time at which the execution began running.
    google.protobuf.Timestamp started_at              = 5;

    // The amount of time the execution spent running.
    google.protobuf.Duration duration                 = 6;     

    // Time at which the execution was created.
    google.protobuf.Timestamp created_at              = 7;

    // Time at which the execution was last updated.
    google.protobuf.Timestamp updated_at              = 8;

    // The notification settings to use after merging the CreateExecutionRequest and the launch plan
    // notification settings.
    repeated Notification notifications               = 9;

    // Identifies the workflow definition for this execution.
    core.Identifier workflow_id                       = 11;
}

message ExecutionMetadata {
    enum ExecutionMode {
        MANUAL        = 0;
        SCHEDULED     = 1;
        SYSTEM        = 2;
        RELAUNCH      = 3;
        CHILD_WORKFLOW = 4;
    }
    ExecutionMode mode    = 1;  // [(validate.rules).enum.defined_only = true];

    // Identifier of the entity that triggered this execution.
    string principal      = 2;

    // Indicates the "nestedness" of this execution.
    // If a user launches a workflow execution, the default nesting is 0.
    // If this execution further launches a workflow (child workflow), the nesting level is incremented by 0 => 1
    // Generally, if workflow at nesting level k launches a workflow then the child workflow will have
    // nesting = k + 1.
    int32 nesting         = 3;
}

message ExecutionSpec {
    // Launch plan to be executed
    core.Identifier launch_plan        = 1;

    // Input values to be passed for the execution
    core.LiteralMap inputs          = 2;

    // Metadata for the execution
    ExecutionMetadata metadata    = 3;

    // List of notifications based on Execution status transitions
    repeated Notification notifications = 4;
}

message ExecutionTerminateRequest {
    // Uniquely identifies the individual workflow execution to be terminated. 
    core.WorkflowExecutionIdentifier id  = 1;

    // Optional reason for aborting.
    string cause                         = 2;
}

message ExecutionTerminateResponse {
    // Purposefully empty, may be populated in the future.
}

