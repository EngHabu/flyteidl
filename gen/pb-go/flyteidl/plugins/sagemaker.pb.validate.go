// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/plugins/sagemaker.proto

package plugins

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _sagemaker_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ContinuousParameterRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ContinuousParameterRange) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for MaxValue

	// no validation rules for MinValue

	// no validation rules for ScalingType

	return nil
}

// ContinuousParameterRangeValidationError is the validation error returned by
// ContinuousParameterRange.Validate if the designated constraints aren't met.
type ContinuousParameterRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContinuousParameterRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContinuousParameterRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContinuousParameterRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContinuousParameterRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContinuousParameterRangeValidationError) ErrorName() string {
	return "ContinuousParameterRangeValidationError"
}

// Error satisfies the builtin error interface
func (e ContinuousParameterRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContinuousParameterRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContinuousParameterRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContinuousParameterRangeValidationError{}

// Validate checks the field values on IntegerParameterRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IntegerParameterRange) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for MaxValue

	// no validation rules for MinValue

	// no validation rules for ScalingType

	return nil
}

// IntegerParameterRangeValidationError is the validation error returned by
// IntegerParameterRange.Validate if the designated constraints aren't met.
type IntegerParameterRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegerParameterRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegerParameterRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegerParameterRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegerParameterRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegerParameterRangeValidationError) ErrorName() string {
	return "IntegerParameterRangeValidationError"
}

// Error satisfies the builtin error interface
func (e IntegerParameterRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegerParameterRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegerParameterRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegerParameterRangeValidationError{}

// Validate checks the field values on CategoricalParameterRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CategoricalParameterRange) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// CategoricalParameterRangeValidationError is the validation error returned by
// CategoricalParameterRange.Validate if the designated constraints aren't met.
type CategoricalParameterRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoricalParameterRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoricalParameterRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoricalParameterRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoricalParameterRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoricalParameterRangeValidationError) ErrorName() string {
	return "CategoricalParameterRangeValidationError"
}

// Error satisfies the builtin error interface
func (e CategoricalParameterRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoricalParameterRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoricalParameterRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoricalParameterRangeValidationError{}

// Validate checks the field values on ParameterRanges with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ParameterRanges) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContinuousParameterRanges() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterRangesValidationError{
					field:  fmt.Sprintf("ContinuousParameterRanges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIntegerParameterRanges() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterRangesValidationError{
					field:  fmt.Sprintf("IntegerParameterRanges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCategoricalParameterRanges() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterRangesValidationError{
					field:  fmt.Sprintf("CategoricalParameterRanges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ParameterRangesValidationError is the validation error returned by
// ParameterRanges.Validate if the designated constraints aren't met.
type ParameterRangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterRangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterRangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterRangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterRangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterRangesValidationError) ErrorName() string { return "ParameterRangesValidationError" }

// Error satisfies the builtin error interface
func (e ParameterRangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameterRanges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterRangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterRangesValidationError{}

// Validate checks the field values on AlgorithmSpecification with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AlgorithmSpecification) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TrainingImage

	// no validation rules for TrainingInputMode

	// no validation rules for AlgorithmName

	for idx, item := range m.GetMetricDefinitions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlgorithmSpecificationValidationError{
					field:  fmt.Sprintf("MetricDefinitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AlgorithmSpecificationValidationError is the validation error returned by
// AlgorithmSpecification.Validate if the designated constraints aren't met.
type AlgorithmSpecificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlgorithmSpecificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlgorithmSpecificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlgorithmSpecificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlgorithmSpecificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlgorithmSpecificationValidationError) ErrorName() string {
	return "AlgorithmSpecificationValidationError"
}

// Error satisfies the builtin error interface
func (e AlgorithmSpecificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlgorithmSpecification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlgorithmSpecificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlgorithmSpecificationValidationError{}

// Validate checks the field values on ResourceConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InstanceType

	// no validation rules for InstanceCount

	// no validation rules for VolumeSizeInGB

	// no validation rules for VolumeKmsKeyId

	return nil
}

// ResourceConfigValidationError is the validation error returned by
// ResourceConfig.Validate if the designated constraints aren't met.
type ResourceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceConfigValidationError) ErrorName() string { return "ResourceConfigValidationError" }

// Error satisfies the builtin error interface
func (e ResourceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceConfigValidationError{}

// Validate checks the field values on StoppingCondition with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StoppingCondition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxRuntimeInSeconds

	// no validation rules for MaxWaitTimeInSeconds

	return nil
}

// StoppingConditionValidationError is the validation error returned by
// StoppingCondition.Validate if the designated constraints aren't met.
type StoppingConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoppingConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoppingConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoppingConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoppingConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoppingConditionValidationError) ErrorName() string {
	return "StoppingConditionValidationError"
}

// Error satisfies the builtin error interface
func (e StoppingConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoppingCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoppingConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoppingConditionValidationError{}

// Validate checks the field values on VpcConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *VpcConfig) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// VpcConfigValidationError is the validation error returned by
// VpcConfig.Validate if the designated constraints aren't met.
type VpcConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VpcConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VpcConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VpcConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VpcConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VpcConfigValidationError) ErrorName() string { return "VpcConfigValidationError" }

// Error satisfies the builtin error interface
func (e VpcConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVpcConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VpcConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VpcConfigValidationError{}

// Validate checks the field values on SagemakerTrainingJob with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SagemakerTrainingJob) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Region

	// no validation rules for RoleArn

	if v, ok := interface{}(m.GetAlgorithmSpecification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagemakerTrainingJobValidationError{
				field:  "AlgorithmSpecification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResourceConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagemakerTrainingJobValidationError{
				field:  "ResourceConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStoppingCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagemakerTrainingJobValidationError{
				field:  "StoppingCondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVpcConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagemakerTrainingJobValidationError{
				field:  "VpcConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableSpotTraining

	return nil
}

// SagemakerTrainingJobValidationError is the validation error returned by
// SagemakerTrainingJob.Validate if the designated constraints aren't met.
type SagemakerTrainingJobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SagemakerTrainingJobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SagemakerTrainingJobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SagemakerTrainingJobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SagemakerTrainingJobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SagemakerTrainingJobValidationError) ErrorName() string {
	return "SagemakerTrainingJobValidationError"
}

// Error satisfies the builtin error interface
func (e SagemakerTrainingJobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSagemakerTrainingJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SagemakerTrainingJobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SagemakerTrainingJobValidationError{}

// Validate checks the field values on HPOJobObjective with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HPOJobObjective) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for MetricName

	return nil
}

// HPOJobObjectiveValidationError is the validation error returned by
// HPOJobObjective.Validate if the designated constraints aren't met.
type HPOJobObjectiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HPOJobObjectiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HPOJobObjectiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HPOJobObjectiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HPOJobObjectiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HPOJobObjectiveValidationError) ErrorName() string { return "HPOJobObjectiveValidationError" }

// Error satisfies the builtin error interface
func (e HPOJobObjectiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHPOJobObjective.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HPOJobObjectiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HPOJobObjectiveValidationError{}

// Validate checks the field values on SagemakerHPOJob with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SagemakerHPOJob) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Strategy

	if v, ok := interface{}(m.GetObjective()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagemakerHPOJobValidationError{
				field:  "Objective",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxNumberOfTrainingJobs

	// no validation rules for MaxParallelTrainingJobs

	if v, ok := interface{}(m.GetParameterRanges()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagemakerHPOJobValidationError{
				field:  "ParameterRanges",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTrainingJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagemakerHPOJobValidationError{
				field:  "TrainingJob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SagemakerHPOJobValidationError is the validation error returned by
// SagemakerHPOJob.Validate if the designated constraints aren't met.
type SagemakerHPOJobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SagemakerHPOJobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SagemakerHPOJobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SagemakerHPOJobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SagemakerHPOJobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SagemakerHPOJobValidationError) ErrorName() string { return "SagemakerHPOJobValidationError" }

// Error satisfies the builtin error interface
func (e SagemakerHPOJobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSagemakerHPOJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SagemakerHPOJobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SagemakerHPOJobValidationError{}

// Validate checks the field values on AlgorithmSpecification_MetricDefinition
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *AlgorithmSpecification_MetricDefinition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Regex

	return nil
}

// AlgorithmSpecification_MetricDefinitionValidationError is the validation
// error returned by AlgorithmSpecification_MetricDefinition.Validate if the
// designated constraints aren't met.
type AlgorithmSpecification_MetricDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlgorithmSpecification_MetricDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlgorithmSpecification_MetricDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlgorithmSpecification_MetricDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlgorithmSpecification_MetricDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlgorithmSpecification_MetricDefinitionValidationError) ErrorName() string {
	return "AlgorithmSpecification_MetricDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e AlgorithmSpecification_MetricDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlgorithmSpecification_MetricDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlgorithmSpecification_MetricDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlgorithmSpecification_MetricDefinitionValidationError{}
