// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/service/admin.proto

package service // import "github.com/lyft/flyteidl/gen/pb-go/flyteidl/service"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import admin "github.com/lyft/flyteidl/gen/pb-go/flyteidl/admin"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminServiceClient interface {
	CreateTask(ctx context.Context, in *admin.TaskCreateRequest, opts ...grpc.CallOption) (*admin.TaskCreateResponse, error)
	GetTask(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Task, error)
	ListTaskIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	ListTasks(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.TaskList, error)
	CreateWorkflow(ctx context.Context, in *admin.WorkflowCreateRequest, opts ...grpc.CallOption) (*admin.WorkflowCreateResponse, error)
	GetWorkflow(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Workflow, error)
	ListWorkflowIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	ListWorkflows(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.WorkflowList, error)
	CreateLaunchPlan(ctx context.Context, in *admin.LaunchPlanCreateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error)
	GetLaunchPlan(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error)
	ListLaunchPlanIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	ListLaunchPlans(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error)
	UpdateLaunchPlan(ctx context.Context, in *admin.LaunchPlanUpdateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error)
	CreateExecution(ctx context.Context, in *admin.ExecutionCreateRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)
	RelaunchExecution(ctx context.Context, in *admin.ExecutionRelaunchRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)
	GetExecution(ctx context.Context, in *admin.WorkflowExecutionGetRequest, opts ...grpc.CallOption) (*admin.Execution, error)
	GetExecutionData(ctx context.Context, in *admin.WorkflowExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error)
	ListExecutions(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.ExecutionList, error)
	TerminateExecution(ctx context.Context, in *admin.ExecutionTerminateRequest, opts ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error)
	GetNodeExecution(ctx context.Context, in *admin.NodeExecutionGetRequest, opts ...grpc.CallOption) (*admin.NodeExecution, error)
	ListNodeExecutions(ctx context.Context, in *admin.NodeExecutionListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error)
	ListNodeExecutionsForTask(ctx context.Context, in *admin.NodeExecutionForTaskListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error)
	GetNodeExecutionData(ctx context.Context, in *admin.NodeExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error)
	RegisterProject(ctx context.Context, in *admin.Project, opts ...grpc.CallOption) (*admin.ProjectRegisterResponse, error)
	ListProjects(ctx context.Context, in *admin.ProjectListRequest, opts ...grpc.CallOption) (*admin.Projects, error)
	CreateWorkflowEvent(ctx context.Context, in *admin.WorkflowExecutionEventRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error)
	CreateNodeEvent(ctx context.Context, in *admin.NodeExecutionEventRequest, opts ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error)
	CreateTaskEvent(ctx context.Context, in *admin.TaskExecutionEventRequest, opts ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error)
	GetTaskExecution(ctx context.Context, in *admin.TaskExecutionGetRequest, opts ...grpc.CallOption) (*admin.TaskExecution, error)
	ListTaskExecutions(ctx context.Context, in *admin.TaskExecutionListRequest, opts ...grpc.CallOption) (*admin.TaskExecutionList, error)
	GetTaskExecutionData(ctx context.Context, in *admin.TaskExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CreateTask(ctx context.Context, in *admin.TaskCreateRequest, opts ...grpc.CallOption) (*admin.TaskCreateResponse, error) {
	out := new(admin.TaskCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTask(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Task, error) {
	out := new(admin.Task)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTaskIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTaskIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTasks(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.TaskList, error) {
	out := new(admin.TaskList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateWorkflow(ctx context.Context, in *admin.WorkflowCreateRequest, opts ...grpc.CallOption) (*admin.WorkflowCreateResponse, error) {
	out := new(admin.WorkflowCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetWorkflow(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Workflow, error) {
	out := new(admin.Workflow)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListWorkflowIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListWorkflowIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListWorkflows(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.WorkflowList, error) {
	out := new(admin.WorkflowList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateLaunchPlan(ctx context.Context, in *admin.LaunchPlanCreateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error) {
	out := new(admin.LaunchPlanCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLaunchPlan(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error) {
	out := new(admin.LaunchPlan)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLaunchPlanIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListLaunchPlanIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLaunchPlans(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error) {
	out := new(admin.LaunchPlanList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListLaunchPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLaunchPlan(ctx context.Context, in *admin.LaunchPlanUpdateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error) {
	out := new(admin.LaunchPlanUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateExecution(ctx context.Context, in *admin.ExecutionCreateRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	out := new(admin.ExecutionCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RelaunchExecution(ctx context.Context, in *admin.ExecutionRelaunchRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	out := new(admin.ExecutionCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/RelaunchExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetExecution(ctx context.Context, in *admin.WorkflowExecutionGetRequest, opts ...grpc.CallOption) (*admin.Execution, error) {
	out := new(admin.Execution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetExecutionData(ctx context.Context, in *admin.WorkflowExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error) {
	out := new(admin.WorkflowExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListExecutions(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.ExecutionList, error) {
	out := new(admin.ExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TerminateExecution(ctx context.Context, in *admin.ExecutionTerminateRequest, opts ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error) {
	out := new(admin.ExecutionTerminateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/TerminateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNodeExecution(ctx context.Context, in *admin.NodeExecutionGetRequest, opts ...grpc.CallOption) (*admin.NodeExecution, error) {
	out := new(admin.NodeExecution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetNodeExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListNodeExecutions(ctx context.Context, in *admin.NodeExecutionListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	out := new(admin.NodeExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListNodeExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListNodeExecutionsForTask(ctx context.Context, in *admin.NodeExecutionForTaskListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	out := new(admin.NodeExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListNodeExecutionsForTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNodeExecutionData(ctx context.Context, in *admin.NodeExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error) {
	out := new(admin.NodeExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetNodeExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegisterProject(ctx context.Context, in *admin.Project, opts ...grpc.CallOption) (*admin.ProjectRegisterResponse, error) {
	out := new(admin.ProjectRegisterResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/RegisterProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProjects(ctx context.Context, in *admin.ProjectListRequest, opts ...grpc.CallOption) (*admin.Projects, error) {
	out := new(admin.Projects)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateWorkflowEvent(ctx context.Context, in *admin.WorkflowExecutionEventRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error) {
	out := new(admin.WorkflowExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateWorkflowEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateNodeEvent(ctx context.Context, in *admin.NodeExecutionEventRequest, opts ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error) {
	out := new(admin.NodeExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateNodeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateTaskEvent(ctx context.Context, in *admin.TaskExecutionEventRequest, opts ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error) {
	out := new(admin.TaskExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateTaskEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTaskExecution(ctx context.Context, in *admin.TaskExecutionGetRequest, opts ...grpc.CallOption) (*admin.TaskExecution, error) {
	out := new(admin.TaskExecution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTaskExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTaskExecutions(ctx context.Context, in *admin.TaskExecutionListRequest, opts ...grpc.CallOption) (*admin.TaskExecutionList, error) {
	out := new(admin.TaskExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTaskExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTaskExecutionData(ctx context.Context, in *admin.TaskExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error) {
	out := new(admin.TaskExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTaskExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
type AdminServiceServer interface {
	CreateTask(context.Context, *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error)
	GetTask(context.Context, *admin.ObjectGetRequest) (*admin.Task, error)
	ListTaskIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	ListTasks(context.Context, *admin.ResourceListRequest) (*admin.TaskList, error)
	CreateWorkflow(context.Context, *admin.WorkflowCreateRequest) (*admin.WorkflowCreateResponse, error)
	GetWorkflow(context.Context, *admin.ObjectGetRequest) (*admin.Workflow, error)
	ListWorkflowIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	ListWorkflows(context.Context, *admin.ResourceListRequest) (*admin.WorkflowList, error)
	CreateLaunchPlan(context.Context, *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error)
	GetLaunchPlan(context.Context, *admin.ObjectGetRequest) (*admin.LaunchPlan, error)
	ListLaunchPlanIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	ListLaunchPlans(context.Context, *admin.ResourceListRequest) (*admin.LaunchPlanList, error)
	UpdateLaunchPlan(context.Context, *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error)
	CreateExecution(context.Context, *admin.ExecutionCreateRequest) (*admin.ExecutionCreateResponse, error)
	RelaunchExecution(context.Context, *admin.ExecutionRelaunchRequest) (*admin.ExecutionCreateResponse, error)
	GetExecution(context.Context, *admin.WorkflowExecutionGetRequest) (*admin.Execution, error)
	GetExecutionData(context.Context, *admin.WorkflowExecutionGetDataRequest) (*admin.WorkflowExecutionGetDataResponse, error)
	ListExecutions(context.Context, *admin.ResourceListRequest) (*admin.ExecutionList, error)
	TerminateExecution(context.Context, *admin.ExecutionTerminateRequest) (*admin.ExecutionTerminateResponse, error)
	GetNodeExecution(context.Context, *admin.NodeExecutionGetRequest) (*admin.NodeExecution, error)
	ListNodeExecutions(context.Context, *admin.NodeExecutionListRequest) (*admin.NodeExecutionList, error)
	ListNodeExecutionsForTask(context.Context, *admin.NodeExecutionForTaskListRequest) (*admin.NodeExecutionList, error)
	GetNodeExecutionData(context.Context, *admin.NodeExecutionGetDataRequest) (*admin.NodeExecutionGetDataResponse, error)
	RegisterProject(context.Context, *admin.Project) (*admin.ProjectRegisterResponse, error)
	ListProjects(context.Context, *admin.ProjectListRequest) (*admin.Projects, error)
	CreateWorkflowEvent(context.Context, *admin.WorkflowExecutionEventRequest) (*admin.WorkflowExecutionEventResponse, error)
	CreateNodeEvent(context.Context, *admin.NodeExecutionEventRequest) (*admin.NodeExecutionEventResponse, error)
	CreateTaskEvent(context.Context, *admin.TaskExecutionEventRequest) (*admin.TaskExecutionEventResponse, error)
	GetTaskExecution(context.Context, *admin.TaskExecutionGetRequest) (*admin.TaskExecution, error)
	ListTaskExecutions(context.Context, *admin.TaskExecutionListRequest) (*admin.TaskExecutionList, error)
	GetTaskExecutionData(context.Context, *admin.TaskExecutionGetDataRequest) (*admin.TaskExecutionGetDataResponse, error)
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTask(ctx, req.(*admin.TaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTask(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTaskIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTaskIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTaskIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTaskIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTasks(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateWorkflow(ctx, req.(*admin.WorkflowCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetWorkflow(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListWorkflowIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListWorkflowIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListWorkflowIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListWorkflowIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListWorkflows(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.LaunchPlanCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateLaunchPlan(ctx, req.(*admin.LaunchPlanCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLaunchPlan(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLaunchPlanIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLaunchPlanIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListLaunchPlanIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLaunchPlanIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLaunchPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLaunchPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListLaunchPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLaunchPlans(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.LaunchPlanUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLaunchPlan(ctx, req.(*admin.LaunchPlanUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateExecution(ctx, req.(*admin.ExecutionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RelaunchExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionRelaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RelaunchExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/RelaunchExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RelaunchExecution(ctx, req.(*admin.ExecutionRelaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetExecution(ctx, req.(*admin.WorkflowExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetExecutionData(ctx, req.(*admin.WorkflowExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListExecutions(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TerminateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TerminateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/TerminateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TerminateExecution(ctx, req.(*admin.ExecutionTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNodeExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNodeExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetNodeExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNodeExecution(ctx, req.(*admin.NodeExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListNodeExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListNodeExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListNodeExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListNodeExecutions(ctx, req.(*admin.NodeExecutionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListNodeExecutionsForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionForTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListNodeExecutionsForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListNodeExecutionsForTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListNodeExecutionsForTask(ctx, req.(*admin.NodeExecutionForTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNodeExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNodeExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetNodeExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNodeExecutionData(ctx, req.(*admin.NodeExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegisterProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegisterProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/RegisterProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegisterProject(ctx, req.(*admin.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProjects(ctx, req.(*admin.ProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateWorkflowEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateWorkflowEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateWorkflowEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateWorkflowEvent(ctx, req.(*admin.WorkflowExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateNodeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateNodeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateNodeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateNodeEvent(ctx, req.(*admin.NodeExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTaskEvent(ctx, req.(*admin.TaskExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTaskExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTaskExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTaskExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTaskExecution(ctx, req.(*admin.TaskExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTaskExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTaskExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTaskExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTaskExecutions(ctx, req.(*admin.TaskExecutionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTaskExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTaskExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTaskExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTaskExecutionData(ctx, req.(*admin.TaskExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.service.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _AdminService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _AdminService_GetTask_Handler,
		},
		{
			MethodName: "ListTaskIds",
			Handler:    _AdminService_ListTaskIds_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _AdminService_ListTasks_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _AdminService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _AdminService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflowIds",
			Handler:    _AdminService_ListWorkflowIds_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _AdminService_ListWorkflows_Handler,
		},
		{
			MethodName: "CreateLaunchPlan",
			Handler:    _AdminService_CreateLaunchPlan_Handler,
		},
		{
			MethodName: "GetLaunchPlan",
			Handler:    _AdminService_GetLaunchPlan_Handler,
		},
		{
			MethodName: "ListLaunchPlanIds",
			Handler:    _AdminService_ListLaunchPlanIds_Handler,
		},
		{
			MethodName: "ListLaunchPlans",
			Handler:    _AdminService_ListLaunchPlans_Handler,
		},
		{
			MethodName: "UpdateLaunchPlan",
			Handler:    _AdminService_UpdateLaunchPlan_Handler,
		},
		{
			MethodName: "CreateExecution",
			Handler:    _AdminService_CreateExecution_Handler,
		},
		{
			MethodName: "RelaunchExecution",
			Handler:    _AdminService_RelaunchExecution_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _AdminService_GetExecution_Handler,
		},
		{
			MethodName: "GetExecutionData",
			Handler:    _AdminService_GetExecutionData_Handler,
		},
		{
			MethodName: "ListExecutions",
			Handler:    _AdminService_ListExecutions_Handler,
		},
		{
			MethodName: "TerminateExecution",
			Handler:    _AdminService_TerminateExecution_Handler,
		},
		{
			MethodName: "GetNodeExecution",
			Handler:    _AdminService_GetNodeExecution_Handler,
		},
		{
			MethodName: "ListNodeExecutions",
			Handler:    _AdminService_ListNodeExecutions_Handler,
		},
		{
			MethodName: "ListNodeExecutionsForTask",
			Handler:    _AdminService_ListNodeExecutionsForTask_Handler,
		},
		{
			MethodName: "GetNodeExecutionData",
			Handler:    _AdminService_GetNodeExecutionData_Handler,
		},
		{
			MethodName: "RegisterProject",
			Handler:    _AdminService_RegisterProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _AdminService_ListProjects_Handler,
		},
		{
			MethodName: "CreateWorkflowEvent",
			Handler:    _AdminService_CreateWorkflowEvent_Handler,
		},
		{
			MethodName: "CreateNodeEvent",
			Handler:    _AdminService_CreateNodeEvent_Handler,
		},
		{
			MethodName: "CreateTaskEvent",
			Handler:    _AdminService_CreateTaskEvent_Handler,
		},
		{
			MethodName: "GetTaskExecution",
			Handler:    _AdminService_GetTaskExecution_Handler,
		},
		{
			MethodName: "ListTaskExecutions",
			Handler:    _AdminService_ListTaskExecutions_Handler,
		},
		{
			MethodName: "GetTaskExecutionData",
			Handler:    _AdminService_GetTaskExecutionData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl/service/admin.proto",
}

func init() { proto.RegisterFile("flyteidl/service/admin.proto", fileDescriptor_admin_ef635a1ed571e608) }

var fileDescriptor_admin_ef635a1ed571e608 = []byte{
	// 1680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4b, 0x6c, 0x1b, 0xc5,
	0x1b, 0xd7, 0xd8, 0x7f, 0xfd, 0x11, 0xd3, 0x57, 0x3a, 0x14, 0x9a, 0xb8, 0x4d, 0xd9, 0x6e, 0x94,
	0xa6, 0x79, 0x79, 0xd3, 0x97, 0x4a, 0x0b, 0x15, 0xb8, 0x6d, 0x1a, 0xa5, 0xaa, 0xda, 0x2a, 0x14,
	0x21, 0x45, 0x15, 0xd1, 0xd8, 0x3b, 0xb6, 0xb7, 0x5d, 0xef, 0x9a, 0xdd, 0xb1, 0x43, 0x14, 0x45,
	0x42, 0x9c, 0xe8, 0x35, 0x3c, 0x2b, 0x2a, 0x50, 0x05, 0x48, 0x80, 0x28, 0x07, 0x40, 0x48, 0x5c,
	0x10, 0x07, 0x0e, 0x15, 0x07, 0x0e, 0x45, 0x42, 0x70, 0x80, 0x53, 0x2f, 0x5c, 0x7a, 0x42, 0x9c,
	0x38, 0xa0, 0x9d, 0x9d, 0x59, 0xef, 0xec, 0xc3, 0x5e, 0x57, 0x2d, 0x52, 0x11, 0xa7, 0x24, 0xfe,
	0x7e, 0x33, 0xf3, 0xfb, 0x7e, 0xf3, 0xbd, 0x32, 0x86, 0x3b, 0xab, 0xe6, 0x0a, 0x25, 0x86, 0x6e,
	0x6a, 0x2e, 0x71, 0xda, 0x46, 0x85, 0x68, 0x58, 0x6f, 0x18, 0x56, 0xb1, 0xe9, 0xd8, 0xd4, 0x46,
	0x03, 0xc2, 0x5a, 0xe4, 0xd6, 0xc2, 0xce, 0x9a, 0x6d, 0xd7, 0x4c, 0xa2, 0xe1, 0xa6, 0xa1, 0x61,
	0xcb, 0xb2, 0x29, 0xa6, 0x86, 0x6d, 0xb9, 0x3e, 0xbe, 0xd0, 0xd9, 0x8d, 0xed, 0xa2, 0x35, 0x1d,
	0xfb, 0x12, 0xa9, 0x50, 0x6e, 0x1d, 0x8a, 0x58, 0x29, 0x76, 0x2f, 0x73, 0xd3, 0x70, 0xc4, 0xb4,
	0x6c, 0x3b, 0x97, 0xab, 0xa6, 0xbd, 0xcc, 0xcd, 0x4a, 0xc4, 0x6c, 0xe2, 0x96, 0x55, 0xa9, 0x2f,
	0x35, 0x4d, 0xcc, 0x99, 0x16, 0x0a, 0x11, 0x04, 0x69, 0x13, 0x4b, 0x9c, 0xbb, 0x2b, 0x6a, 0x7b,
	0x89, 0x54, 0x5a, 0x1e, 0x6d, 0x6e, 0x1f, 0x89, 0xd8, 0x2d, 0x5b, 0x27, 0x4b, 0xbd, 0x40, 0x1e,
	0xf9, 0x18, 0x68, 0x47, 0x04, 0x54, 0xb1, 0x1b, 0x8d, 0xc0, 0x38, 0xc5, 0x7e, 0x54, 0xa6, 0x6b,
	0xc4, 0x9a, 0x76, 0x97, 0x71, 0xad, 0x46, 0x1c, 0xcd, 0x6e, 0x32, 0xf9, 0xe2, 0x52, 0xee, 0xff,
	0xfc, 0x09, 0xb8, 0xb1, 0xe4, 0x6d, 0xf2, 0xac, 0xaf, 0x3c, 0xfa, 0x2e, 0x07, 0xe1, 0x09, 0x87,
	0x60, 0x4a, 0x2e, 0x60, 0xf7, 0x32, 0xda, 0x5d, 0x0c, 0xee, 0xc6, 0xbf, 0x31, 0xef, 0x53, 0xdf,
	0xbe, 0x40, 0x5e, 0x6c, 0x11, 0x97, 0x16, 0xd4, 0x6e, 0x10, 0xb7, 0x69, 0x5b, 0x2e, 0x51, 0xef,
	0x80, 0xf5, 0xd2, 0x2d, 0x50, 0x18, 0xf5, 0x3f, 0x56, 0xb0, 0xa5, 0x2b, 0x0e, 0xa9, 0x19, 0x2e,
	0x25, 0x8e, 0x82, 0x15, 0xcf, 0x49, 0x45, 0x27, 0x55, 0xc3, 0x32, 0x3c, 0x6e, 0xa7, 0x8f, 0xc3,
	0xfc, 0xc1, 0x99, 0x19, 0xf4, 0x24, 0x3c, 0xb2, 0x40, 0x68, 0xcb, 0xb1, 0x88, 0xae, 0x54, 0x6d,
	0x47, 0x29, 0x63, 0x6f, 0x15, 0x3b, 0x54, 0xa1, 0x75, 0x4c, 0x95, 0x06, 0x5e, 0x51, 0xea, 0xb8,
	0x4d, 0x94, 0x2a, 0x36, 0x4c, 0xa2, 0x2b, 0x6d, 0x6c, 0x1a, 0x3a, 0x73, 0xaf, 0x78, 0x9a, 0x78,
	0x7b, 0x1c, 0x41, 0x2f, 0xc0, 0x8b, 0xd2, 0x1e, 0x58, 0xde, 0xc1, 0x21, 0x55, 0xe2, 0x10, 0xab,
	0x42, 0x5c, 0x05, 0x5b, 0x8a, 0xa1, 0x13, 0x8b, 0x1a, 0x15, 0x6c, 0x2a, 0xde, 0x4f, 0xba, 0xe2,
	0x63, 0xea, 0xd8, 0x55, 0xb0, 0xe9, 0x10, 0xac, 0xaf, 0x28, 0x65, 0x42, 0xac, 0x80, 0x39, 0xd1,
	0x8b, 0xaf, 0xfc, 0x78, 0xfb, 0xb5, 0x1c, 0x52, 0x37, 0xb1, 0x40, 0x6d, 0xef, 0x63, 0xd7, 0xe5,
	0x1e, 0x05, 0x13, 0xe8, 0x55, 0x00, 0x1f, 0x9a, 0x23, 0x94, 0x69, 0xa8, 0x44, 0x05, 0x3a, 0x57,
	0xf6, 0xc2, 0x75, 0x8e, 0x50, 0x21, 0xe1, 0xb6, 0x24, 0x09, 0xd5, 0x59, 0xb6, 0xfb, 0xd3, 0xe8,
	0x98, 0xb4, 0xbb, 0xb6, 0x6a, 0xe8, 0x45, 0x1e, 0xf1, 0x6b, 0xec, 0x0f, 0xdd, 0x6e, 0x60, 0xc3,
	0xf2, 0x7f, 0xb7, 0x70, 0x83, 0xf8, 0xbf, 0xb5, 0x89, 0xe3, 0x1a, 0xb6, 0xb5, 0x86, 0xde, 0x02,
	0x70, 0xc3, 0x19, 0xc3, 0x65, 0x5c, 0xe6, 0x75, 0x17, 0xcd, 0x44, 0x0f, 0x3b, 0x8b, 0x1b, 0x44,
	0x9f, 0x65, 0x1e, 0xcf, 0x33, 0x05, 0xaa, 0x06, 0x71, 0xbc, 0x15, 0x82, 0xde, 0x78, 0xe6, 0x15,
	0xea, 0x24, 0xe3, 0x3c, 0x8a, 0x46, 0xc2, 0x9c, 0x97, 0x0c, 0xdd, 0xd5, 0x56, 0x3b, 0x9c, 0x39,
	0x61, 0xf4, 0x19, 0x80, 0x0f, 0x0b, 0x66, 0x2e, 0x1a, 0x89, 0x9e, 0xb2, 0x40, 0x5c, 0xbb, 0xe5,
	0x54, 0x48, 0x98, 0xca, 0x60, 0x92, 0x52, 0xec, 0xe4, 0x32, 0x3b, 0xf9, 0x22, 0x9a, 0xe9, 0x57,
	0xad, 0xc5, 0xbd, 0x68, 0x4f, 0xb6, 0x35, 0xe8, 0xe7, 0x1c, 0xdc, 0xec, 0x87, 0xf0, 0xf3, 0xbc,
	0x72, 0xa0, 0xd1, 0x28, 0x21, 0x61, 0x91, 0x93, 0x64, 0x4f, 0x2f, 0x18, 0x4f, 0x94, 0x3f, 0xc1,
	0x7a, 0xe9, 0x27, 0x50, 0x18, 0x4f, 0x4e, 0x14, 0x51, 0xaf, 0x1e, 0xe0, 0x64, 0x79, 0x4c, 0xdd,
	0x2a, 0xc4, 0x16, 0xde, 0xb0, 0x84, 0x79, 0x1d, 0xc0, 0x0d, 0x73, 0x84, 0x06, 0xba, 0xf6, 0x4e,
	0x9a, 0xc1, 0x34, 0x49, 0xd5, 0x79, 0x76, 0xd2, 0x09, 0x54, 0x8a, 0x9d, 0xd4, 0x77, 0xf2, 0xbc,
	0x07, 0xe0, 0x16, 0x2f, 0xbc, 0xc4, 0xde, 0xf7, 0x3d, 0x81, 0x34, 0xc6, 0x7d, 0x1c, 0x8d, 0x45,
	0xb9, 0xa7, 0x25, 0xd1, 0x37, 0x00, 0x6e, 0x0a, 0x33, 0xcc, 0x98, 0x48, 0x3b, 0xd3, 0xd4, 0x63,
	0x2c, 0x2e, 0x31, 0x16, 0x3a, 0x3a, 0x78, 0x37, 0x0a, 0x2e, 0x4e, 0xa1, 0x89, 0xec, 0xeb, 0xd0,
	0xed, 0x1c, 0x1c, 0xf0, 0xc3, 0xfd, 0x0c, 0xeb, 0xb7, 0xe7, 0x4d, 0x6c, 0xa1, 0xb1, 0x28, 0xbd,
	0x8e, 0x4d, 0x4e, 0xac, 0xbd, 0xbd, 0x81, 0x3c, 0xb5, 0xfe, 0x02, 0xeb, 0xa5, 0x5f, 0x40, 0x61,
	0x2a, 0x39, 0xb5, 0xfc, 0x5e, 0xaf, 0x78, 0xbd, 0xfe, 0x01, 0xce, 0xae, 0x21, 0x75, 0x9b, 0x50,
	0x3e, 0x34, 0xbc, 0xb0, 0x04, 0x7b, 0x07, 0xc0, 0x4d, 0x73, 0x84, 0x86, 0x34, 0xee, 0x9d, 0x62,
	0x85, 0x74, 0x71, 0xd5, 0x33, 0xec, 0xc0, 0x53, 0xe8, 0x64, 0xd2, 0x81, 0x7d, 0xe7, 0xd9, 0x07,
	0x00, 0x6e, 0xf5, 0x22, 0xaf, 0x73, 0xc0, 0x7d, 0xcf, 0xb4, 0xfd, 0xcc, 0x81, 0x50, 0xac, 0x86,
	0x1c, 0x48, 0x4b, 0xb6, 0x9b, 0xbc, 0x1c, 0x74, 0x68, 0x66, 0x4c, 0xb7, 0x5d, 0xe9, 0x4a, 0x32,
	0x32, 0x4d, 0x46, 0xe6, 0x12, 0x3a, 0x7c, 0x97, 0x6a, 0x2e, 0x6a, 0x68, 0xba, 0xaf, 0xa5, 0xe8,
	0x2b, 0x00, 0x07, 0x9e, 0x6b, 0xea, 0x99, 0xd3, 0xce, 0xc7, 0x66, 0x48, 0x3b, 0x01, 0xe4, 0x69,
	0x77, 0x8e, 0x79, 0x36, 0x5f, 0xb8, 0x27, 0x71, 0xe2, 0x05, 0xf2, 0x0f, 0x39, 0xb8, 0xc5, 0xcf,
	0xe1, 0x59, 0x31, 0x17, 0xa3, 0x58, 0x7b, 0x0d, 0x4c, 0x72, 0xb5, 0x18, 0xeb, 0x89, 0xe3, 0xac,
	0x7f, 0x07, 0xeb, 0xa5, 0x9b, 0xa0, 0xb0, 0x43, 0x14, 0x8b, 0x4e, 0xeb, 0x0d, 0x86, 0xf1, 0x07,
	0xad, 0x36, 0x6c, 0x57, 0x91, 0xb8, 0x82, 0xc0, 0x07, 0x56, 0x19, 0x7e, 0xcd, 0xc1, 0xad, 0x0b,
	0xc4, 0xbf, 0x96, 0x8e, 0xa4, 0x7b, 0x53, 0xa5, 0x12, 0xd8, 0xbe, 0x45, 0xfd, 0x03, 0xac, 0x97,
	0xbe, 0x07, 0x85, 0x61, 0xb1, 0xc1, 0xbf, 0x42, 0x56, 0x45, 0xdd, 0x11, 0x97, 0x55, 0x73, 0xb8,
	0x8b, 0x9e, 0xbe, 0x6f, 0x00, 0xb8, 0x71, 0x8e, 0xd0, 0x8e, 0xb4, 0x93, 0x69, 0xbd, 0x37, 0x80,
	0x84, 0x6a, 0xf0, 0x50, 0xaa, 0xba, 0xea, 0x31, 0x46, 0xe0, 0x30, 0x3a, 0x94, 0x40, 0xa0, 0x77,
	0x62, 0xa1, 0xaf, 0x01, 0x1c, 0x08, 0xf3, 0x3a, 0x89, 0x29, 0x46, 0x5a, 0x16, 0x6e, 0x1e, 0x52,
	0xf0, 0x9b, 0xc9, 0xbe, 0x80, 0x87, 0xc1, 0x71, 0x46, 0xfb, 0x29, 0x74, 0x54, 0xd0, 0xd6, 0x31,
	0xc5, 0x7d, 0x72, 0xbf, 0x02, 0xe0, 0x66, 0xaf, 0x70, 0x06, 0x87, 0x64, 0xac, 0xc3, 0xc3, 0xa9,
	0x6a, 0xb2, 0x32, 0x7c, 0x80, 0x51, 0x9b, 0x46, 0x93, 0x7d, 0x28, 0x8a, 0x6e, 0x00, 0x88, 0x2e,
	0x10, 0xa7, 0x61, 0x58, 0x52, 0x4d, 0x1a, 0x4f, 0x3d, 0x2a, 0x00, 0x0b, 0x56, 0x13, 0x59, 0xa0,
	0x5c, 0xbd, 0x67, 0x18, 0xc5, 0xa3, 0x13, 0x77, 0x77, 0xe9, 0x5e, 0x3c, 0xde, 0xf2, 0xef, 0xfd,
	0xac, 0xad, 0x87, 0xd8, 0xc6, 0x92, 0x58, 0x32, 0x87, 0xe2, 0x71, 0xb8, 0x2b, 0x50, 0x6d, 0x33,
	0x7a, 0x4d, 0x64, 0x09, 0x7a, 0xf2, 0x33, 0x87, 0xcf, 0x31, 0xf8, 0x73, 0x29, 0x4a, 0x58, 0xb2,
	0x84, 0xd9, 0x4b, 0x86, 0x4e, 0x63, 0x60, 0xbb, 0x1b, 0xfa, 0x1a, 0xfa, 0x0d, 0x40, 0xe4, 0x5d,
	0xa1, 0xc4, 0xc6, 0x8d, 0x57, 0x31, 0xc9, 0x1e, 0x8e, 0x8c, 0xdd, 0x3d, 0x91, 0xea, 0x2a, 0xf3,
	0xad, 0x85, 0xdc, 0x54, 0xdf, 0x82, 0x61, 0x3d, 0xc5, 0xc3, 0x64, 0x7b, 0xe0, 0x67, 0xb2, 0xd9,
	0x8f, 0xf8, 0x0f, 0xff, 0x07, 0x87, 0xe2, 0x0e, 0x9e, 0xb2, 0x1d, 0xf6, 0xc6, 0xa0, 0x75, 0x65,
	0xcf, 0x51, 0x7d, 0xba, 0xfb, 0x45, 0x9e, 0xf9, 0xfb, 0x69, 0x1e, 0x7d, 0x9c, 0x17, 0x1e, 0x57,
	0xea, 0x86, 0xa9, 0x3b, 0x24, 0xfa, 0x30, 0xe5, 0x6a, 0xab, 0xf2, 0x07, 0x4b, 0xe2, 0x6e, 0xa4,
	0x4f, 0x52, 0x54, 0xe9, 0x7b, 0x69, 0x20, 0x58, 0xdf, 0x2b, 0x79, 0xe4, 0x64, 0x59, 0x27, 0x42,
	0x2b, 0x09, 0xcd, 0x5f, 0x35, 0xba, 0xfa, 0x20, 0x30, 0x5d, 0xc8, 0x0a, 0x48, 0x2a, 0x2b, 0x01,
	0x10, 0xf3, 0x4f, 0x12, 0xc6, 0x21, 0xd4, 0x59, 0x59, 0xc2, 0x94, 0x92, 0x46, 0x93, 0xae, 0xa1,
	0x3b, 0x00, 0x6e, 0x8b, 0x66, 0x37, 0xab, 0xec, 0x93, 0xbd, 0x32, 0x3c, 0x5c, 0xd5, 0xa7, 0xb2,
	0x81, 0x79, 0x4d, 0x8a, 0x25, 0x06, 0xab, 0xe8, 0xff, 0x50, 0xe6, 0xbf, 0x99, 0x83, 0x5b, 0x16,
	0x78, 0x53, 0x3e, 0xef, 0xef, 0x88, 0xb6, 0x47, 0xe9, 0x73, 0x43, 0x7c, 0x56, 0xe1, 0x06, 0xb1,
	0x41, 0xe0, 0xd2, 0xb7, 0x60, 0xbd, 0x74, 0x1d, 0x14, 0x26, 0x17, 0x3a, 0xff, 0x22, 0x72, 0xba,
	0x0a, 0x36, 0x6d, 0xab, 0xa6, 0x2c, 0x1b, 0xb4, 0xee, 0xcf, 0x1c, 0x8a, 0xcf, 0xd6, 0x3d, 0x5d,
	0x84, 0xf9, 0xfd, 0x33, 0xfb, 0xd0, 0x18, 0x1c, 0x95, 0xa6, 0x0e, 0xb7, 0x55, 0xa9, 0x10, 0xd7,
	0xad, 0xb6, 0x4c, 0x3e, 0x3c, 0x38, 0x7c, 0x4a, 0xb9, 0x07, 0x93, 0x0e, 0x13, 0xfe, 0x51, 0x75,
	0x40, 0x08, 0xcf, 0x39, 0xb2, 0xb9, 0xae, 0x0a, 0x37, 0x7a, 0x79, 0xcc, 0x3d, 0x74, 0x91, 0x9a,
	0xe2, 0x7b, 0xd7, 0xf7, 0x35, 0xb1, 0x5a, 0x1d, 0xf4, 0xdf, 0x3a, 0x51, 0xec, 0x28, 0x74, 0x15,
	0xc0, 0x47, 0xe4, 0x57, 0xb1, 0xd9, 0x36, 0xb1, 0x28, 0x9a, 0xee, 0x39, 0x19, 0x30, 0x9c, 0x38,
	0xba, 0x98, 0x15, 0xce, 0x6f, 0x68, 0x84, 0x11, 0x1a, 0x56, 0x07, 0x83, 0x46, 0xe8, 0x99, 0x5d,
	0xf9, 0x59, 0xe9, 0x0a, 0x10, 0xff, 0x2c, 0xb0, 0x00, 0x66, 0xbc, 0xc6, 0xbb, 0xc6, 0xb6, 0xc4,
	0x69, 0x22, 0x0b, 0x94, 0xf3, 0x79, 0x3c, 0xfa, 0x1f, 0x38, 0xe7, 0xe3, 0x05, 0x6a, 0x84, 0x8b,
	0x57, 0x8c, 0x53, 0xb8, 0x30, 0x53, 0x36, 0x2e, 0x49, 0xd0, 0x1e, 0x5c, 0x82, 0xf7, 0xe9, 0x97,
	0xf3, 0x6c, 0x06, 0x90, 0xb6, 0x88, 0xcf, 0x00, 0x92, 0xb9, 0xdb, 0x0c, 0x20, 0x01, 0xd5, 0xf7,
	0x73, 0xec, 0xf8, 0x6b, 0x39, 0x74, 0x35, 0x27, 0xbd, 0x03, 0x47, 0x8a, 0x41, 0xe6, 0x06, 0xd1,
	0x47, 0x47, 0xc8, 0xdc, 0x02, 0x7a, 0xd4, 0xfc, 0xc4, 0x22, 0x9f, 0x54, 0xd5, 0xe3, 0x65, 0x3c,
	0xb1, 0x6e, 0xc7, 0x0b, 0xf5, 0xdb, 0x39, 0x7f, 0x62, 0x91, 0xb4, 0x4b, 0x98, 0x58, 0x24, 0x7b,
	0xd7, 0x16, 0x1e, 0x43, 0xaa, 0x5f, 0x02, 0x76, 0x13, 0x37, 0x00, 0xfa, 0x04, 0xa4, 0xde, 0x44,
	0xe6, 0x6b, 0xc8, 0x7a, 0x07, 0xd9, 0x2e, 0x20, 0x5d, 0x7d, 0x74, 0x2d, 0xcf, 0x7a, 0x98, 0xe4,
	0x4f, 0x72, 0x0f, 0x8b, 0x46, 0x68, 0xd7, 0x1e, 0x96, 0x0c, 0xe6, 0x29, 0xf3, 0x91, 0x1f, 0xb4,
	0xd7, 0x73, 0xe8, 0xdd, 0x9c, 0xd4, 0xc6, 0xfe, 0x8b, 0xdc, 0x48, 0xe4, 0x1e, 0x3f, 0xb4, 0x78,
	0xa0, 0x66, 0xd0, 0x7a, 0xab, 0x5c, 0xac, 0xd8, 0x0d, 0xcd, 0x5c, 0xa9, 0x52, 0x2d, 0xf8, 0x46,
	0xb2, 0x46, 0x2c, 0xad, 0x59, 0x9e, 0xae, 0xd9, 0x5a, 0xf4, 0x2b, 0xdf, 0xf2, 0xff, 0xd9, 0x57,
	0x8e, 0x07, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x07, 0x44, 0xd5, 0x0d, 0x1e, 0x00, 0x00,
}
