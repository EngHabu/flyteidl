// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sagemaker/trainingjob.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto();
namespace flyteidl {
namespace plugins {
namespace sagemaker {
class AlgorithmSpecification;
class AlgorithmSpecificationDefaultTypeInternal;
extern AlgorithmSpecificationDefaultTypeInternal _AlgorithmSpecification_default_instance_;
class AlgorithmSpecification_MetricDefinition;
class AlgorithmSpecification_MetricDefinitionDefaultTypeInternal;
extern AlgorithmSpecification_MetricDefinitionDefaultTypeInternal _AlgorithmSpecification_MetricDefinition_default_instance_;
class ResourceConfig;
class ResourceConfigDefaultTypeInternal;
extern ResourceConfigDefaultTypeInternal _ResourceConfig_default_instance_;
class StoppingCondition;
class StoppingConditionDefaultTypeInternal;
extern StoppingConditionDefaultTypeInternal _StoppingCondition_default_instance_;
class TrainingJob;
class TrainingJobDefaultTypeInternal;
extern TrainingJobDefaultTypeInternal _TrainingJob_default_instance_;
class VpcConfig;
class VpcConfigDefaultTypeInternal;
extern VpcConfigDefaultTypeInternal _VpcConfig_default_instance_;
}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::sagemaker::AlgorithmSpecification* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmSpecification>(Arena*);
template<> ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition>(Arena*);
template<> ::flyteidl::plugins::sagemaker::ResourceConfig* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::ResourceConfig>(Arena*);
template<> ::flyteidl::plugins::sagemaker::StoppingCondition* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::StoppingCondition>(Arena*);
template<> ::flyteidl::plugins::sagemaker::TrainingJob* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::TrainingJob>(Arena*);
template<> ::flyteidl::plugins::sagemaker::VpcConfig* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::VpcConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {
namespace sagemaker {

// ===================================================================

class AlgorithmSpecification_MetricDefinition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition) */ {
 public:
  AlgorithmSpecification_MetricDefinition();
  virtual ~AlgorithmSpecification_MetricDefinition();

  AlgorithmSpecification_MetricDefinition(const AlgorithmSpecification_MetricDefinition& from);

  inline AlgorithmSpecification_MetricDefinition& operator=(const AlgorithmSpecification_MetricDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmSpecification_MetricDefinition(AlgorithmSpecification_MetricDefinition&& from) noexcept
    : AlgorithmSpecification_MetricDefinition() {
    *this = ::std::move(from);
  }

  inline AlgorithmSpecification_MetricDefinition& operator=(AlgorithmSpecification_MetricDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmSpecification_MetricDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmSpecification_MetricDefinition* internal_default_instance() {
    return reinterpret_cast<const AlgorithmSpecification_MetricDefinition*>(
               &_AlgorithmSpecification_MetricDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AlgorithmSpecification_MetricDefinition* other);
  friend void swap(AlgorithmSpecification_MetricDefinition& a, AlgorithmSpecification_MetricDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmSpecification_MetricDefinition* New() const final {
    return CreateMaybeMessage<AlgorithmSpecification_MetricDefinition>(nullptr);
  }

  AlgorithmSpecification_MetricDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmSpecification_MetricDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmSpecification_MetricDefinition& from);
  void MergeFrom(const AlgorithmSpecification_MetricDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmSpecification_MetricDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string regex = 2;
  void clear_regex();
  static const int kRegexFieldNumber = 2;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_regex(::std::string&& value);
  #endif
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmSpecification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.AlgorithmSpecification) */ {
 public:
  AlgorithmSpecification();
  virtual ~AlgorithmSpecification();

  AlgorithmSpecification(const AlgorithmSpecification& from);

  inline AlgorithmSpecification& operator=(const AlgorithmSpecification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmSpecification(AlgorithmSpecification&& from) noexcept
    : AlgorithmSpecification() {
    *this = ::std::move(from);
  }

  inline AlgorithmSpecification& operator=(AlgorithmSpecification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmSpecification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmSpecification* internal_default_instance() {
    return reinterpret_cast<const AlgorithmSpecification*>(
               &_AlgorithmSpecification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AlgorithmSpecification* other);
  friend void swap(AlgorithmSpecification& a, AlgorithmSpecification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmSpecification* New() const final {
    return CreateMaybeMessage<AlgorithmSpecification>(nullptr);
  }

  AlgorithmSpecification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmSpecification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmSpecification& from);
  void MergeFrom(const AlgorithmSpecification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmSpecification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlgorithmSpecification_MetricDefinition MetricDefinition;

  // accessors -------------------------------------------------------

  // repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition metric_definitions = 4;
  int metric_definitions_size() const;
  void clear_metric_definitions();
  static const int kMetricDefinitionsFieldNumber = 4;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* mutable_metric_definitions(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >*
      mutable_metric_definitions();
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition& metric_definitions(int index) const;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* add_metric_definitions();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >&
      metric_definitions() const;

  // string training_image = 1;
  void clear_training_image();
  static const int kTrainingImageFieldNumber = 1;
  const ::std::string& training_image() const;
  void set_training_image(const ::std::string& value);
  #if LANG_CXX11
  void set_training_image(::std::string&& value);
  #endif
  void set_training_image(const char* value);
  void set_training_image(const char* value, size_t size);
  ::std::string* mutable_training_image();
  ::std::string* release_training_image();
  void set_allocated_training_image(::std::string* training_image);

  // string training_input_mode = 2;
  void clear_training_input_mode();
  static const int kTrainingInputModeFieldNumber = 2;
  const ::std::string& training_input_mode() const;
  void set_training_input_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_training_input_mode(::std::string&& value);
  #endif
  void set_training_input_mode(const char* value);
  void set_training_input_mode(const char* value, size_t size);
  ::std::string* mutable_training_input_mode();
  ::std::string* release_training_input_mode();
  void set_allocated_training_input_mode(::std::string* training_input_mode);

  // string algorithm_name = 3;
  void clear_algorithm_name();
  static const int kAlgorithmNameFieldNumber = 3;
  const ::std::string& algorithm_name() const;
  void set_algorithm_name(const ::std::string& value);
  #if LANG_CXX11
  void set_algorithm_name(::std::string&& value);
  #endif
  void set_algorithm_name(const char* value);
  void set_algorithm_name(const char* value, size_t size);
  ::std::string* mutable_algorithm_name();
  ::std::string* release_algorithm_name();
  void set_allocated_algorithm_name(::std::string* algorithm_name);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.AlgorithmSpecification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition > metric_definitions_;
  ::google::protobuf::internal::ArenaStringPtr training_image_;
  ::google::protobuf::internal::ArenaStringPtr training_input_mode_;
  ::google::protobuf::internal::ArenaStringPtr algorithm_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
};
// -------------------------------------------------------------------

class ResourceConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.ResourceConfig) */ {
 public:
  ResourceConfig();
  virtual ~ResourceConfig();

  ResourceConfig(const ResourceConfig& from);

  inline ResourceConfig& operator=(const ResourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceConfig(ResourceConfig&& from) noexcept
    : ResourceConfig() {
    *this = ::std::move(from);
  }

  inline ResourceConfig& operator=(ResourceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceConfig*>(
               &_ResourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResourceConfig* other);
  friend void swap(ResourceConfig& a, ResourceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceConfig* New() const final {
    return CreateMaybeMessage<ResourceConfig>(nullptr);
  }

  ResourceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceConfig& from);
  void MergeFrom(const ResourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_type = 1;
  void clear_instance_type();
  static const int kInstanceTypeFieldNumber = 1;
  const ::std::string& instance_type() const;
  void set_instance_type(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_type(::std::string&& value);
  #endif
  void set_instance_type(const char* value);
  void set_instance_type(const char* value, size_t size);
  ::std::string* mutable_instance_type();
  ::std::string* release_instance_type();
  void set_allocated_instance_type(::std::string* instance_type);

  // string volume_kms_key_id = 4;
  void clear_volume_kms_key_id();
  static const int kVolumeKmsKeyIdFieldNumber = 4;
  const ::std::string& volume_kms_key_id() const;
  void set_volume_kms_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_volume_kms_key_id(::std::string&& value);
  #endif
  void set_volume_kms_key_id(const char* value);
  void set_volume_kms_key_id(const char* value, size_t size);
  ::std::string* mutable_volume_kms_key_id();
  ::std::string* release_volume_kms_key_id();
  void set_allocated_volume_kms_key_id(::std::string* volume_kms_key_id);

  // int64 instance_count = 2;
  void clear_instance_count();
  static const int kInstanceCountFieldNumber = 2;
  ::google::protobuf::int64 instance_count() const;
  void set_instance_count(::google::protobuf::int64 value);

  // int64 volume_size_in_gb = 3;
  void clear_volume_size_in_gb();
  static const int kVolumeSizeInGbFieldNumber = 3;
  ::google::protobuf::int64 volume_size_in_gb() const;
  void set_volume_size_in_gb(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.ResourceConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_type_;
  ::google::protobuf::internal::ArenaStringPtr volume_kms_key_id_;
  ::google::protobuf::int64 instance_count_;
  ::google::protobuf::int64 volume_size_in_gb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
};
// -------------------------------------------------------------------

class StoppingCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.StoppingCondition) */ {
 public:
  StoppingCondition();
  virtual ~StoppingCondition();

  StoppingCondition(const StoppingCondition& from);

  inline StoppingCondition& operator=(const StoppingCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoppingCondition(StoppingCondition&& from) noexcept
    : StoppingCondition() {
    *this = ::std::move(from);
  }

  inline StoppingCondition& operator=(StoppingCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StoppingCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoppingCondition* internal_default_instance() {
    return reinterpret_cast<const StoppingCondition*>(
               &_StoppingCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StoppingCondition* other);
  friend void swap(StoppingCondition& a, StoppingCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoppingCondition* New() const final {
    return CreateMaybeMessage<StoppingCondition>(nullptr);
  }

  StoppingCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoppingCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoppingCondition& from);
  void MergeFrom(const StoppingCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoppingCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 max_runtime_in_seconds = 1;
  void clear_max_runtime_in_seconds();
  static const int kMaxRuntimeInSecondsFieldNumber = 1;
  ::google::protobuf::int64 max_runtime_in_seconds() const;
  void set_max_runtime_in_seconds(::google::protobuf::int64 value);

  // int64 max_wait_time_in_seconds = 2;
  void clear_max_wait_time_in_seconds();
  static const int kMaxWaitTimeInSecondsFieldNumber = 2;
  ::google::protobuf::int64 max_wait_time_in_seconds() const;
  void set_max_wait_time_in_seconds(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.StoppingCondition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 max_runtime_in_seconds_;
  ::google::protobuf::int64 max_wait_time_in_seconds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
};
// -------------------------------------------------------------------

class VpcConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.VpcConfig) */ {
 public:
  VpcConfig();
  virtual ~VpcConfig();

  VpcConfig(const VpcConfig& from);

  inline VpcConfig& operator=(const VpcConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VpcConfig(VpcConfig&& from) noexcept
    : VpcConfig() {
    *this = ::std::move(from);
  }

  inline VpcConfig& operator=(VpcConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VpcConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VpcConfig* internal_default_instance() {
    return reinterpret_cast<const VpcConfig*>(
               &_VpcConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(VpcConfig* other);
  friend void swap(VpcConfig& a, VpcConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VpcConfig* New() const final {
    return CreateMaybeMessage<VpcConfig>(nullptr);
  }

  VpcConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VpcConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VpcConfig& from);
  void MergeFrom(const VpcConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VpcConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string security_group_ids = 1;
  int security_group_ids_size() const;
  void clear_security_group_ids();
  static const int kSecurityGroupIdsFieldNumber = 1;
  const ::std::string& security_group_ids(int index) const;
  ::std::string* mutable_security_group_ids(int index);
  void set_security_group_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_security_group_ids(int index, ::std::string&& value);
  #endif
  void set_security_group_ids(int index, const char* value);
  void set_security_group_ids(int index, const char* value, size_t size);
  ::std::string* add_security_group_ids();
  void add_security_group_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_security_group_ids(::std::string&& value);
  #endif
  void add_security_group_ids(const char* value);
  void add_security_group_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& security_group_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_security_group_ids();

  // repeated string subnets = 2;
  int subnets_size() const;
  void clear_subnets();
  static const int kSubnetsFieldNumber = 2;
  const ::std::string& subnets(int index) const;
  ::std::string* mutable_subnets(int index);
  void set_subnets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subnets(int index, ::std::string&& value);
  #endif
  void set_subnets(int index, const char* value);
  void set_subnets(int index, const char* value, size_t size);
  ::std::string* add_subnets();
  void add_subnets(const ::std::string& value);
  #if LANG_CXX11
  void add_subnets(::std::string&& value);
  #endif
  void add_subnets(const char* value);
  void add_subnets(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& subnets() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_subnets();

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.VpcConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> security_group_ids_;
  ::google::protobuf::RepeatedPtrField<::std::string> subnets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
};
// -------------------------------------------------------------------

class TrainingJob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.TrainingJob) */ {
 public:
  TrainingJob();
  virtual ~TrainingJob();

  TrainingJob(const TrainingJob& from);

  inline TrainingJob& operator=(const TrainingJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrainingJob(TrainingJob&& from) noexcept
    : TrainingJob() {
    *this = ::std::move(from);
  }

  inline TrainingJob& operator=(TrainingJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TrainingJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainingJob* internal_default_instance() {
    return reinterpret_cast<const TrainingJob*>(
               &_TrainingJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TrainingJob* other);
  friend void swap(TrainingJob& a, TrainingJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrainingJob* New() const final {
    return CreateMaybeMessage<TrainingJob>(nullptr);
  }

  TrainingJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrainingJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrainingJob& from);
  void MergeFrom(const TrainingJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string region = 1;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string role_arn = 2;
  void clear_role_arn();
  static const int kRoleArnFieldNumber = 2;
  const ::std::string& role_arn() const;
  void set_role_arn(const ::std::string& value);
  #if LANG_CXX11
  void set_role_arn(::std::string&& value);
  #endif
  void set_role_arn(const char* value);
  void set_role_arn(const char* value, size_t size);
  ::std::string* mutable_role_arn();
  ::std::string* release_role_arn();
  void set_allocated_role_arn(::std::string* role_arn);

  // .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 3;
  bool has_algorithm_specification() const;
  void clear_algorithm_specification();
  static const int kAlgorithmSpecificationFieldNumber = 3;
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& algorithm_specification() const;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* release_algorithm_specification();
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* mutable_algorithm_specification();
  void set_allocated_algorithm_specification(::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithm_specification);

  // .flyteidl.plugins.sagemaker.ResourceConfig resource_config = 4;
  bool has_resource_config() const;
  void clear_resource_config();
  static const int kResourceConfigFieldNumber = 4;
  const ::flyteidl::plugins::sagemaker::ResourceConfig& resource_config() const;
  ::flyteidl::plugins::sagemaker::ResourceConfig* release_resource_config();
  ::flyteidl::plugins::sagemaker::ResourceConfig* mutable_resource_config();
  void set_allocated_resource_config(::flyteidl::plugins::sagemaker::ResourceConfig* resource_config);

  // .flyteidl.plugins.sagemaker.StoppingCondition stopping_condition = 5;
  bool has_stopping_condition() const;
  void clear_stopping_condition();
  static const int kStoppingConditionFieldNumber = 5;
  const ::flyteidl::plugins::sagemaker::StoppingCondition& stopping_condition() const;
  ::flyteidl::plugins::sagemaker::StoppingCondition* release_stopping_condition();
  ::flyteidl::plugins::sagemaker::StoppingCondition* mutable_stopping_condition();
  void set_allocated_stopping_condition(::flyteidl::plugins::sagemaker::StoppingCondition* stopping_condition);

  // .flyteidl.plugins.sagemaker.VpcConfig vpc_config = 6;
  bool has_vpc_config() const;
  void clear_vpc_config();
  static const int kVpcConfigFieldNumber = 6;
  const ::flyteidl::plugins::sagemaker::VpcConfig& vpc_config() const;
  ::flyteidl::plugins::sagemaker::VpcConfig* release_vpc_config();
  ::flyteidl::plugins::sagemaker::VpcConfig* mutable_vpc_config();
  void set_allocated_vpc_config(::flyteidl::plugins::sagemaker::VpcConfig* vpc_config);

  // bool enable_spot_training = 7;
  void clear_enable_spot_training();
  static const int kEnableSpotTrainingFieldNumber = 7;
  bool enable_spot_training() const;
  void set_enable_spot_training(bool value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.TrainingJob)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr role_arn_;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithm_specification_;
  ::flyteidl::plugins::sagemaker::ResourceConfig* resource_config_;
  ::flyteidl::plugins::sagemaker::StoppingCondition* stopping_condition_;
  ::flyteidl::plugins::sagemaker::VpcConfig* vpc_config_;
  bool enable_spot_training_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlgorithmSpecification_MetricDefinition

// string name = 1;
inline void AlgorithmSpecification_MetricDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification_MetricDefinition::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name)
  return name_.GetNoArena();
}
inline void AlgorithmSpecification_MetricDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name)
}
#if LANG_CXX11
inline void AlgorithmSpecification_MetricDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name)
}
#endif
inline void AlgorithmSpecification_MetricDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name)
}
inline void AlgorithmSpecification_MetricDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name)
}
inline ::std::string* AlgorithmSpecification_MetricDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification_MetricDefinition::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification_MetricDefinition::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.name)
}

// string regex = 2;
inline void AlgorithmSpecification_MetricDefinition::clear_regex() {
  regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification_MetricDefinition::regex() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex)
  return regex_.GetNoArena();
}
inline void AlgorithmSpecification_MetricDefinition::set_regex(const ::std::string& value) {
  
  regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex)
}
#if LANG_CXX11
inline void AlgorithmSpecification_MetricDefinition::set_regex(::std::string&& value) {
  
  regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex)
}
#endif
inline void AlgorithmSpecification_MetricDefinition::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex)
}
inline void AlgorithmSpecification_MetricDefinition::set_regex(const char* value, size_t size) {
  
  regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex)
}
inline ::std::string* AlgorithmSpecification_MetricDefinition::mutable_regex() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex)
  return regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification_MetricDefinition::release_regex() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex)
  
  return regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification_MetricDefinition::set_allocated_regex(::std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition.regex)
}

// -------------------------------------------------------------------

// AlgorithmSpecification

// string training_image = 1;
inline void AlgorithmSpecification::clear_training_image() {
  training_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification::training_image() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image)
  return training_image_.GetNoArena();
}
inline void AlgorithmSpecification::set_training_image(const ::std::string& value) {
  
  training_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image)
}
#if LANG_CXX11
inline void AlgorithmSpecification::set_training_image(::std::string&& value) {
  
  training_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image)
}
#endif
inline void AlgorithmSpecification::set_training_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  training_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image)
}
inline void AlgorithmSpecification::set_training_image(const char* value, size_t size) {
  
  training_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image)
}
inline ::std::string* AlgorithmSpecification::mutable_training_image() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image)
  return training_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification::release_training_image() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image)
  
  return training_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification::set_allocated_training_image(::std::string* training_image) {
  if (training_image != nullptr) {
    
  } else {
    
  }
  training_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), training_image);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_image)
}

// string training_input_mode = 2;
inline void AlgorithmSpecification::clear_training_input_mode() {
  training_input_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification::training_input_mode() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode)
  return training_input_mode_.GetNoArena();
}
inline void AlgorithmSpecification::set_training_input_mode(const ::std::string& value) {
  
  training_input_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode)
}
#if LANG_CXX11
inline void AlgorithmSpecification::set_training_input_mode(::std::string&& value) {
  
  training_input_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode)
}
#endif
inline void AlgorithmSpecification::set_training_input_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  training_input_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode)
}
inline void AlgorithmSpecification::set_training_input_mode(const char* value, size_t size) {
  
  training_input_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode)
}
inline ::std::string* AlgorithmSpecification::mutable_training_input_mode() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode)
  return training_input_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification::release_training_input_mode() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode)
  
  return training_input_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification::set_allocated_training_input_mode(::std::string* training_input_mode) {
  if (training_input_mode != nullptr) {
    
  } else {
    
  }
  training_input_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), training_input_mode);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.training_input_mode)
}

// string algorithm_name = 3;
inline void AlgorithmSpecification::clear_algorithm_name() {
  algorithm_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmSpecification::algorithm_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
  return algorithm_name_.GetNoArena();
}
inline void AlgorithmSpecification::set_algorithm_name(const ::std::string& value) {
  
  algorithm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
}
#if LANG_CXX11
inline void AlgorithmSpecification::set_algorithm_name(::std::string&& value) {
  
  algorithm_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
}
#endif
inline void AlgorithmSpecification::set_algorithm_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
}
inline void AlgorithmSpecification::set_algorithm_name(const char* value, size_t size) {
  
  algorithm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
}
inline ::std::string* AlgorithmSpecification::mutable_algorithm_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
  return algorithm_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmSpecification::release_algorithm_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
  
  return algorithm_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmSpecification::set_allocated_algorithm_name(::std::string* algorithm_name) {
  if (algorithm_name != nullptr) {
    
  } else {
    
  }
  algorithm_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithm_name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
}

// repeated .flyteidl.plugins.sagemaker.AlgorithmSpecification.MetricDefinition metric_definitions = 4;
inline int AlgorithmSpecification::metric_definitions_size() const {
  return metric_definitions_.size();
}
inline void AlgorithmSpecification::clear_metric_definitions() {
  metric_definitions_.Clear();
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* AlgorithmSpecification::mutable_metric_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return metric_definitions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >*
AlgorithmSpecification::mutable_metric_definitions() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return &metric_definitions_;
}
inline const ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition& AlgorithmSpecification::metric_definitions(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return metric_definitions_.Get(index);
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition* AlgorithmSpecification::add_metric_definitions() {
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return metric_definitions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::sagemaker::AlgorithmSpecification_MetricDefinition >&
AlgorithmSpecification::metric_definitions() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return metric_definitions_;
}

// -------------------------------------------------------------------

// ResourceConfig

// string instance_type = 1;
inline void ResourceConfig::clear_instance_type() {
  instance_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceConfig::instance_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ResourceConfig.instance_type)
  return instance_type_.GetNoArena();
}
inline void ResourceConfig::set_instance_type(const ::std::string& value) {
  
  instance_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ResourceConfig.instance_type)
}
#if LANG_CXX11
inline void ResourceConfig::set_instance_type(::std::string&& value) {
  
  instance_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.ResourceConfig.instance_type)
}
#endif
inline void ResourceConfig::set_instance_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.ResourceConfig.instance_type)
}
inline void ResourceConfig::set_instance_type(const char* value, size_t size) {
  
  instance_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.ResourceConfig.instance_type)
}
inline ::std::string* ResourceConfig::mutable_instance_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ResourceConfig.instance_type)
  return instance_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceConfig::release_instance_type() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.ResourceConfig.instance_type)
  
  return instance_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceConfig::set_allocated_instance_type(::std::string* instance_type) {
  if (instance_type != nullptr) {
    
  } else {
    
  }
  instance_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.ResourceConfig.instance_type)
}

// int64 instance_count = 2;
inline void ResourceConfig::clear_instance_count() {
  instance_count_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ResourceConfig::instance_count() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ResourceConfig.instance_count)
  return instance_count_;
}
inline void ResourceConfig::set_instance_count(::google::protobuf::int64 value) {
  
  instance_count_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ResourceConfig.instance_count)
}

// int64 volume_size_in_gb = 3;
inline void ResourceConfig::clear_volume_size_in_gb() {
  volume_size_in_gb_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ResourceConfig::volume_size_in_gb() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ResourceConfig.volume_size_in_gb)
  return volume_size_in_gb_;
}
inline void ResourceConfig::set_volume_size_in_gb(::google::protobuf::int64 value) {
  
  volume_size_in_gb_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ResourceConfig.volume_size_in_gb)
}

// string volume_kms_key_id = 4;
inline void ResourceConfig::clear_volume_kms_key_id() {
  volume_kms_key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceConfig::volume_kms_key_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id)
  return volume_kms_key_id_.GetNoArena();
}
inline void ResourceConfig::set_volume_kms_key_id(const ::std::string& value) {
  
  volume_kms_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id)
}
#if LANG_CXX11
inline void ResourceConfig::set_volume_kms_key_id(::std::string&& value) {
  
  volume_kms_key_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id)
}
#endif
inline void ResourceConfig::set_volume_kms_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_kms_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id)
}
inline void ResourceConfig::set_volume_kms_key_id(const char* value, size_t size) {
  
  volume_kms_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id)
}
inline ::std::string* ResourceConfig::mutable_volume_kms_key_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id)
  return volume_kms_key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceConfig::release_volume_kms_key_id() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id)
  
  return volume_kms_key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceConfig::set_allocated_volume_kms_key_id(::std::string* volume_kms_key_id) {
  if (volume_kms_key_id != nullptr) {
    
  } else {
    
  }
  volume_kms_key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume_kms_key_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.ResourceConfig.volume_kms_key_id)
}

// -------------------------------------------------------------------

// StoppingCondition

// int64 max_runtime_in_seconds = 1;
inline void StoppingCondition::clear_max_runtime_in_seconds() {
  max_runtime_in_seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StoppingCondition::max_runtime_in_seconds() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.StoppingCondition.max_runtime_in_seconds)
  return max_runtime_in_seconds_;
}
inline void StoppingCondition::set_max_runtime_in_seconds(::google::protobuf::int64 value) {
  
  max_runtime_in_seconds_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.StoppingCondition.max_runtime_in_seconds)
}

// int64 max_wait_time_in_seconds = 2;
inline void StoppingCondition::clear_max_wait_time_in_seconds() {
  max_wait_time_in_seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StoppingCondition::max_wait_time_in_seconds() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.StoppingCondition.max_wait_time_in_seconds)
  return max_wait_time_in_seconds_;
}
inline void StoppingCondition::set_max_wait_time_in_seconds(::google::protobuf::int64 value) {
  
  max_wait_time_in_seconds_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.StoppingCondition.max_wait_time_in_seconds)
}

// -------------------------------------------------------------------

// VpcConfig

// repeated string security_group_ids = 1;
inline int VpcConfig::security_group_ids_size() const {
  return security_group_ids_.size();
}
inline void VpcConfig::clear_security_group_ids() {
  security_group_ids_.Clear();
}
inline const ::std::string& VpcConfig::security_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
  return security_group_ids_.Get(index);
}
inline ::std::string* VpcConfig::mutable_security_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
  return security_group_ids_.Mutable(index);
}
inline void VpcConfig::set_security_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
  security_group_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VpcConfig::set_security_group_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
  security_group_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VpcConfig::set_security_group_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  security_group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
}
inline void VpcConfig::set_security_group_ids(int index, const char* value, size_t size) {
  security_group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
}
inline ::std::string* VpcConfig::add_security_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
  return security_group_ids_.Add();
}
inline void VpcConfig::add_security_group_ids(const ::std::string& value) {
  security_group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
}
#if LANG_CXX11
inline void VpcConfig::add_security_group_ids(::std::string&& value) {
  security_group_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
}
#endif
inline void VpcConfig::add_security_group_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  security_group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
}
inline void VpcConfig::add_security_group_ids(const char* value, size_t size) {
  security_group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
VpcConfig::security_group_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
  return security_group_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
VpcConfig::mutable_security_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.VpcConfig.security_group_ids)
  return &security_group_ids_;
}

// repeated string subnets = 2;
inline int VpcConfig::subnets_size() const {
  return subnets_.size();
}
inline void VpcConfig::clear_subnets() {
  subnets_.Clear();
}
inline const ::std::string& VpcConfig::subnets(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.VpcConfig.subnets)
  return subnets_.Get(index);
}
inline ::std::string* VpcConfig::mutable_subnets(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.VpcConfig.subnets)
  return subnets_.Mutable(index);
}
inline void VpcConfig::set_subnets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.VpcConfig.subnets)
  subnets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VpcConfig::set_subnets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.VpcConfig.subnets)
  subnets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VpcConfig::set_subnets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subnets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.VpcConfig.subnets)
}
inline void VpcConfig::set_subnets(int index, const char* value, size_t size) {
  subnets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.VpcConfig.subnets)
}
inline ::std::string* VpcConfig::add_subnets() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.sagemaker.VpcConfig.subnets)
  return subnets_.Add();
}
inline void VpcConfig::add_subnets(const ::std::string& value) {
  subnets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.VpcConfig.subnets)
}
#if LANG_CXX11
inline void VpcConfig::add_subnets(::std::string&& value) {
  subnets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.VpcConfig.subnets)
}
#endif
inline void VpcConfig::add_subnets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subnets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.sagemaker.VpcConfig.subnets)
}
inline void VpcConfig::add_subnets(const char* value, size_t size) {
  subnets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.sagemaker.VpcConfig.subnets)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
VpcConfig::subnets() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.VpcConfig.subnets)
  return subnets_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
VpcConfig::mutable_subnets() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.VpcConfig.subnets)
  return &subnets_;
}

// -------------------------------------------------------------------

// TrainingJob

// string region = 1;
inline void TrainingJob::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingJob::region() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.region)
  return region_.GetNoArena();
}
inline void TrainingJob::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.TrainingJob.region)
}
#if LANG_CXX11
inline void TrainingJob::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.TrainingJob.region)
}
#endif
inline void TrainingJob::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.TrainingJob.region)
}
inline void TrainingJob::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.TrainingJob.region)
}
inline ::std::string* TrainingJob::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJob.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingJob::release_region() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJob.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingJob::set_allocated_region(::std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.region)
}

// string role_arn = 2;
inline void TrainingJob::clear_role_arn() {
  role_arn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingJob::role_arn() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.role_arn)
  return role_arn_.GetNoArena();
}
inline void TrainingJob::set_role_arn(const ::std::string& value) {
  
  role_arn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.TrainingJob.role_arn)
}
#if LANG_CXX11
inline void TrainingJob::set_role_arn(::std::string&& value) {
  
  role_arn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.sagemaker.TrainingJob.role_arn)
}
#endif
inline void TrainingJob::set_role_arn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_arn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.TrainingJob.role_arn)
}
inline void TrainingJob::set_role_arn(const char* value, size_t size) {
  
  role_arn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.TrainingJob.role_arn)
}
inline ::std::string* TrainingJob::mutable_role_arn() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJob.role_arn)
  return role_arn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingJob::release_role_arn() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJob.role_arn)
  
  return role_arn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingJob::set_allocated_role_arn(::std::string* role_arn) {
  if (role_arn != nullptr) {
    
  } else {
    
  }
  role_arn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_arn);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.role_arn)
}

// .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 3;
inline bool TrainingJob::has_algorithm_specification() const {
  return this != internal_default_instance() && algorithm_specification_ != nullptr;
}
inline void TrainingJob::clear_algorithm_specification() {
  if (GetArenaNoVirtual() == nullptr && algorithm_specification_ != nullptr) {
    delete algorithm_specification_;
  }
  algorithm_specification_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& TrainingJob::algorithm_specification() const {
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification* p = algorithm_specification_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::AlgorithmSpecification*>(
      &::flyteidl::plugins::sagemaker::_AlgorithmSpecification_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification* TrainingJob::release_algorithm_specification() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
  
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* temp = algorithm_specification_;
  algorithm_specification_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification* TrainingJob::mutable_algorithm_specification() {
  
  if (algorithm_specification_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmSpecification>(GetArenaNoVirtual());
    algorithm_specification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
  return algorithm_specification_;
}
inline void TrainingJob::set_allocated_algorithm_specification(::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithm_specification) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete algorithm_specification_;
  }
  if (algorithm_specification) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      algorithm_specification = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, algorithm_specification, submessage_arena);
    }
    
  } else {
    
  }
  algorithm_specification_ = algorithm_specification;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
}

// .flyteidl.plugins.sagemaker.ResourceConfig resource_config = 4;
inline bool TrainingJob::has_resource_config() const {
  return this != internal_default_instance() && resource_config_ != nullptr;
}
inline void TrainingJob::clear_resource_config() {
  if (GetArenaNoVirtual() == nullptr && resource_config_ != nullptr) {
    delete resource_config_;
  }
  resource_config_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::ResourceConfig& TrainingJob::resource_config() const {
  const ::flyteidl::plugins::sagemaker::ResourceConfig* p = resource_config_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.resource_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::ResourceConfig*>(
      &::flyteidl::plugins::sagemaker::_ResourceConfig_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::ResourceConfig* TrainingJob::release_resource_config() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJob.resource_config)
  
  ::flyteidl::plugins::sagemaker::ResourceConfig* temp = resource_config_;
  resource_config_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::ResourceConfig* TrainingJob::mutable_resource_config() {
  
  if (resource_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::ResourceConfig>(GetArenaNoVirtual());
    resource_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJob.resource_config)
  return resource_config_;
}
inline void TrainingJob::set_allocated_resource_config(::flyteidl::plugins::sagemaker::ResourceConfig* resource_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resource_config_;
  }
  if (resource_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_config, submessage_arena);
    }
    
  } else {
    
  }
  resource_config_ = resource_config;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.resource_config)
}

// .flyteidl.plugins.sagemaker.StoppingCondition stopping_condition = 5;
inline bool TrainingJob::has_stopping_condition() const {
  return this != internal_default_instance() && stopping_condition_ != nullptr;
}
inline void TrainingJob::clear_stopping_condition() {
  if (GetArenaNoVirtual() == nullptr && stopping_condition_ != nullptr) {
    delete stopping_condition_;
  }
  stopping_condition_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::StoppingCondition& TrainingJob::stopping_condition() const {
  const ::flyteidl::plugins::sagemaker::StoppingCondition* p = stopping_condition_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.stopping_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::StoppingCondition*>(
      &::flyteidl::plugins::sagemaker::_StoppingCondition_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::StoppingCondition* TrainingJob::release_stopping_condition() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJob.stopping_condition)
  
  ::flyteidl::plugins::sagemaker::StoppingCondition* temp = stopping_condition_;
  stopping_condition_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::StoppingCondition* TrainingJob::mutable_stopping_condition() {
  
  if (stopping_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::StoppingCondition>(GetArenaNoVirtual());
    stopping_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJob.stopping_condition)
  return stopping_condition_;
}
inline void TrainingJob::set_allocated_stopping_condition(::flyteidl::plugins::sagemaker::StoppingCondition* stopping_condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stopping_condition_;
  }
  if (stopping_condition) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stopping_condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stopping_condition, submessage_arena);
    }
    
  } else {
    
  }
  stopping_condition_ = stopping_condition;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.stopping_condition)
}

// .flyteidl.plugins.sagemaker.VpcConfig vpc_config = 6;
inline bool TrainingJob::has_vpc_config() const {
  return this != internal_default_instance() && vpc_config_ != nullptr;
}
inline void TrainingJob::clear_vpc_config() {
  if (GetArenaNoVirtual() == nullptr && vpc_config_ != nullptr) {
    delete vpc_config_;
  }
  vpc_config_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::VpcConfig& TrainingJob::vpc_config() const {
  const ::flyteidl::plugins::sagemaker::VpcConfig* p = vpc_config_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.vpc_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::sagemaker::VpcConfig*>(
      &::flyteidl::plugins::sagemaker::_VpcConfig_default_instance_);
}
inline ::flyteidl::plugins::sagemaker::VpcConfig* TrainingJob::release_vpc_config() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJob.vpc_config)
  
  ::flyteidl::plugins::sagemaker::VpcConfig* temp = vpc_config_;
  vpc_config_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::VpcConfig* TrainingJob::mutable_vpc_config() {
  
  if (vpc_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::VpcConfig>(GetArenaNoVirtual());
    vpc_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJob.vpc_config)
  return vpc_config_;
}
inline void TrainingJob::set_allocated_vpc_config(::flyteidl::plugins::sagemaker::VpcConfig* vpc_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vpc_config_;
  }
  if (vpc_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vpc_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpc_config, submessage_arena);
    }
    
  } else {
    
  }
  vpc_config_ = vpc_config;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.vpc_config)
}

// bool enable_spot_training = 7;
inline void TrainingJob::clear_enable_spot_training() {
  enable_spot_training_ = false;
}
inline bool TrainingJob::enable_spot_training() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.enable_spot_training)
  return enable_spot_training_;
}
inline void TrainingJob::set_enable_spot_training(bool value) {
  
  enable_spot_training_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.TrainingJob.enable_spot_training)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2ftrainingjob_2eproto
