// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/admin.proto

package flyteidl.service;

public final class Admin {
  private Admin() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034flyteidl/service/admin.proto\022\020flyteidl" +
      ".service\032\034google/api/annotations.proto\032\034" +
      "flyteidl/admin/project.proto\032\031flyteidl/a" +
      "dmin/task.proto\032\035flyteidl/admin/workflow" +
      ".proto\032 flyteidl/admin/launch_plan.proto" +
      "\032\032flyteidl/admin/event.proto\032\036flyteidl/a" +
      "dmin/execution.proto\032#flyteidl/admin/nod" +
      "e_execution.proto\032#flyteidl/admin/task_e" +
      "xecution.proto\032\033flyteidl/admin/common.pr" +
      "oto\032,protoc-gen-swagger/options/annotati" +
      "ons.proto2\205;\n\014AdminService\022\304\002\n\nCreateTas" +
      "k\022!.flyteidl.admin.TaskCreateRequest\032\".f" +
      "lyteidl.admin.TaskCreateResponse\"\356\001\202\323\344\223\002" +
      "\022\"\r/api/v1/tasks:\001*\222A\322\001\032%Create and regi" +
      "ster a task definitionJB\n\003400\022;\n9Returne" +
      "d for bad request that may have failed v" +
      "alidation.Je\n\003409\022^\n\\Returned for a requ" +
      "est that references an identical entity " +
      "that has already been registered.\022\210\001\n\007Ge" +
      "tTask\022 .flyteidl.admin.ObjectGetRequest\032" +
      "\024.flyteidl.admin.Task\"E\202\323\344\223\002?\022=/api/v1/t" +
      "asks/{id.project}/{id.domain}/{id.name}/" +
      "{id.version}\022\227\001\n\013ListTaskIds\0220.flyteidl." +
      "admin.NamedEntityIdentifierListRequest\032)" +
      ".flyteidl.admin.NamedEntityIdentifierLis" +
      "t\"+\202\323\344\223\002%\022#/api/v1/task_ids/{project}/{d" +
      "omain}\022\256\001\n\tListTasks\022#.flyteidl.admin.Re" +
      "sourceListRequest\032\030.flyteidl.admin.TaskL" +
      "ist\"b\202\323\344\223\002\\\0220/api/v1/tasks/{id.project}/" +
      "{id.domain}/{id.name}Z(\022&/api/v1/tasks/{" +
      "id.project}/{id.domain}\022\330\002\n\016CreateWorkfl" +
      "ow\022%.flyteidl.admin.WorkflowCreateReques" +
      "t\032&.flyteidl.admin.WorkflowCreateRespons" +
      "e\"\366\001\202\323\344\223\002\026\"\021/api/v1/workflows:\001*\222A\326\001\032)Cr" +
      "eate and register a workflow definitionJ" +
      "B\n\003400\022;\n9Returned for bad request that " +
      "may have failed validation.Je\n\003409\022^\n\\Re" +
      "turned for a request that references an " +
      "identical entity that has already been r" +
      "egistered.\022\224\001\n\013GetWorkflow\022 .flyteidl.ad" +
      "min.ObjectGetRequest\032\030.flyteidl.admin.Wo" +
      "rkflow\"I\202\323\344\223\002C\022A/api/v1/workflows/{id.pr" +
      "oject}/{id.domain}/{id.name}/{id.version" +
      "}\022\237\001\n\017ListWorkflowIds\0220.flyteidl.admin.N" +
      "amedEntityIdentifierListRequest\032).flytei" +
      "dl.admin.NamedEntityIdentifierList\"/\202\323\344\223" +
      "\002)\022\'/api/v1/workflow_ids/{project}/{doma" +
      "in}\022\276\001\n\rListWorkflows\022#.flyteidl.admin.R" +
      "esourceListRequest\032\034.flyteidl.admin.Work" +
      "flowList\"j\202\323\344\223\002d\0224/api/v1/workflows/{id." +
      "project}/{id.domain}/{id.name}Z,\022*/api/v" +
      "1/workflows/{id.project}/{id.domain}\022\344\002\n" +
      "\020CreateLaunchPlan\022\'.flyteidl.admin.Launc" +
      "hPlanCreateRequest\032(.flyteidl.admin.Laun" +
      "chPlanCreateResponse\"\374\001\202\323\344\223\002\031\"\024/api/v1/l" +
      "aunch_plans:\001*\222A\331\001\032,Create and register " +
      "a launch plan definitionJB\n\003400\022;\n9Retur" +
      "ned for bad request that may have failed" +
      " validation.Je\n\003409\022^\n\\Returned for a re" +
      "quest that references an identical entit" +
      "y that has already been registered.\022\233\001\n\r" +
      "GetLaunchPlan\022 .flyteidl.admin.ObjectGet" +
      "Request\032\032.flyteidl.admin.LaunchPlan\"L\202\323\344" +
      "\223\002F\022D/api/v1/launch_plans/{id.project}/{" +
      "id.domain}/{id.name}/{id.version}\022\242\001\n\023Ge" +
      "tActiveLaunchPlan\022\'.flyteidl.admin.Activ" +
      "eLaunchPlanRequest\032\032.flyteidl.admin.Laun" +
      "chPlan\"F\202\323\344\223\002@\022>/api/v1/active_launch_pl" +
      "ans/{id.project}/{id.domain}/{id.name}\022\234" +
      "\001\n\025ListActiveLaunchPlans\022+.flyteidl.admi" +
      "n.ActiveLaunchPlanListRequest\032\036.flyteidl" +
      ".admin.LaunchPlanList\"6\202\323\344\223\0020\022./api/v1/a" +
      "ctive_launch_plans/{project}/{domain}\022\244\001" +
      "\n\021ListLaunchPlanIds\0220.flyteidl.admin.Nam" +
      "edEntityIdentifierListRequest\032).flyteidl" +
      ".admin.NamedEntityIdentifierList\"2\202\323\344\223\002," +
      "\022*/api/v1/launch_plan_ids/{project}/{dom" +
      "ain}\022\310\001\n\017ListLaunchPlans\022#.flyteidl.admi" +
      "n.ResourceListRequest\032\036.flyteidl.admin.L" +
      "aunchPlanList\"p\202\323\344\223\002j\0227/api/v1/launch_pl" +
      "ans/{id.project}/{id.domain}/{id.name}Z/" +
      "\022-/api/v1/launch_plans/{id.project}/{id." +
      "domain}\022\266\001\n\020UpdateLaunchPlan\022\'.flyteidl." +
      "admin.LaunchPlanUpdateRequest\032(.flyteidl" +
      ".admin.LaunchPlanUpdateResponse\"O\202\323\344\223\002I\032" +
      "D/api/v1/launch_plans/{id.project}/{id.d" +
      "omain}/{id.name}/{id.version}:\001*\022\316\002\n\017Cre" +
      "ateExecution\022&.flyteidl.admin.ExecutionC" +
      "reateRequest\032\'.flyteidl.admin.ExecutionC" +
      "reateResponse\"\351\001\202\323\344\223\002\027\"\022/api/v1/executio" +
      "ns:\001*\222A\310\001\032\033Create a workflow executionJB" +
      "\n\003400\022;\n9Returned for bad request that m" +
      "ay have failed validation.Je\n\003409\022^\n\\Ret" +
      "urned for a request that references an i" +
      "dentical entity that has already been re" +
      "gistered.\022\335\002\n\021RelaunchExecution\022(.flytei" +
      "dl.admin.ExecutionRelaunchRequest\032\'.flyt" +
      "eidl.admin.ExecutionCreateResponse\"\364\001\202\323\344" +
      "\223\002 \"\033/api/v1/executions/relaunch:\001*\222A\312\001\032" +
      "\035Relaunch a workflow executionJB\n\003400\022;\n" +
      "9Returned for bad request that may have " +
      "failed validation.Je\n\003409\022^\n\\Returned fo" +
      "r a request that references an identical" +
      " entity that has already been registered" +
      ".\022\225\001\n\014GetExecution\022+.flyteidl.admin.Work" +
      "flowExecutionGetRequest\032\031.flyteidl.admin" +
      ".Execution\"=\202\323\344\223\0027\0225/api/v1/executions/{" +
      "id.project}/{id.domain}/{id.name}\022\271\001\n\020Ge" +
      "tExecutionData\022/.flyteidl.admin.Workflow" +
      "ExecutionGetDataRequest\0320.flyteidl.admin" +
      ".WorkflowExecutionGetDataResponse\"B\202\323\344\223\002" +
      "<\022:/api/v1/data/executions/{id.project}/" +
      "{id.domain}/{id.name}\022\211\001\n\016ListExecutions" +
      "\022#.flyteidl.admin.ResourceListRequest\032\035." +
      "flyteidl.admin.ExecutionList\"3\202\323\344\223\002-\022+/a" +
      "pi/v1/executions/{id.project}/{id.domain" +
      "}\022\255\001\n\022TerminateExecution\022).flyteidl.admi" +
      "n.ExecutionTerminateRequest\032*.flyteidl.a" +
      "dmin.ExecutionTerminateResponse\"@\202\323\344\223\002:*" +
      "5/api/v1/executions/{id.project}/{id.dom" +
      "ain}/{id.name}:\001*\022\322\001\n\020GetNodeExecution\022\'" +
      ".flyteidl.admin.NodeExecutionGetRequest\032" +
      "\035.flyteidl.admin.NodeExecution\"v\202\323\344\223\002p\022n" +
      "/api/v1/node_executions/{id.execution_id" +
      ".project}/{id.execution_id.domain}/{id.e" +
      "xecution_id.name}/{id.node_id}\022\336\001\n\022ListN" +
      "odeExecutions\022(.flyteidl.admin.NodeExecu" +
      "tionListRequest\032!.flyteidl.admin.NodeExe" +
      "cutionList\"{\202\323\344\223\002u\022s/api/v1/node_executi" +
      "ons/{workflow_execution_id.project}/{wor" +
      "kflow_execution_id.domain}/{workflow_exe" +
      "cution_id.name}\022\245\004\n\031ListNodeExecutionsFo" +
      "rTask\022/.flyteidl.admin.NodeExecutionForT" +
      "askListRequest\032!.flyteidl.admin.NodeExec" +
      "utionList\"\263\003\202\323\344\223\002\254\003\022\251\003/api/v1/children/t" +
      "ask_executions/{task_execution_id.node_e" +
      "xecution_id.execution_id.project}/{task_" +
      "execution_id.node_execution_id.execution" +
      "_id.domain}/{task_execution_id.node_exec" +
      "ution_id.execution_id.name}/{task_execut" +
      "ion_id.node_execution_id.node_id}/{task_" +
      "execution_id.task_id.project}/{task_exec" +
      "ution_id.task_id.domain}/{task_execution" +
      "_id.task_id.name}/{task_execution_id.tas" +
      "k_id.version}/{task_execution_id.retry_a" +
      "ttempt}\022\356\001\n\024GetNodeExecutionData\022+.flyte" +
      "idl.admin.NodeExecutionGetDataRequest\032,." +
      "flyteidl.admin.NodeExecutionGetDataRespo" +
      "nse\"{\202\323\344\223\002u\022s/api/v1/data/node_execution" +
      "s/{id.execution_id.project}/{id.executio" +
      "n_id.domain}/{id.execution_id.name}/{id." +
      "node_id}\022\245\002\n\017RegisterProject\022&.flyteidl." +
      "admin.ProjectRegisterRequest\032\'.flyteidl." +
      "admin.ProjectRegisterResponse\"\300\001\202\323\344\223\002\025\"\020" +
      "/api/v1/projects:\001*\222A\241\001\032+Register a proj" +
      "ect along with valid domainsJ.\n\003201\022\'\n%R" +
      "eturned for successful registration.JB\n\003" +
      "400\022;\n9Returned for bad request that may" +
      " have failed validation.\022f\n\014ListProjects" +
      "\022\".flyteidl.admin.ProjectListRequest\032\030.f" +
      "lyteidl.admin.Projects\"\030\202\323\344\223\002\022\022\020/api/v1/" +
      "projects\022\231\001\n\023CreateWorkflowEvent\022-.flyte" +
      "idl.admin.WorkflowExecutionEventRequest\032" +
      "..flyteidl.admin.WorkflowExecutionEventR" +
      "esponse\"#\202\323\344\223\002\035\"\030/api/v1/events/workflow" +
      "s:\001*\022\211\001\n\017CreateNodeEvent\022).flyteidl.admi" +
      "n.NodeExecutionEventRequest\032*.flyteidl.a" +
      "dmin.NodeExecutionEventResponse\"\037\202\323\344\223\002\031\"" +
      "\024/api/v1/events/nodes:\001*\022\211\001\n\017CreateTaskE" +
      "vent\022).flyteidl.admin.TaskExecutionEvent" +
      "Request\032*.flyteidl.admin.TaskExecutionEv" +
      "entResponse\"\037\202\323\344\223\002\031\"\024/api/v1/events/task" +
      "s:\001*\022\200\003\n\020GetTaskExecution\022\'.flyteidl.adm" +
      "in.TaskExecutionGetRequest\032\035.flyteidl.ad" +
      "min.TaskExecution\"\243\002\202\323\344\223\002\234\002\022\231\002/api/v1/ta" +
      "sk_executions/{id.node_execution_id.exec" +
      "ution_id.project}/{id.node_execution_id." +
      "execution_id.domain}/{id.node_execution_" +
      "id.execution_id.name}/{id.node_execution" +
      "_id.node_id}/{id.task_id.project}/{id.ta" +
      "sk_id.domain}/{id.task_id.name}/{id.task" +
      "_id.version}/{id.retry_attempt}\022\230\002\n\022List" +
      "TaskExecutions\022(.flyteidl.admin.TaskExec" +
      "utionListRequest\032!.flyteidl.admin.TaskEx" +
      "ecutionList\"\264\001\202\323\344\223\002\255\001\022\252\001/api/v1/task_exe" +
      "cutions/{node_execution_id.execution_id." +
      "project}/{node_execution_id.execution_id" +
      ".domain}/{node_execution_id.execution_id" +
      ".name}/{node_execution_id.node_id}\022\234\003\n\024G" +
      "etTaskExecutionData\022+.flyteidl.admin.Tas" +
      "kExecutionGetDataRequest\032,.flyteidl.admi" +
      "n.TaskExecutionGetDataResponse\"\250\002\202\323\344\223\002\241\002" +
      "\022\236\002/api/v1/data/task_executions/{id.node" +
      "_execution_id.execution_id.project}/{id." +
      "node_execution_id.execution_id.domain}/{" +
      "id.node_execution_id.execution_id.name}/" +
      "{id.node_execution_id.node_id}/{id.task_" +
      "id.project}/{id.task_id.domain}/{id.task" +
      "_id.name}/{id.task_id.version}/{id.retry" +
      "_attempt}B5Z3github.com/lyft/flyteidl/ge" +
      "n/pb-go/flyteidl/serviceb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.api.AnnotationsProto.getDescriptor(),
          flyteidl.admin.ProjectOuterClass.getDescriptor(),
          flyteidl.admin.TaskOuterClass.getDescriptor(),
          flyteidl.admin.WorkflowOuterClass.getDescriptor(),
          flyteidl.admin.LaunchPlanOuterClass.getDescriptor(),
          flyteidl.admin.Event.getDescriptor(),
          flyteidl.admin.ExecutionOuterClass.getDescriptor(),
          flyteidl.admin.NodeExecutionOuterClass.getDescriptor(),
          flyteidl.admin.TaskExecutionOuterClass.getDescriptor(),
          flyteidl.admin.Common.getDescriptor(),
          grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor(),
        }, assigner);
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_swagger.options.Annotations.openapiv2Operation);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.api.AnnotationsProto.getDescriptor();
    flyteidl.admin.ProjectOuterClass.getDescriptor();
    flyteidl.admin.TaskOuterClass.getDescriptor();
    flyteidl.admin.WorkflowOuterClass.getDescriptor();
    flyteidl.admin.LaunchPlanOuterClass.getDescriptor();
    flyteidl.admin.Event.getDescriptor();
    flyteidl.admin.ExecutionOuterClass.getDescriptor();
    flyteidl.admin.NodeExecutionOuterClass.getDescriptor();
    flyteidl.admin.TaskExecutionOuterClass.getDescriptor();
    flyteidl.admin.Common.getDescriptor();
    grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
