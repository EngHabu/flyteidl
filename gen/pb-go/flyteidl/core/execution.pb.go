// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/core/execution.proto

package core // import "github.com/lyft/flyteidl/gen/pb-go/flyteidl/core"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Indicates various phases of Workflow Execution
type WorkflowExecutionPhase int32

const (
	WorkflowExecutionPhase_WORKFLOW_PHASE_UNDEFINED  WorkflowExecutionPhase = 0
	WorkflowExecutionPhase_WORKFLOW_PHASE_RUNNING    WorkflowExecutionPhase = 1
	WorkflowExecutionPhase_WORKFLOW_PHASE_SUCCEEDING WorkflowExecutionPhase = 2
	WorkflowExecutionPhase_WORKFLOW_PHASE_SUCCEEDED  WorkflowExecutionPhase = 3
	WorkflowExecutionPhase_WORKFLOW_PHASE_FAILING    WorkflowExecutionPhase = 4
	WorkflowExecutionPhase_WORKFLOW_PHASE_FAILED     WorkflowExecutionPhase = 5
	WorkflowExecutionPhase_WORKFLOW_PHASE_TIMED_OUT  WorkflowExecutionPhase = 6
	WorkflowExecutionPhase_WORKFLOW_PHASE_ABORTED    WorkflowExecutionPhase = 7
	WorkflowExecutionPhase_WORKFLOW_PHASE_QUEUED     WorkflowExecutionPhase = 8
)

var WorkflowExecutionPhase_name = map[int32]string{
	0: "WORKFLOW_PHASE_UNDEFINED",
	1: "WORKFLOW_PHASE_RUNNING",
	2: "WORKFLOW_PHASE_SUCCEEDING",
	3: "WORKFLOW_PHASE_SUCCEEDED",
	4: "WORKFLOW_PHASE_FAILING",
	5: "WORKFLOW_PHASE_FAILED",
	6: "WORKFLOW_PHASE_TIMED_OUT",
	7: "WORKFLOW_PHASE_ABORTED",
	8: "WORKFLOW_PHASE_QUEUED",
}
var WorkflowExecutionPhase_value = map[string]int32{
	"WORKFLOW_PHASE_UNDEFINED":  0,
	"WORKFLOW_PHASE_RUNNING":    1,
	"WORKFLOW_PHASE_SUCCEEDING": 2,
	"WORKFLOW_PHASE_SUCCEEDED":  3,
	"WORKFLOW_PHASE_FAILING":    4,
	"WORKFLOW_PHASE_FAILED":     5,
	"WORKFLOW_PHASE_TIMED_OUT":  6,
	"WORKFLOW_PHASE_ABORTED":    7,
	"WORKFLOW_PHASE_QUEUED":     8,
}

func (x WorkflowExecutionPhase) String() string {
	return proto.EnumName(WorkflowExecutionPhase_name, int32(x))
}
func (WorkflowExecutionPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_execution_75d99f003c473f67, []int{0}
}

// Indicates various phases of Node Execution
type NodeExecutionPhase int32

const (
	NodeExecutionPhase_NODE_PHASE_UNDEFINED NodeExecutionPhase = 0
	NodeExecutionPhase_NODE_PHASE_RUNNING   NodeExecutionPhase = 1
	NodeExecutionPhase_NODE_PHASE_SUCCEEDED NodeExecutionPhase = 2
	NodeExecutionPhase_NODE_PHASE_FAILING   NodeExecutionPhase = 3
	NodeExecutionPhase_NODE_PHASE_FAILED    NodeExecutionPhase = 4
	NodeExecutionPhase_NODE_PHASE_TIMED_OUT NodeExecutionPhase = 5
	NodeExecutionPhase_NODE_PHASE_SKIPPED   NodeExecutionPhase = 6
	NodeExecutionPhase_NODE_PHASE_ABORTED   NodeExecutionPhase = 7
	NodeExecutionPhase_NODE_PHASE_QUEUED    NodeExecutionPhase = 8
)

var NodeExecutionPhase_name = map[int32]string{
	0: "NODE_PHASE_UNDEFINED",
	1: "NODE_PHASE_RUNNING",
	2: "NODE_PHASE_SUCCEEDED",
	3: "NODE_PHASE_FAILING",
	4: "NODE_PHASE_FAILED",
	5: "NODE_PHASE_TIMED_OUT",
	6: "NODE_PHASE_SKIPPED",
	7: "NODE_PHASE_ABORTED",
	8: "NODE_PHASE_QUEUED",
}
var NodeExecutionPhase_value = map[string]int32{
	"NODE_PHASE_UNDEFINED": 0,
	"NODE_PHASE_RUNNING":   1,
	"NODE_PHASE_SUCCEEDED": 2,
	"NODE_PHASE_FAILING":   3,
	"NODE_PHASE_FAILED":    4,
	"NODE_PHASE_TIMED_OUT": 5,
	"NODE_PHASE_SKIPPED":   6,
	"NODE_PHASE_ABORTED":   7,
	"NODE_PHASE_QUEUED":    8,
}

func (x NodeExecutionPhase) String() string {
	return proto.EnumName(NodeExecutionPhase_name, int32(x))
}
func (NodeExecutionPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_execution_75d99f003c473f67, []int{1}
}

// Phases that task plugins can go through. Not all phases may be applicable to a specific plugin task,
// but this is the cumulative list that customers may want to know about for their task.
type TaskExecutionPhase int32

const (
	TaskExecutionPhase_TASK_PHASE_UNDEFINED TaskExecutionPhase = 0
	TaskExecutionPhase_TASK_PHASE_QUEUED    TaskExecutionPhase = 1
	TaskExecutionPhase_TASK_PHASE_RUNNABLE  TaskExecutionPhase = 2
	TaskExecutionPhase_TASK_PHASE_RUNNING   TaskExecutionPhase = 3
	TaskExecutionPhase_TASK_PHASE_SUCCEEDED TaskExecutionPhase = 4
	TaskExecutionPhase_TASK_PHASE_FAILED    TaskExecutionPhase = 5
	TaskExecutionPhase_TASK_PHASE_ABORTED   TaskExecutionPhase = 6
)

var TaskExecutionPhase_name = map[int32]string{
	0: "TASK_PHASE_UNDEFINED",
	1: "TASK_PHASE_QUEUED",
	2: "TASK_PHASE_RUNNABLE",
	3: "TASK_PHASE_RUNNING",
	4: "TASK_PHASE_SUCCEEDED",
	5: "TASK_PHASE_FAILED",
	6: "TASK_PHASE_ABORTED",
}
var TaskExecutionPhase_value = map[string]int32{
	"TASK_PHASE_UNDEFINED": 0,
	"TASK_PHASE_QUEUED":    1,
	"TASK_PHASE_RUNNABLE":  2,
	"TASK_PHASE_RUNNING":   3,
	"TASK_PHASE_SUCCEEDED": 4,
	"TASK_PHASE_FAILED":    5,
	"TASK_PHASE_ABORTED":   6,
}

func (x TaskExecutionPhase) String() string {
	return proto.EnumName(TaskExecutionPhase_name, int32(x))
}
func (TaskExecutionPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_execution_75d99f003c473f67, []int{2}
}

// Represents the error message from the execution.
type ExecutionError struct {
	// Error code indicates a grouping of a type of error.
	// More Info: <Link>
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Detailed description of the error - including stack trace.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecutionError) Reset()         { *m = ExecutionError{} }
func (m *ExecutionError) String() string { return proto.CompactTextString(m) }
func (*ExecutionError) ProtoMessage()    {}
func (*ExecutionError) Descriptor() ([]byte, []int) {
	return fileDescriptor_execution_75d99f003c473f67, []int{0}
}
func (m *ExecutionError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionError.Unmarshal(m, b)
}
func (m *ExecutionError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionError.Marshal(b, m, deterministic)
}
func (dst *ExecutionError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionError.Merge(dst, src)
}
func (m *ExecutionError) XXX_Size() int {
	return xxx_messageInfo_ExecutionError.Size(m)
}
func (m *ExecutionError) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionError.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionError proto.InternalMessageInfo

func (m *ExecutionError) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ExecutionError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ExecutionError)(nil), "flyteidl.core.ExecutionError")
	proto.RegisterEnum("flyteidl.core.WorkflowExecutionPhase", WorkflowExecutionPhase_name, WorkflowExecutionPhase_value)
	proto.RegisterEnum("flyteidl.core.NodeExecutionPhase", NodeExecutionPhase_name, NodeExecutionPhase_value)
	proto.RegisterEnum("flyteidl.core.TaskExecutionPhase", TaskExecutionPhase_name, TaskExecutionPhase_value)
}

func init() {
	proto.RegisterFile("flyteidl/core/execution.proto", fileDescriptor_execution_75d99f003c473f67)
}

var fileDescriptor_execution_75d99f003c473f67 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x6f, 0x6f, 0x93, 0x50,
	0x14, 0x87, 0x85, 0x31, 0xa6, 0x27, 0xd1, 0xdc, 0x5d, 0x6d, 0x65, 0xc6, 0x25, 0xc6, 0x57, 0x66,
	0x89, 0xc5, 0xe8, 0x7b, 0x13, 0xba, 0x7b, 0xaa, 0xa4, 0x15, 0x90, 0x3f, 0x69, 0xe2, 0x9b, 0xa6,
	0xa5, 0xb7, 0xac, 0x19, 0xdb, 0x5d, 0x80, 0x45, 0xf7, 0x59, 0xfc, 0x30, 0x7e, 0x25, 0x3f, 0x82,
	0xa1, 0x1b, 0x50, 0xae, 0xf7, 0x1d, 0x9c, 0x1f, 0xe7, 0x39, 0x79, 0x0e, 0x39, 0x70, 0xba, 0xc9,
	0xef, 0x2a, 0xbe, 0x5d, 0xe7, 0x76, 0x2a, 0x0a, 0x6e, 0xf3, 0x5f, 0x3c, 0xbd, 0xad, 0xb6, 0xe2,
	0x7a, 0x74, 0x53, 0x88, 0x4a, 0xd0, 0xa7, 0x4d, 0x3c, 0xaa, 0xe3, 0xb7, 0x9f, 0xe1, 0x19, 0x36,
	0x5f, 0x60, 0x51, 0x88, 0x82, 0x52, 0x30, 0x52, 0xb1, 0xe6, 0x96, 0xf6, 0x46, 0x7b, 0xf7, 0x24,
	0xdc, 0x3d, 0x53, 0x0b, 0x8e, 0xae, 0x78, 0x59, 0x2e, 0x33, 0x6e, 0xe9, 0xbb, 0x72, 0xf3, 0x7a,
	0xf6, 0x5b, 0x87, 0xe1, 0x5c, 0x14, 0x97, 0x9b, 0x5c, 0xfc, 0x6c, 0x41, 0xc1, 0xc5, 0xb2, 0xe4,
	0xf4, 0x35, 0x58, 0x73, 0x3f, 0x9c, 0x4e, 0x66, 0xfe, 0x7c, 0x11, 0x7c, 0x75, 0x22, 0x5c, 0x24,
	0x1e, 0xc3, 0x89, 0xeb, 0x21, 0x23, 0x8f, 0xe8, 0x2b, 0x18, 0x4a, 0x69, 0x98, 0x78, 0x9e, 0xeb,
	0x7d, 0x21, 0x1a, 0x3d, 0x85, 0x13, 0x29, 0x8b, 0x92, 0xf3, 0x73, 0x44, 0x56, 0xc7, 0xba, 0x02,
	0xfc, 0x10, 0x23, 0x23, 0x07, 0x0a, 0xf0, 0xc4, 0x71, 0x67, 0x75, 0xa7, 0x41, 0x4f, 0x60, 0xa0,
	0xc8, 0x90, 0x91, 0x43, 0x05, 0x34, 0x76, 0xbf, 0x21, 0x5b, 0xf8, 0x49, 0x4c, 0x4c, 0x05, 0xd4,
	0x19, 0xfb, 0x61, 0x8c, 0x8c, 0x1c, 0x29, 0xa0, 0xdf, 0x13, 0x4c, 0x90, 0x91, 0xc7, 0x67, 0x7f,
	0x35, 0xa0, 0x9e, 0x58, 0x73, 0x69, 0x33, 0x16, 0xbc, 0xf0, 0x7c, 0x86, 0x8a, 0xad, 0x0c, 0x81,
	0xee, 0x25, 0xdd, 0x46, 0xfa, 0x1d, 0x9d, 0xae, 0x2e, 0x75, 0x34, 0xaa, 0x07, 0x74, 0x00, 0xc7,
	0x52, 0x1d, 0x19, 0x31, 0x24, 0x50, 0xa7, 0x78, 0x28, 0x81, 0xa2, 0xa9, 0x1b, 0x04, 0xc8, 0x88,
	0x29, 0xd5, 0x3b, 0xed, 0xfe, 0x80, 0x56, 0xf9, 0x8f, 0x06, 0x34, 0x5e, 0x96, 0x97, 0xff, 0x2b,
	0xc7, 0x4e, 0x34, 0x55, 0x28, 0x0f, 0xe0, 0x78, 0x2f, 0x79, 0xe0, 0x68, 0xf4, 0x25, 0x3c, 0xdf,
	0x2b, 0xd7, 0x9b, 0x70, 0xc6, 0x33, 0xbc, 0x17, 0x96, 0x82, 0x7b, 0xe1, 0xfe, 0x84, 0x6e, 0x45,
	0x86, 0x34, 0xa1, 0xfd, 0xe3, 0x7d, 0x50, 0x23, 0x66, 0x8e, 0x3f, 0xfe, 0xf8, 0x90, 0x6d, 0xab,
	0x8b, 0xdb, 0xd5, 0x28, 0x15, 0x57, 0x76, 0x7e, 0xb7, 0xa9, 0xec, 0xf6, 0xa4, 0x32, 0x7e, 0x6d,
	0xdf, 0xac, 0xde, 0x67, 0xc2, 0xee, 0x5d, 0xd9, 0xca, 0xdc, 0x1d, 0xd7, 0xa7, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x15, 0x86, 0x04, 0xb1, 0x7d, 0x03, 0x00, 0x00,
}
