syntax = "proto3";
package flyteidl.service;

option go_package = "github.com/lyft/flyteidl/gen/pb-go/flyteidl/service";

import "google/api/annotations.proto";
import "flyteidl/admin/project.proto";
import "flyteidl/admin/task.proto";
import "flyteidl/admin/workflow.proto";
import "flyteidl/admin/launch_plan.proto";
import "flyteidl/admin/event.proto";
import "flyteidl/admin/execution.proto";
import "flyteidl/admin/node_execution.proto";
import "flyteidl/admin/common.proto";
import "protoc-gen-swagger/options/annotations.proto";

service AdminService {
  rpc CreateTask (flyteidl.admin.TaskCreateRequest) returns (flyteidl.admin.TaskCreateResponse) {
    option (google.api.http) = {
      post: "/api/v1/tasks"
      body: "*"
    };
  }

  rpc GetTask (flyteidl.admin.ObjectGetRequest) returns (flyteidl.admin.Task) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{urn}"
    };
  }

  rpc ListTaskIds (flyteidl.admin.IdentifierListRequest) returns (flyteidl.admin.IdentifierList) {
    option (google.api.http) = {
      get: "/api/v1/project/{project}/domain/{domain}/task_ids"
    };
  }

  rpc ListTasks (flyteidl.admin.ResourceListRequest) returns (flyteidl.admin.TaskList) {
    option (google.api.http) = {
      get: "/api/v1/project/{id.project}/domain/{id.domain}/tasks"
      additional_bindings {
        get: "/api/v1/project/{id.project}/domain/{id.domain}/tasks/{id.name}"
      }
    };
  }

  rpc CreateWorkflow (flyteidl.admin.WorkflowCreateRequest) returns (flyteidl.admin.WorkflowCreateResponse) {
    option (google.api.http) = {
      post: "/api/v1/workflows"
      body: "*"
    };
  }

  rpc GetWorkflow (flyteidl.admin.ObjectGetRequest) returns (flyteidl.admin.Workflow) {
    option (google.api.http) = {
      get: "/api/v1/workflows/{urn}"
    };
  }

  rpc ListWorkflowIds (flyteidl.admin.IdentifierListRequest) returns (flyteidl.admin.IdentifierList) {
    option (google.api.http) = {
      get: "/api/v1/project/{project}/domain/{domain}/workflow_ids"
    };
  }

  rpc ListWorkflows (flyteidl.admin.ResourceListRequest) returns (flyteidl.admin.WorkflowList) {
    option (google.api.http) = {
      get: "/api/v1/project/{id.project}/domain/{id.domain}/workflows"
      additional_bindings {
        get: "/api/v1/project/{id.project}/domain/{id.domain}/workflows/{id.name}"
      }
    };
  }

  rpc CreateLaunchPlan (flyteidl.admin.LaunchPlanCreateRequest) returns (flyteidl.admin.LaunchPlanCreateResponse) {
    option (google.api.http) = {
      post: "/api/v1/launch_plans"
      body: "*"
    };
  }

  rpc GetLaunchPlan (flyteidl.admin.ObjectGetRequest) returns (flyteidl.admin.LaunchPlan) {
    option (google.api.http) = {
      get: "/api/v1/launch_plans/{urn}"
    };
  }

  rpc ListLaunchPlanIds (flyteidl.admin.IdentifierListRequest) returns (flyteidl.admin.IdentifierList) {
    option (google.api.http) = {
      get: "/api/v1/project/{project}/domain/{domain}/launch_plan_ids"
    };
  }

  rpc ListLaunchPlans (flyteidl.admin.ResourceListRequest) returns (flyteidl.admin.LaunchPlanList) {
    option (google.api.http) = {
      get: "/api/v1/project/{id.project}/domain/{id.domain}/launch_plans"
      additional_bindings {
        get: "/api/v1/project/{id.project}/domain/{id.domain}/launch_plans/{id.name}"
      }
    };
  }

  rpc UpdateLaunchPlan (flyteidl.admin.LaunchPlanUpdateRequest) returns (flyteidl.admin.LaunchPlanUpdateResponse) {
    option (google.api.http) = {
      put: "/api/v1/launch_plans/{urn}"
      body: "*"
    };
  }

  rpc CreateExecution (flyteidl.admin.ExecutionCreateRequest) returns (flyteidl.admin.ExecutionCreateResponse) {
    option (google.api.http) = {
      post: "/api/v1/executions"
      body: "*"
    };
  }

  rpc GetExecution (flyteidl.admin.ObjectGetRequest) returns (flyteidl.admin.Execution) {
    option (google.api.http) = {
      get: "/api/v1/executions/{urn}"
    };
  }

  rpc ListExecutions (flyteidl.admin.ResourceListRequest) returns (flyteidl.admin.ExecutionList) {
    option (google.api.http) = {
      get:  "/api/v1/executions"
    };
  }

  rpc GetNodeExecution (flyteidl.admin.NodeExecutionGetRequest) returns (flyteidl.admin.NodeExecution) {
    option (google.api.http) = {
      get: "/api/v1/node_executions/{node_execution_id}"
    };
  }

  rpc ListNodeExecutions (flyteidl.admin.NodeExecutionListRequest) returns (flyteidl.admin.NodeExecutionList) {
    option (google.api.http) = {
      get: "/api/v1/node_executions"
    };
  }

  rpc RegisterProject (flyteidl.admin.Project) returns (flyteidl.admin.ProjectRegisterResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Register a project along with valid domains"
      responses: {
        key: "201"
        value: {
	  description: "Returned for successful registration."
	}
      }
      responses: {
        key: "400"
        value: {
	  description: "Returned for bad request that may have failed validation."
	}
      }
    }; 
  }

  rpc ListProjects (flyteidl.admin.ProjectListRequest) returns (flyteidl.admin.Projects) {
    option (google.api.http) = {
      get:  "/api/v1/projects"
    };
    
  }

  rpc CreateWorkflowEvent (flyteidl.admin.WorkflowExecutionEventRequest) returns (flyteidl.admin.WorkflowExecutionEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/events/workflows"
      body: "*"
    };
  }

  rpc CreateNodeEvent (flyteidl.admin.NodeExecutionEventRequest) returns (flyteidl.admin.NodeExecutionEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/events/nodes"
      body: "*"
    };
  }

  rpc CreateTaskEvent (flyteidl.admin.TaskExecutionEventRequest) returns (flyteidl.admin.TaskExecutionEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/events/tasks"
      body: "*"
    };
  }
}
