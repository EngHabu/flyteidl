// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import modeldiscovery "github.com/lyft/flyteidl/gen/pb-go/flyteidl/legacydiscovery"

// ArtifactsClient is an autogenerated mock type for the ArtifactsClient type
type ArtifactsClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactsClient) Create(ctx context.Context, in *modeldiscovery.CreateRequest, opts ...grpc.CallOption) (*modeldiscovery.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *modeldiscovery.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *modeldiscovery.CreateRequest, ...grpc.CallOption) *modeldiscovery.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modeldiscovery.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *modeldiscovery.CreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateProvenance provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactsClient) GenerateProvenance(ctx context.Context, in *modeldiscovery.GenerateProvenanceRequest, opts ...grpc.CallOption) (*modeldiscovery.GenerateProvenanceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *modeldiscovery.GenerateProvenanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *modeldiscovery.GenerateProvenanceRequest, ...grpc.CallOption) *modeldiscovery.GenerateProvenanceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modeldiscovery.GenerateProvenanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *modeldiscovery.GenerateProvenanceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactsClient) Get(ctx context.Context, in *modeldiscovery.GetRequest, opts ...grpc.CallOption) (*modeldiscovery.GetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *modeldiscovery.GetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *modeldiscovery.GetRequest, ...grpc.CallOption) *modeldiscovery.GetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modeldiscovery.GetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *modeldiscovery.GetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactsClient) Query(ctx context.Context, in *modeldiscovery.QueryRequest, opts ...grpc.CallOption) (*modeldiscovery.QueryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *modeldiscovery.QueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *modeldiscovery.QueryRequest, ...grpc.CallOption) *modeldiscovery.QueryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modeldiscovery.QueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *modeldiscovery.QueryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
