// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/launch_plan.proto

#include "flyteidl/admin/launch_plan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace admin {
class LaunchPlanCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanCreateRequest>
      _instance;
} _LaunchPlanCreateRequest_default_instance_;
class LaunchPlanCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanCreateResponse>
      _instance;
} _LaunchPlanCreateResponse_default_instance_;
class LaunchPlanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlan>
      _instance;
} _LaunchPlan_default_instance_;
class LaunchPlanListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanList>
      _instance;
} _LaunchPlanList_default_instance_;
class AuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Auth>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr assumable_iam_role_;
  ::google::protobuf::internal::ArenaStringPtr kubernetes_service_account_;
} _Auth_default_instance_;
class LaunchPlanSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanSpec>
      _instance;
} _LaunchPlanSpec_default_instance_;
class LaunchPlanClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanClosure>
      _instance;
} _LaunchPlanClosure_default_instance_;
class LaunchPlanMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanMetadata>
      _instance;
} _LaunchPlanMetadata_default_instance_;
class LaunchPlanUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanUpdateRequest>
      _instance;
} _LaunchPlanUpdateRequest_default_instance_;
class LaunchPlanUpdateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanUpdateResponse>
      _instance;
} _LaunchPlanUpdateResponse_default_instance_;
class ActiveLaunchPlanRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveLaunchPlanRequest>
      _instance;
} _ActiveLaunchPlanRequest_default_instance_;
class ActiveLaunchPlanListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveLaunchPlanListRequest>
      _instance;
} _ActiveLaunchPlanListRequest_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto {
void InitDefaultsLaunchPlanCreateRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanSpec();
  {
    void* ptr = &::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanCreateRequest::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlanCreateRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanCreateRequestImpl);
}

void InitDefaultsLaunchPlanCreateResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::admin::_LaunchPlanCreateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanCreateResponse::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlanCreateResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanCreateResponseImpl);
}

void InitDefaultsLaunchPlanImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanSpec();
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanClosure();
  {
    void* ptr = &::flyteidl::admin::_LaunchPlan_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlan::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlan() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanImpl);
}

void InitDefaultsLaunchPlanListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlan();
  {
    void* ptr = &::flyteidl::admin::_LaunchPlanList_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanList::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlanList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanListImpl);
}

void InitDefaultsAuthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::admin::_Auth_default_instance_;
    new (ptr) ::flyteidl::admin::Auth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Auth::InitAsDefaultInstance();
}

void InitDefaultsAuth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthImpl);
}

void InitDefaultsLaunchPlanSpecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanMetadata();
  protobuf_flyteidl_2fcore_2finterface_2eproto::InitDefaultsParameterMap();
  protobuf_flyteidl_2fcore_2fliterals_2eproto::InitDefaultsLiteral();
  protobuf_flyteidl_2fadmin_2fcommon_2eproto::InitDefaultsLabels();
  protobuf_flyteidl_2fadmin_2fcommon_2eproto::InitDefaultsAnnotations();
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsAuth();
  {
    void* ptr = &::flyteidl::admin::_LaunchPlanSpec_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanSpec::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlanSpec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanSpecImpl);
}

void InitDefaultsLaunchPlanClosureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2finterface_2eproto::InitDefaultsParameterMap();
  protobuf_flyteidl_2fcore_2finterface_2eproto::InitDefaultsVariableMap();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::flyteidl::admin::_LaunchPlanClosure_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanClosure::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlanClosure() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanClosureImpl);
}

void InitDefaultsLaunchPlanMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2fschedule_2eproto::InitDefaultsSchedule();
  protobuf_flyteidl_2fadmin_2fcommon_2eproto::InitDefaultsNotification();
  {
    void* ptr = &::flyteidl::admin::_LaunchPlanMetadata_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanMetadata::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlanMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanMetadataImpl);
}

void InitDefaultsLaunchPlanUpdateRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::flyteidl::admin::_LaunchPlanUpdateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanUpdateRequest::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlanUpdateRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanUpdateRequestImpl);
}

void InitDefaultsLaunchPlanUpdateResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::admin::_LaunchPlanUpdateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanUpdateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanUpdateResponse::InitAsDefaultInstance();
}

void InitDefaultsLaunchPlanUpdateResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaunchPlanUpdateResponseImpl);
}

void InitDefaultsActiveLaunchPlanRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2fcommon_2eproto::InitDefaultsNamedEntityIdentifier();
  {
    void* ptr = &::flyteidl::admin::_ActiveLaunchPlanRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ActiveLaunchPlanRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ActiveLaunchPlanRequest::InitAsDefaultInstance();
}

void InitDefaultsActiveLaunchPlanRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsActiveLaunchPlanRequestImpl);
}

void InitDefaultsActiveLaunchPlanListRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2fcommon_2eproto::InitDefaultsSort();
  {
    void* ptr = &::flyteidl::admin::_ActiveLaunchPlanListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ActiveLaunchPlanListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ActiveLaunchPlanListRequest::InitAsDefaultInstance();
}

void InitDefaultsActiveLaunchPlanListRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsActiveLaunchPlanListRequestImpl);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, spec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, closure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, launch_plans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Auth, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::AuthDefaultTypeInternal, assumable_iam_role_),
  offsetof(::flyteidl::admin::AuthDefaultTypeInternal, kubernetes_service_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Auth, method_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, workflow_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, entity_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, default_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, fixed_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, auth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, expected_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, expected_outputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, created_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, updated_at_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, project_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, sort_by_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::LaunchPlanCreateRequest)},
  { 7, -1, sizeof(::flyteidl::admin::LaunchPlanCreateResponse)},
  { 12, -1, sizeof(::flyteidl::admin::LaunchPlan)},
  { 20, -1, sizeof(::flyteidl::admin::LaunchPlanList)},
  { 27, -1, sizeof(::flyteidl::admin::Auth)},
  { 35, -1, sizeof(::flyteidl::admin::LaunchPlanSpec)},
  { 48, -1, sizeof(::flyteidl::admin::LaunchPlanClosure)},
  { 58, -1, sizeof(::flyteidl::admin::LaunchPlanMetadata)},
  { 65, -1, sizeof(::flyteidl::admin::LaunchPlanUpdateRequest)},
  { 72, -1, sizeof(::flyteidl::admin::LaunchPlanUpdateResponse)},
  { 77, -1, sizeof(::flyteidl::admin::ActiveLaunchPlanRequest)},
  { 83, -1, sizeof(::flyteidl::admin::ActiveLaunchPlanListRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Auth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanClosure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ActiveLaunchPlanRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ActiveLaunchPlanListRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/admin/launch_plan.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n flyteidl/admin/launch_plan.proto\022\016flyt"
      "eidl.admin\032\034flyteidl/core/literals.proto"
      "\032\036flyteidl/core/identifier.proto\032\035flytei"
      "dl/core/interface.proto\032\035flyteidl/admin/"
      "schedule.proto\032\033flyteidl/admin/common.pr"
      "oto\032\037google/protobuf/timestamp.proto\"n\n\027"
      "LaunchPlanCreateRequest\022%\n\002id\030\001 \001(\0132\031.fl"
      "yteidl.core.Identifier\022,\n\004spec\030\002 \001(\0132\036.f"
      "lyteidl.admin.LaunchPlanSpec\"\032\n\030LaunchPl"
      "anCreateResponse\"\225\001\n\nLaunchPlan\022%\n\002id\030\001 "
      "\001(\0132\031.flyteidl.core.Identifier\022,\n\004spec\030\002"
      " \001(\0132\036.flyteidl.admin.LaunchPlanSpec\0222\n\007"
      "closure\030\003 \001(\0132!.flyteidl.admin.LaunchPla"
      "nClosure\"Q\n\016LaunchPlanList\0220\n\014launch_pla"
      "ns\030\001 \003(\0132\032.flyteidl.admin.LaunchPlan\022\r\n\005"
      "token\030\002 \001(\t\"T\n\004Auth\022\034\n\022assumable_iam_rol"
      "e\030\001 \001(\tH\000\022$\n\032kubernetes_service_account\030"
      "\002 \001(\tH\000B\010\n\006method\"\363\002\n\016LaunchPlanSpec\022.\n\013"
      "workflow_id\030\001 \001(\0132\031.flyteidl.core.Identi"
      "fier\022;\n\017entity_metadata\030\002 \001(\0132\".flyteidl"
      ".admin.LaunchPlanMetadata\0223\n\016default_inp"
      "uts\030\003 \001(\0132\033.flyteidl.core.ParameterMap\022/"
      "\n\014fixed_inputs\030\004 \001(\0132\031.flyteidl.core.Lit"
      "eralMap\022\020\n\004role\030\005 \001(\tB\002\030\001\022&\n\006labels\030\006 \001("
      "\0132\026.flyteidl.admin.Labels\0220\n\013annotations"
      "\030\007 \001(\0132\033.flyteidl.admin.Annotations\022\"\n\004a"
      "uth\030\010 \001(\0132\024.flyteidl.admin.Auth\"\217\002\n\021Laun"
      "chPlanClosure\022.\n\005state\030\001 \001(\0162\037.flyteidl."
      "admin.LaunchPlanState\0224\n\017expected_inputs"
      "\030\002 \001(\0132\033.flyteidl.core.ParameterMap\0224\n\020e"
      "xpected_outputs\030\003 \001(\0132\032.flyteidl.core.Va"
      "riableMap\022.\n\ncreated_at\030\004 \001(\0132\032.google.p"
      "rotobuf.Timestamp\022.\n\nupdated_at\030\005 \001(\0132\032."
      "google.protobuf.Timestamp\"u\n\022LaunchPlanM"
      "etadata\022*\n\010schedule\030\001 \001(\0132\030.flyteidl.adm"
      "in.Schedule\0223\n\rnotifications\030\002 \003(\0132\034.fly"
      "teidl.admin.Notification\"p\n\027LaunchPlanUp"
      "dateRequest\022%\n\002id\030\001 \001(\0132\031.flyteidl.core."
      "Identifier\022.\n\005state\030\002 \001(\0162\037.flyteidl.adm"
      "in.LaunchPlanState\"\032\n\030LaunchPlanUpdateRe"
      "sponse\"L\n\027ActiveLaunchPlanRequest\0221\n\002id\030"
      "\001 \001(\0132%.flyteidl.admin.NamedEntityIdenti"
      "fier\"\203\001\n\033ActiveLaunchPlanListRequest\022\017\n\007"
      "project\030\001 \001(\t\022\016\n\006domain\030\002 \001(\t\022\r\n\005limit\030\003"
      " \001(\r\022\r\n\005token\030\004 \001(\t\022%\n\007sort_by\030\005 \001(\0132\024.f"
      "lyteidl.admin.Sort*+\n\017LaunchPlanState\022\014\n"
      "\010INACTIVE\020\000\022\n\n\006ACTIVE\020\001B3Z1github.com/ly"
      "ft/flyteidl/gen/pb-go/flyteidl/adminb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/admin/launch_plan.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2fliterals_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fidentifier_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2finterface_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fadmin_2fcommon_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto
namespace flyteidl {
namespace admin {
const ::google::protobuf::EnumDescriptor* LaunchPlanState_descriptor() {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_enum_descriptors[0];
}
bool LaunchPlanState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LaunchPlanCreateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::LaunchPlanSpec*>(
      ::flyteidl::admin::LaunchPlanSpec::internal_default_instance());
}
void LaunchPlanCreateRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanCreateRequest::kIdFieldNumber;
const int LaunchPlanCreateRequest::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanCreateRequest::LaunchPlanCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanCreateRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanCreateRequest)
}
LaunchPlanCreateRequest::LaunchPlanCreateRequest(const LaunchPlanCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::LaunchPlanSpec(*from.spec_);
  } else {
    spec_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanCreateRequest)
}

void LaunchPlanCreateRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spec_));
  _cached_size_ = 0;
}

LaunchPlanCreateRequest::~LaunchPlanCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanCreateRequest)
  SharedDtor();
}

void LaunchPlanCreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void LaunchPlanCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlanCreateRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlanCreateRequest& LaunchPlanCreateRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanCreateRequest();
  return *internal_default_instance();
}

LaunchPlanCreateRequest* LaunchPlanCreateRequest::New(::google::protobuf::Arena* arena) const {
  LaunchPlanCreateRequest* n = new LaunchPlanCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlanCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
  _internal_metadata_.Clear();
}

bool LaunchPlanCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanCreateRequest)
  return false;
#undef DO_
}

void LaunchPlanCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->spec_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanCreateRequest)
}

::google::protobuf::uint8* LaunchPlanCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->spec_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanCreateRequest)
  return target;
}

size_t LaunchPlanCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanCreateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlanCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlanCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanCreateRequest)
    MergeFrom(*source);
  }
}

void LaunchPlanCreateRequest::MergeFrom(const LaunchPlanCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::LaunchPlanSpec::MergeFrom(from.spec());
  }
}

void LaunchPlanCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanCreateRequest::CopyFrom(const LaunchPlanCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanCreateRequest::IsInitialized() const {
  return true;
}

void LaunchPlanCreateRequest::Swap(LaunchPlanCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanCreateRequest::InternalSwap(LaunchPlanCreateRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(spec_, other->spec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlanCreateRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanCreateResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanCreateResponse::LaunchPlanCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanCreateResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanCreateResponse)
}
LaunchPlanCreateResponse::LaunchPlanCreateResponse(const LaunchPlanCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanCreateResponse)
}

void LaunchPlanCreateResponse::SharedCtor() {
  _cached_size_ = 0;
}

LaunchPlanCreateResponse::~LaunchPlanCreateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanCreateResponse)
  SharedDtor();
}

void LaunchPlanCreateResponse::SharedDtor() {
}

void LaunchPlanCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlanCreateResponse::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlanCreateResponse& LaunchPlanCreateResponse::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanCreateResponse();
  return *internal_default_instance();
}

LaunchPlanCreateResponse* LaunchPlanCreateResponse::New(::google::protobuf::Arena* arena) const {
  LaunchPlanCreateResponse* n = new LaunchPlanCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlanCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool LaunchPlanCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanCreateResponse)
  return false;
#undef DO_
}

void LaunchPlanCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanCreateResponse)
}

::google::protobuf::uint8* LaunchPlanCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanCreateResponse)
  return target;
}

size_t LaunchPlanCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanCreateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlanCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlanCreateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanCreateResponse)
    MergeFrom(*source);
  }
}

void LaunchPlanCreateResponse::MergeFrom(const LaunchPlanCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LaunchPlanCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanCreateResponse::CopyFrom(const LaunchPlanCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanCreateResponse::IsInitialized() const {
  return true;
}

void LaunchPlanCreateResponse::Swap(LaunchPlanCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanCreateResponse::InternalSwap(LaunchPlanCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlanCreateResponse::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlan::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlan_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_LaunchPlan_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::LaunchPlanSpec*>(
      ::flyteidl::admin::LaunchPlanSpec::internal_default_instance());
  ::flyteidl::admin::_LaunchPlan_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::LaunchPlanClosure*>(
      ::flyteidl::admin::LaunchPlanClosure::internal_default_instance());
}
void LaunchPlan::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlan::kIdFieldNumber;
const int LaunchPlan::kSpecFieldNumber;
const int LaunchPlan::kClosureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlan::LaunchPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlan();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlan)
}
LaunchPlan::LaunchPlan(const LaunchPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::LaunchPlanSpec(*from.spec_);
  } else {
    spec_ = NULL;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::LaunchPlanClosure(*from.closure_);
  } else {
    closure_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlan)
}

void LaunchPlan::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closure_) -
      reinterpret_cast<char*>(&id_)) + sizeof(closure_));
  _cached_size_ = 0;
}

LaunchPlan::~LaunchPlan() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlan)
  SharedDtor();
}

void LaunchPlan::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete closure_;
}

void LaunchPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlan::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlan& LaunchPlan::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlan();
  return *internal_default_instance();
}

LaunchPlan* LaunchPlan::New(::google::protobuf::Arena* arena) const {
  LaunchPlan* n = new LaunchPlan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
  if (GetArenaNoVirtual() == NULL && closure_ != NULL) {
    delete closure_;
  }
  closure_ = NULL;
  _internal_metadata_.Clear();
}

bool LaunchPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanClosure closure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlan)
  return false;
#undef DO_
}

void LaunchPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->spec_, output);
  }

  // .flyteidl.admin.LaunchPlanClosure closure = 3;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->closure_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlan)
}

::google::protobuf::uint8* LaunchPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->spec_, deterministic, target);
  }

  // .flyteidl.admin.LaunchPlanClosure closure = 3;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->closure_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlan)
  return target;
}

size_t LaunchPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->spec_);
  }

  // .flyteidl.admin.LaunchPlanClosure closure = 3;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->closure_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlan)
    MergeFrom(*source);
  }
}

void LaunchPlan::MergeFrom(const LaunchPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::LaunchPlanSpec::MergeFrom(from.spec());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::LaunchPlanClosure::MergeFrom(from.closure());
  }
}

void LaunchPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlan::CopyFrom(const LaunchPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlan::IsInitialized() const {
  return true;
}

void LaunchPlan::Swap(LaunchPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlan::InternalSwap(LaunchPlan* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(spec_, other->spec_);
  swap(closure_, other->closure_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlan::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanList::kLaunchPlansFieldNumber;
const int LaunchPlanList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanList::LaunchPlanList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanList)
}
LaunchPlanList::LaunchPlanList(const LaunchPlanList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      launch_plans_(from.launch_plans_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanList)
}

void LaunchPlanList::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LaunchPlanList::~LaunchPlanList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanList)
  SharedDtor();
}

void LaunchPlanList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaunchPlanList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlanList::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlanList& LaunchPlanList::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanList();
  return *internal_default_instance();
}

LaunchPlanList* LaunchPlanList::New(::google::protobuf::Arena* arena) const {
  LaunchPlanList* n = new LaunchPlanList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlanList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  launch_plans_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LaunchPlanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_launch_plans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchPlanList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanList)
  return false;
#undef DO_
}

void LaunchPlanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->launch_plans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->launch_plans(static_cast<int>(i)), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchPlanList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanList)
}

::google::protobuf::uint8* LaunchPlanList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->launch_plans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->launch_plans(static_cast<int>(i)), deterministic, target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchPlanList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanList)
  return target;
}

size_t LaunchPlanList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->launch_plans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->launch_plans(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlanList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanList)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlanList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanList)
    MergeFrom(*source);
  }
}

void LaunchPlanList::MergeFrom(const LaunchPlanList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  launch_plans_.MergeFrom(from.launch_plans_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void LaunchPlanList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanList::CopyFrom(const LaunchPlanList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanList::IsInitialized() const {
  return true;
}

void LaunchPlanList::Swap(LaunchPlanList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanList::InternalSwap(LaunchPlanList* other) {
  using std::swap;
  launch_plans_.InternalSwap(&other->launch_plans_);
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlanList::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Auth::InitAsDefaultInstance() {
  ::flyteidl::admin::_Auth_default_instance_.assumable_iam_role_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::admin::_Auth_default_instance_.kubernetes_service_account_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Auth::kAssumableIamRoleFieldNumber;
const int Auth::kKubernetesServiceAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Auth::Auth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsAuth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Auth)
}
Auth::Auth(const Auth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_method();
  switch (from.method_case()) {
    case kAssumableIamRole: {
      set_assumable_iam_role(from.assumable_iam_role());
      break;
    }
    case kKubernetesServiceAccount: {
      set_kubernetes_service_account(from.kubernetes_service_account());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Auth)
}

void Auth::SharedCtor() {
  clear_has_method();
  _cached_size_ = 0;
}

Auth::~Auth() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Auth)
  SharedDtor();
}

void Auth::SharedDtor() {
  if (has_method()) {
    clear_method();
  }
}

void Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auth::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Auth& Auth::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsAuth();
  return *internal_default_instance();
}

Auth* Auth::New(::google::protobuf::Arena* arena) const {
  Auth* n = new Auth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Auth::clear_method() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.Auth)
  switch (method_case()) {
    case kAssumableIamRole: {
      method_.assumable_iam_role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kKubernetesServiceAccount: {
      method_.kubernetes_service_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METHOD_NOT_SET;
}


void Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_method();
  _internal_metadata_.Clear();
}

bool Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Auth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string assumable_iam_role = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assumable_iam_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Auth.assumable_iam_role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kubernetes_service_account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kubernetes_service_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Auth.kubernetes_service_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Auth)
  return false;
#undef DO_
}

void Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assumable_iam_role = 1;
  if (has_assumable_iam_role()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Auth.assumable_iam_role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->assumable_iam_role(), output);
  }

  // string kubernetes_service_account = 2;
  if (has_kubernetes_service_account()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Auth.kubernetes_service_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kubernetes_service_account(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Auth)
}

::google::protobuf::uint8* Auth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assumable_iam_role = 1;
  if (has_assumable_iam_role()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Auth.assumable_iam_role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->assumable_iam_role(), target);
  }

  // string kubernetes_service_account = 2;
  if (has_kubernetes_service_account()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Auth.kubernetes_service_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kubernetes_service_account(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Auth)
  return target;
}

size_t Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Auth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (method_case()) {
    // string assumable_iam_role = 1;
    case kAssumableIamRole: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assumable_iam_role());
      break;
    }
    // string kubernetes_service_account = 2;
    case kKubernetesServiceAccount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kubernetes_service_account());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const Auth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Auth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Auth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Auth)
    MergeFrom(*source);
  }
}

void Auth::MergeFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.method_case()) {
    case kAssumableIamRole: {
      set_assumable_iam_role(from.assumable_iam_role());
      break;
    }
    case kKubernetesServiceAccount: {
      set_kubernetes_service_account(from.kubernetes_service_account());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
}

void Auth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auth::CopyFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth::IsInitialized() const {
  return true;
}

void Auth::Swap(Auth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Auth::InternalSwap(Auth* other) {
  using std::swap;
  swap(method_, other->method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Auth::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanSpec::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->workflow_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->entity_metadata_ = const_cast< ::flyteidl::admin::LaunchPlanMetadata*>(
      ::flyteidl::admin::LaunchPlanMetadata::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->default_inputs_ = const_cast< ::flyteidl::core::ParameterMap*>(
      ::flyteidl::core::ParameterMap::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->fixed_inputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->labels_ = const_cast< ::flyteidl::admin::Labels*>(
      ::flyteidl::admin::Labels::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->annotations_ = const_cast< ::flyteidl::admin::Annotations*>(
      ::flyteidl::admin::Annotations::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->auth_ = const_cast< ::flyteidl::admin::Auth*>(
      ::flyteidl::admin::Auth::internal_default_instance());
}
void LaunchPlanSpec::clear_workflow_id() {
  if (GetArenaNoVirtual() == NULL && workflow_id_ != NULL) {
    delete workflow_id_;
  }
  workflow_id_ = NULL;
}
void LaunchPlanSpec::clear_default_inputs() {
  if (GetArenaNoVirtual() == NULL && default_inputs_ != NULL) {
    delete default_inputs_;
  }
  default_inputs_ = NULL;
}
void LaunchPlanSpec::clear_fixed_inputs() {
  if (GetArenaNoVirtual() == NULL && fixed_inputs_ != NULL) {
    delete fixed_inputs_;
  }
  fixed_inputs_ = NULL;
}
void LaunchPlanSpec::clear_labels() {
  if (GetArenaNoVirtual() == NULL && labels_ != NULL) {
    delete labels_;
  }
  labels_ = NULL;
}
void LaunchPlanSpec::clear_annotations() {
  if (GetArenaNoVirtual() == NULL && annotations_ != NULL) {
    delete annotations_;
  }
  annotations_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanSpec::kWorkflowIdFieldNumber;
const int LaunchPlanSpec::kEntityMetadataFieldNumber;
const int LaunchPlanSpec::kDefaultInputsFieldNumber;
const int LaunchPlanSpec::kFixedInputsFieldNumber;
const int LaunchPlanSpec::kRoleFieldNumber;
const int LaunchPlanSpec::kLabelsFieldNumber;
const int LaunchPlanSpec::kAnnotationsFieldNumber;
const int LaunchPlanSpec::kAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanSpec::LaunchPlanSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanSpec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanSpec)
}
LaunchPlanSpec::LaunchPlanSpec(const LaunchPlanSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.has_workflow_id()) {
    workflow_id_ = new ::flyteidl::core::Identifier(*from.workflow_id_);
  } else {
    workflow_id_ = NULL;
  }
  if (from.has_entity_metadata()) {
    entity_metadata_ = new ::flyteidl::admin::LaunchPlanMetadata(*from.entity_metadata_);
  } else {
    entity_metadata_ = NULL;
  }
  if (from.has_default_inputs()) {
    default_inputs_ = new ::flyteidl::core::ParameterMap(*from.default_inputs_);
  } else {
    default_inputs_ = NULL;
  }
  if (from.has_fixed_inputs()) {
    fixed_inputs_ = new ::flyteidl::core::LiteralMap(*from.fixed_inputs_);
  } else {
    fixed_inputs_ = NULL;
  }
  if (from.has_labels()) {
    labels_ = new ::flyteidl::admin::Labels(*from.labels_);
  } else {
    labels_ = NULL;
  }
  if (from.has_annotations()) {
    annotations_ = new ::flyteidl::admin::Annotations(*from.annotations_);
  } else {
    annotations_ = NULL;
  }
  if (from.has_auth()) {
    auth_ = new ::flyteidl::admin::Auth(*from.auth_);
  } else {
    auth_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanSpec)
}

void LaunchPlanSpec::SharedCtor() {
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&workflow_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_) -
      reinterpret_cast<char*>(&workflow_id_)) + sizeof(auth_));
  _cached_size_ = 0;
}

LaunchPlanSpec::~LaunchPlanSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanSpec)
  SharedDtor();
}

void LaunchPlanSpec::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete workflow_id_;
  if (this != internal_default_instance()) delete entity_metadata_;
  if (this != internal_default_instance()) delete default_inputs_;
  if (this != internal_default_instance()) delete fixed_inputs_;
  if (this != internal_default_instance()) delete labels_;
  if (this != internal_default_instance()) delete annotations_;
  if (this != internal_default_instance()) delete auth_;
}

void LaunchPlanSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlanSpec::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlanSpec& LaunchPlanSpec::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanSpec();
  return *internal_default_instance();
}

LaunchPlanSpec* LaunchPlanSpec::New(::google::protobuf::Arena* arena) const {
  LaunchPlanSpec* n = new LaunchPlanSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlanSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && workflow_id_ != NULL) {
    delete workflow_id_;
  }
  workflow_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && entity_metadata_ != NULL) {
    delete entity_metadata_;
  }
  entity_metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && default_inputs_ != NULL) {
    delete default_inputs_;
  }
  default_inputs_ = NULL;
  if (GetArenaNoVirtual() == NULL && fixed_inputs_ != NULL) {
    delete fixed_inputs_;
  }
  fixed_inputs_ = NULL;
  if (GetArenaNoVirtual() == NULL && labels_ != NULL) {
    delete labels_;
  }
  labels_ = NULL;
  if (GetArenaNoVirtual() == NULL && annotations_ != NULL) {
    delete annotations_;
  }
  annotations_ = NULL;
  if (GetArenaNoVirtual() == NULL && auth_ != NULL) {
    delete auth_;
  }
  auth_ = NULL;
  _internal_metadata_.Clear();
}

bool LaunchPlanSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier workflow_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ParameterMap default_inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_default_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap fixed_inputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), static_cast<int>(this->role().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchPlanSpec.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Labels labels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Annotations annotations = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Auth auth = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanSpec)
  return false;
#undef DO_
}

void LaunchPlanSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier workflow_id = 1;
  if (this->has_workflow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->workflow_id_, output);
  }

  // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
  if (this->has_entity_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->entity_metadata_, output);
  }

  // .flyteidl.core.ParameterMap default_inputs = 3;
  if (this->has_default_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->default_inputs_, output);
  }

  // .flyteidl.core.LiteralMap fixed_inputs = 4;
  if (this->has_fixed_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->fixed_inputs_, output);
  }

  // string role = 5 [deprecated = true];
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), static_cast<int>(this->role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchPlanSpec.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->role(), output);
  }

  // .flyteidl.admin.Labels labels = 6;
  if (this->has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->labels_, output);
  }

  // .flyteidl.admin.Annotations annotations = 7;
  if (this->has_annotations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->annotations_, output);
  }

  // .flyteidl.admin.Auth auth = 8;
  if (this->has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->auth_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanSpec)
}

::google::protobuf::uint8* LaunchPlanSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier workflow_id = 1;
  if (this->has_workflow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->workflow_id_, deterministic, target);
  }

  // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
  if (this->has_entity_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->entity_metadata_, deterministic, target);
  }

  // .flyteidl.core.ParameterMap default_inputs = 3;
  if (this->has_default_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->default_inputs_, deterministic, target);
  }

  // .flyteidl.core.LiteralMap fixed_inputs = 4;
  if (this->has_fixed_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->fixed_inputs_, deterministic, target);
  }

  // string role = 5 [deprecated = true];
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), static_cast<int>(this->role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchPlanSpec.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->role(), target);
  }

  // .flyteidl.admin.Labels labels = 6;
  if (this->has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->labels_, deterministic, target);
  }

  // .flyteidl.admin.Annotations annotations = 7;
  if (this->has_annotations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->annotations_, deterministic, target);
  }

  // .flyteidl.admin.Auth auth = 8;
  if (this->has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->auth_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanSpec)
  return target;
}

size_t LaunchPlanSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string role = 5 [deprecated = true];
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  // .flyteidl.core.Identifier workflow_id = 1;
  if (this->has_workflow_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->workflow_id_);
  }

  // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
  if (this->has_entity_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->entity_metadata_);
  }

  // .flyteidl.core.ParameterMap default_inputs = 3;
  if (this->has_default_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->default_inputs_);
  }

  // .flyteidl.core.LiteralMap fixed_inputs = 4;
  if (this->has_fixed_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fixed_inputs_);
  }

  // .flyteidl.admin.Labels labels = 6;
  if (this->has_labels()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->labels_);
  }

  // .flyteidl.admin.Annotations annotations = 7;
  if (this->has_annotations()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->annotations_);
  }

  // .flyteidl.admin.Auth auth = 8;
  if (this->has_auth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->auth_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlanSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlanSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanSpec)
    MergeFrom(*source);
  }
}

void LaunchPlanSpec::MergeFrom(const LaunchPlanSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.has_workflow_id()) {
    mutable_workflow_id()->::flyteidl::core::Identifier::MergeFrom(from.workflow_id());
  }
  if (from.has_entity_metadata()) {
    mutable_entity_metadata()->::flyteidl::admin::LaunchPlanMetadata::MergeFrom(from.entity_metadata());
  }
  if (from.has_default_inputs()) {
    mutable_default_inputs()->::flyteidl::core::ParameterMap::MergeFrom(from.default_inputs());
  }
  if (from.has_fixed_inputs()) {
    mutable_fixed_inputs()->::flyteidl::core::LiteralMap::MergeFrom(from.fixed_inputs());
  }
  if (from.has_labels()) {
    mutable_labels()->::flyteidl::admin::Labels::MergeFrom(from.labels());
  }
  if (from.has_annotations()) {
    mutable_annotations()->::flyteidl::admin::Annotations::MergeFrom(from.annotations());
  }
  if (from.has_auth()) {
    mutable_auth()->::flyteidl::admin::Auth::MergeFrom(from.auth());
  }
}

void LaunchPlanSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanSpec::CopyFrom(const LaunchPlanSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanSpec::IsInitialized() const {
  return true;
}

void LaunchPlanSpec::Swap(LaunchPlanSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanSpec::InternalSwap(LaunchPlanSpec* other) {
  using std::swap;
  role_.Swap(&other->role_);
  swap(workflow_id_, other->workflow_id_);
  swap(entity_metadata_, other->entity_metadata_);
  swap(default_inputs_, other->default_inputs_);
  swap(fixed_inputs_, other->fixed_inputs_);
  swap(labels_, other->labels_);
  swap(annotations_, other->annotations_);
  swap(auth_, other->auth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlanSpec::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanClosure_default_instance_._instance.get_mutable()->expected_inputs_ = const_cast< ::flyteidl::core::ParameterMap*>(
      ::flyteidl::core::ParameterMap::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanClosure_default_instance_._instance.get_mutable()->expected_outputs_ = const_cast< ::flyteidl::core::VariableMap*>(
      ::flyteidl::core::VariableMap::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanClosure_default_instance_._instance.get_mutable()->updated_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void LaunchPlanClosure::clear_expected_inputs() {
  if (GetArenaNoVirtual() == NULL && expected_inputs_ != NULL) {
    delete expected_inputs_;
  }
  expected_inputs_ = NULL;
}
void LaunchPlanClosure::clear_expected_outputs() {
  if (GetArenaNoVirtual() == NULL && expected_outputs_ != NULL) {
    delete expected_outputs_;
  }
  expected_outputs_ = NULL;
}
void LaunchPlanClosure::clear_created_at() {
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
}
void LaunchPlanClosure::clear_updated_at() {
  if (GetArenaNoVirtual() == NULL && updated_at_ != NULL) {
    delete updated_at_;
  }
  updated_at_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanClosure::kStateFieldNumber;
const int LaunchPlanClosure::kExpectedInputsFieldNumber;
const int LaunchPlanClosure::kExpectedOutputsFieldNumber;
const int LaunchPlanClosure::kCreatedAtFieldNumber;
const int LaunchPlanClosure::kUpdatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanClosure::LaunchPlanClosure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanClosure();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanClosure)
}
LaunchPlanClosure::LaunchPlanClosure(const LaunchPlanClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expected_inputs()) {
    expected_inputs_ = new ::flyteidl::core::ParameterMap(*from.expected_inputs_);
  } else {
    expected_inputs_ = NULL;
  }
  if (from.has_expected_outputs()) {
    expected_outputs_ = new ::flyteidl::core::VariableMap(*from.expected_outputs_);
  } else {
    expected_outputs_ = NULL;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = NULL;
  }
  if (from.has_updated_at()) {
    updated_at_ = new ::google::protobuf::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanClosure)
}

void LaunchPlanClosure::SharedCtor() {
  ::memset(&expected_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&expected_inputs_)) + sizeof(state_));
  _cached_size_ = 0;
}

LaunchPlanClosure::~LaunchPlanClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanClosure)
  SharedDtor();
}

void LaunchPlanClosure::SharedDtor() {
  if (this != internal_default_instance()) delete expected_inputs_;
  if (this != internal_default_instance()) delete expected_outputs_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
}

void LaunchPlanClosure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlanClosure::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlanClosure& LaunchPlanClosure::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanClosure();
  return *internal_default_instance();
}

LaunchPlanClosure* LaunchPlanClosure::New(::google::protobuf::Arena* arena) const {
  LaunchPlanClosure* n = new LaunchPlanClosure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlanClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && expected_inputs_ != NULL) {
    delete expected_inputs_;
  }
  expected_inputs_ = NULL;
  if (GetArenaNoVirtual() == NULL && expected_outputs_ != NULL) {
    delete expected_outputs_;
  }
  expected_outputs_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && updated_at_ != NULL) {
    delete updated_at_;
  }
  updated_at_ = NULL;
  state_ = 0;
  _internal_metadata_.Clear();
}

bool LaunchPlanClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanClosure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.LaunchPlanState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::flyteidl::admin::LaunchPlanState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ParameterMap expected_inputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expected_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.VariableMap expected_outputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expected_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated_at = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanClosure)
  return false;
#undef DO_
}

void LaunchPlanClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.LaunchPlanState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // .flyteidl.core.ParameterMap expected_inputs = 2;
  if (this->has_expected_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->expected_inputs_, output);
  }

  // .flyteidl.core.VariableMap expected_outputs = 3;
  if (this->has_expected_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->expected_outputs_, output);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->created_at_, output);
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->updated_at_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanClosure)
}

::google::protobuf::uint8* LaunchPlanClosure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.LaunchPlanState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // .flyteidl.core.ParameterMap expected_inputs = 2;
  if (this->has_expected_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->expected_inputs_, deterministic, target);
  }

  // .flyteidl.core.VariableMap expected_outputs = 3;
  if (this->has_expected_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->expected_outputs_, deterministic, target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->created_at_, deterministic, target);
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->updated_at_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanClosure)
  return target;
}

size_t LaunchPlanClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanClosure)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.ParameterMap expected_inputs = 2;
  if (this->has_expected_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->expected_inputs_);
  }

  // .flyteidl.core.VariableMap expected_outputs = 3;
  if (this->has_expected_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->expected_outputs_);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->updated_at_);
  }

  // .flyteidl.admin.LaunchPlanState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlanClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanClosure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlanClosure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanClosure)
    MergeFrom(*source);
  }
}

void LaunchPlanClosure::MergeFrom(const LaunchPlanClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expected_inputs()) {
    mutable_expected_inputs()->::flyteidl::core::ParameterMap::MergeFrom(from.expected_inputs());
  }
  if (from.has_expected_outputs()) {
    mutable_expected_outputs()->::flyteidl::core::VariableMap::MergeFrom(from.expected_outputs());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.has_updated_at()) {
    mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(from.updated_at());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void LaunchPlanClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanClosure::CopyFrom(const LaunchPlanClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanClosure::IsInitialized() const {
  return true;
}

void LaunchPlanClosure::Swap(LaunchPlanClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanClosure::InternalSwap(LaunchPlanClosure* other) {
  using std::swap;
  swap(expected_inputs_, other->expected_inputs_);
  swap(expected_outputs_, other->expected_outputs_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlanClosure::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanMetadata::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanMetadata_default_instance_._instance.get_mutable()->schedule_ = const_cast< ::flyteidl::admin::Schedule*>(
      ::flyteidl::admin::Schedule::internal_default_instance());
}
void LaunchPlanMetadata::clear_schedule() {
  if (GetArenaNoVirtual() == NULL && schedule_ != NULL) {
    delete schedule_;
  }
  schedule_ = NULL;
}
void LaunchPlanMetadata::clear_notifications() {
  notifications_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanMetadata::kScheduleFieldNumber;
const int LaunchPlanMetadata::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanMetadata::LaunchPlanMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanMetadata)
}
LaunchPlanMetadata::LaunchPlanMetadata(const LaunchPlanMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_schedule()) {
    schedule_ = new ::flyteidl::admin::Schedule(*from.schedule_);
  } else {
    schedule_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanMetadata)
}

void LaunchPlanMetadata::SharedCtor() {
  schedule_ = NULL;
  _cached_size_ = 0;
}

LaunchPlanMetadata::~LaunchPlanMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanMetadata)
  SharedDtor();
}

void LaunchPlanMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete schedule_;
}

void LaunchPlanMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlanMetadata::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlanMetadata& LaunchPlanMetadata::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanMetadata();
  return *internal_default_instance();
}

LaunchPlanMetadata* LaunchPlanMetadata::New(::google::protobuf::Arena* arena) const {
  LaunchPlanMetadata* n = new LaunchPlanMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlanMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  if (GetArenaNoVirtual() == NULL && schedule_ != NULL) {
    delete schedule_;
  }
  schedule_ = NULL;
  _internal_metadata_.Clear();
}

bool LaunchPlanMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.Schedule schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.admin.Notification notifications = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanMetadata)
  return false;
#undef DO_
}

void LaunchPlanMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.Schedule schedule = 1;
  if (this->has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->schedule_, output);
  }

  // repeated .flyteidl.admin.Notification notifications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notifications(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanMetadata)
}

::google::protobuf::uint8* LaunchPlanMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.Schedule schedule = 1;
  if (this->has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->schedule_, deterministic, target);
  }

  // repeated .flyteidl.admin.Notification notifications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanMetadata)
  return target;
}

size_t LaunchPlanMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.admin.Notification notifications = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  // .flyteidl.admin.Schedule schedule = 1;
  if (this->has_schedule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->schedule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlanMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlanMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanMetadata)
    MergeFrom(*source);
  }
}

void LaunchPlanMetadata::MergeFrom(const LaunchPlanMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  if (from.has_schedule()) {
    mutable_schedule()->::flyteidl::admin::Schedule::MergeFrom(from.schedule());
  }
}

void LaunchPlanMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanMetadata::CopyFrom(const LaunchPlanMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanMetadata::IsInitialized() const {
  return true;
}

void LaunchPlanMetadata::Swap(LaunchPlanMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanMetadata::InternalSwap(LaunchPlanMetadata* other) {
  using std::swap;
  notifications_.InternalSwap(&other->notifications_);
  swap(schedule_, other->schedule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlanMetadata::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanUpdateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanUpdateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
void LaunchPlanUpdateRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanUpdateRequest::kIdFieldNumber;
const int LaunchPlanUpdateRequest::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanUpdateRequest::LaunchPlanUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanUpdateRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanUpdateRequest)
}
LaunchPlanUpdateRequest::LaunchPlanUpdateRequest(const LaunchPlanUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanUpdateRequest)
}

void LaunchPlanUpdateRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
  _cached_size_ = 0;
}

LaunchPlanUpdateRequest::~LaunchPlanUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanUpdateRequest)
  SharedDtor();
}

void LaunchPlanUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void LaunchPlanUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlanUpdateRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlanUpdateRequest& LaunchPlanUpdateRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanUpdateRequest();
  return *internal_default_instance();
}

LaunchPlanUpdateRequest* LaunchPlanUpdateRequest::New(::google::protobuf::Arena* arena) const {
  LaunchPlanUpdateRequest* n = new LaunchPlanUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlanUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  state_ = 0;
  _internal_metadata_.Clear();
}

bool LaunchPlanUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::flyteidl::admin::LaunchPlanState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanUpdateRequest)
  return false;
#undef DO_
}

void LaunchPlanUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .flyteidl.admin.LaunchPlanState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanUpdateRequest)
}

::google::protobuf::uint8* LaunchPlanUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .flyteidl.admin.LaunchPlanState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanUpdateRequest)
  return target;
}

size_t LaunchPlanUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanUpdateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.admin.LaunchPlanState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlanUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlanUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanUpdateRequest)
    MergeFrom(*source);
  }
}

void LaunchPlanUpdateRequest::MergeFrom(const LaunchPlanUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void LaunchPlanUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanUpdateRequest::CopyFrom(const LaunchPlanUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanUpdateRequest::IsInitialized() const {
  return true;
}

void LaunchPlanUpdateRequest::Swap(LaunchPlanUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanUpdateRequest::InternalSwap(LaunchPlanUpdateRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlanUpdateRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanUpdateResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanUpdateResponse::LaunchPlanUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanUpdateResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanUpdateResponse)
}
LaunchPlanUpdateResponse::LaunchPlanUpdateResponse(const LaunchPlanUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanUpdateResponse)
}

void LaunchPlanUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
}

LaunchPlanUpdateResponse::~LaunchPlanUpdateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanUpdateResponse)
  SharedDtor();
}

void LaunchPlanUpdateResponse::SharedDtor() {
}

void LaunchPlanUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchPlanUpdateResponse::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaunchPlanUpdateResponse& LaunchPlanUpdateResponse::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsLaunchPlanUpdateResponse();
  return *internal_default_instance();
}

LaunchPlanUpdateResponse* LaunchPlanUpdateResponse::New(::google::protobuf::Arena* arena) const {
  LaunchPlanUpdateResponse* n = new LaunchPlanUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaunchPlanUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool LaunchPlanUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanUpdateResponse)
  return false;
#undef DO_
}

void LaunchPlanUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanUpdateResponse)
}

::google::protobuf::uint8* LaunchPlanUpdateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanUpdateResponse)
  return target;
}

size_t LaunchPlanUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanUpdateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchPlanUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanUpdateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaunchPlanUpdateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanUpdateResponse)
    MergeFrom(*source);
  }
}

void LaunchPlanUpdateResponse::MergeFrom(const LaunchPlanUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LaunchPlanUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanUpdateResponse::CopyFrom(const LaunchPlanUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanUpdateResponse::IsInitialized() const {
  return true;
}

void LaunchPlanUpdateResponse::Swap(LaunchPlanUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanUpdateResponse::InternalSwap(LaunchPlanUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaunchPlanUpdateResponse::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActiveLaunchPlanRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ActiveLaunchPlanRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::admin::NamedEntityIdentifier*>(
      ::flyteidl::admin::NamedEntityIdentifier::internal_default_instance());
}
void ActiveLaunchPlanRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveLaunchPlanRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveLaunchPlanRequest::ActiveLaunchPlanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsActiveLaunchPlanRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ActiveLaunchPlanRequest)
}
ActiveLaunchPlanRequest::ActiveLaunchPlanRequest(const ActiveLaunchPlanRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::admin::NamedEntityIdentifier(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ActiveLaunchPlanRequest)
}

void ActiveLaunchPlanRequest::SharedCtor() {
  id_ = NULL;
  _cached_size_ = 0;
}

ActiveLaunchPlanRequest::~ActiveLaunchPlanRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ActiveLaunchPlanRequest)
  SharedDtor();
}

void ActiveLaunchPlanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ActiveLaunchPlanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveLaunchPlanRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActiveLaunchPlanRequest& ActiveLaunchPlanRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsActiveLaunchPlanRequest();
  return *internal_default_instance();
}

ActiveLaunchPlanRequest* ActiveLaunchPlanRequest::New(::google::protobuf::Arena* arena) const {
  ActiveLaunchPlanRequest* n = new ActiveLaunchPlanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveLaunchPlanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ActiveLaunchPlanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool ActiveLaunchPlanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ActiveLaunchPlanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.NamedEntityIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ActiveLaunchPlanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ActiveLaunchPlanRequest)
  return false;
#undef DO_
}

void ActiveLaunchPlanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ActiveLaunchPlanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ActiveLaunchPlanRequest)
}

::google::protobuf::uint8* ActiveLaunchPlanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ActiveLaunchPlanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ActiveLaunchPlanRequest)
  return target;
}

size_t ActiveLaunchPlanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ActiveLaunchPlanRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveLaunchPlanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ActiveLaunchPlanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveLaunchPlanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActiveLaunchPlanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ActiveLaunchPlanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ActiveLaunchPlanRequest)
    MergeFrom(*source);
  }
}

void ActiveLaunchPlanRequest::MergeFrom(const ActiveLaunchPlanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ActiveLaunchPlanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::admin::NamedEntityIdentifier::MergeFrom(from.id());
  }
}

void ActiveLaunchPlanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ActiveLaunchPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveLaunchPlanRequest::CopyFrom(const ActiveLaunchPlanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ActiveLaunchPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveLaunchPlanRequest::IsInitialized() const {
  return true;
}

void ActiveLaunchPlanRequest::Swap(ActiveLaunchPlanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveLaunchPlanRequest::InternalSwap(ActiveLaunchPlanRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActiveLaunchPlanRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActiveLaunchPlanListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ActiveLaunchPlanListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
void ActiveLaunchPlanListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == NULL && sort_by_ != NULL) {
    delete sort_by_;
  }
  sort_by_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveLaunchPlanListRequest::kProjectFieldNumber;
const int ActiveLaunchPlanListRequest::kDomainFieldNumber;
const int ActiveLaunchPlanListRequest::kLimitFieldNumber;
const int ActiveLaunchPlanListRequest::kTokenFieldNumber;
const int ActiveLaunchPlanListRequest::kSortByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveLaunchPlanListRequest::ActiveLaunchPlanListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsActiveLaunchPlanListRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ActiveLaunchPlanListRequest)
}
ActiveLaunchPlanListRequest::ActiveLaunchPlanListRequest(const ActiveLaunchPlanListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = NULL;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ActiveLaunchPlanListRequest)
}

void ActiveLaunchPlanListRequest::SharedCtor() {
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_by_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&sort_by_)) + sizeof(limit_));
  _cached_size_ = 0;
}

ActiveLaunchPlanListRequest::~ActiveLaunchPlanListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ActiveLaunchPlanListRequest)
  SharedDtor();
}

void ActiveLaunchPlanListRequest::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sort_by_;
}

void ActiveLaunchPlanListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveLaunchPlanListRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActiveLaunchPlanListRequest& ActiveLaunchPlanListRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::InitDefaultsActiveLaunchPlanListRequest();
  return *internal_default_instance();
}

ActiveLaunchPlanListRequest* ActiveLaunchPlanListRequest::New(::google::protobuf::Arena* arena) const {
  ActiveLaunchPlanListRequest* n = new ActiveLaunchPlanListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveLaunchPlanListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sort_by_ != NULL) {
    delete sort_by_;
  }
  sort_by_ = NULL;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

bool ActiveLaunchPlanListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ActiveLaunchPlanListRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ActiveLaunchPlanListRequest.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ActiveLaunchPlanListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ActiveLaunchPlanListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ActiveLaunchPlanListRequest)
  return false;
#undef DO_
}

void ActiveLaunchPlanListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sort_by_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ActiveLaunchPlanListRequest)
}

::google::protobuf::uint8* ActiveLaunchPlanListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->sort_by_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ActiveLaunchPlanListRequest)
  return target;
}

size_t ActiveLaunchPlanListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sort_by_);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveLaunchPlanListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveLaunchPlanListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActiveLaunchPlanListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ActiveLaunchPlanListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ActiveLaunchPlanListRequest)
    MergeFrom(*source);
  }
}

void ActiveLaunchPlanListRequest::MergeFrom(const ActiveLaunchPlanListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ActiveLaunchPlanListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveLaunchPlanListRequest::CopyFrom(const ActiveLaunchPlanListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveLaunchPlanListRequest::IsInitialized() const {
  return true;
}

void ActiveLaunchPlanListRequest::Swap(ActiveLaunchPlanListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveLaunchPlanListRequest::InternalSwap(ActiveLaunchPlanListRequest* other) {
  using std::swap;
  project_.Swap(&other->project_);
  domain_.Swap(&other->domain_);
  token_.Swap(&other->token_);
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActiveLaunchPlanListRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2flaunch_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
