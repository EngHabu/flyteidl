// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/service/admin.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	admin "github.com/lyft/flyteidl/gen/pb-go/flyteidl/admin"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("flyteidl/service/admin.proto", fileDescriptor_5cfa31da1d67295d) }

var fileDescriptor_5cfa31da1d67295d = []byte{
	// 2844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x5d, 0x6c, 0x1c, 0x47,
	0x1d, 0xd7, 0x9e, 0x69, 0x11, 0xdb, 0xa6, 0x4d, 0x26, 0x0d, 0x4d, 0xb6, 0x76, 0x98, 0x5e, 0x9a,
	0xc4, 0x76, 0xec, 0x3b, 0xa7, 0x5f, 0x21, 0x69, 0x9b, 0x76, 0x9b, 0xa4, 0x96, 0x9b, 0x36, 0xad,
	0x4c, 0x81, 0xca, 0x14, 0x4e, 0x73, 0xb7, 0x73, 0x77, 0x93, 0xec, 0xed, 0x1e, 0x3b, 0x73, 0x4e,
	0x4d, 0x64, 0xa9, 0x8a, 0x28, 0x42, 0x08, 0x09, 0x69, 0x91, 0x40, 0xad, 0x50, 0xab, 0xc2, 0x53,
	0xaa, 0x46, 0x02, 0x2a, 0xf1, 0x5a, 0x84, 0x84, 0x04, 0xa8, 0xea, 0x4b, 0x1e, 0xf8, 0x90, 0x40,
	0x20, 0xc1, 0x53, 0x41, 0x7d, 0x08, 0x12, 0x2f, 0x54, 0xa0, 0x9d, 0x8f, 0xfd, 0xde, 0xbd, 0x3d,
	0xd7, 0x41, 0xaa, 0xc4, 0x93, 0xed, 0xfd, 0xff, 0x67, 0xf6, 0xff, 0xfb, 0xcd, 0xff, 0x6b, 0x66,
	0xc7, 0xfa, 0x74, 0xd7, 0xde, 0x60, 0x98, 0x58, 0x76, 0x93, 0x62, 0x6f, 0x9d, 0x74, 0x70, 0x13,
	0x59, 0x03, 0xe2, 0x34, 0x86, 0x9e, 0xcb, 0x5c, 0xb0, 0x53, 0x49, 0x1b, 0x52, 0x6a, 0x4c, 0xf7,
	0x5c, 0xb7, 0x67, 0xe3, 0x26, 0x1a, 0x92, 0x26, 0x72, 0x1c, 0x97, 0x21, 0x46, 0x5c, 0x87, 0x0a,
	0x7d, 0x23, 0x9a, 0x8d, 0xcf, 0xd2, 0x1c, 0x7a, 0xee, 0x79, 0xdc, 0x61, 0x52, 0xda, 0xc8, 0x97,
	0xb6, 0x2c, 0x77, 0x80, 0x88, 0xd3, 0x42, 0x8c, 0x79, 0xa4, 0x3d, 0x62, 0x58, 0xcd, 0xb6, 0x2f,
	0xa5, 0xcf, 0x10, 0xbd, 0x20, 0x45, 0x33, 0x29, 0xd1, 0x45, 0xd7, 0xbb, 0xd0, 0xb5, 0xdd, 0x8b,
	0x52, 0x3c, 0x5b, 0x20, 0xce, 0xbe, 0x03, 0xa6, 0x34, 0x6d, 0x34, 0x72, 0x3a, 0xfd, 0xd6, 0xd0,
	0x46, 0x92, 0x03, 0xc3, 0x48, 0x69, 0xe0, 0x75, 0xec, 0x28, 0x44, 0xfb, 0xd3, 0xb2, 0x17, 0x71,
	0x67, 0x14, 0x10, 0x22, 0xe5, 0x87, 0x53, 0xf2, 0x01, 0x62, 0x9d, 0x3e, 0x6a, 0xdb, 0xb8, 0xe5,
	0x61, 0xea, 0x8e, 0xbc, 0x0e, 0x96, 0x8a, 0x07, 0x52, 0x8a, 0x8e, 0x6b, 0xe1, 0x56, 0x7a, 0xb6,
	0x03, 0x39, 0x7c, 0x64, 0x94, 0xee, 0x4a, 0x29, 0x75, 0xdc, 0xc1, 0x20, 0x14, 0x2e, 0xf0, 0x1f,
	0x9d, 0xc5, 0x1e, 0x76, 0x16, 0xe9, 0x45, 0xd4, 0xeb, 0x61, 0xaf, 0xe9, 0x0e, 0xf9, 0x0a, 0x66,
	0x57, 0xf3, 0xde, 0xf7, 0x5b, 0xfa, 0xad, 0x66, 0x30, 0xc9, 0xe7, 0xc4, 0xe2, 0x83, 0x5f, 0xd6,
	0x74, 0xfd, 0x94, 0x87, 0x11, 0xc3, 0xcf, 0x21, 0x7a, 0x01, 0xdc, 0x1d, 0x2e, 0x68, 0x43, 0x38,
	0x4d, 0xf0, 0x54, 0xc8, 0x57, 0xf1, 0x57, 0x47, 0x98, 0x32, 0xa3, 0x5e, 0xa6, 0x42, 0x87, 0xae,
	0x43, 0x71, 0xfd, 0x03, 0xcd, 0x37, 0xaf, 0x69, 0xc6, 0x21, 0xf1, 0x18, 0x22, 0xc7, 0x82, 0x1e,
	0xee, 0x11, 0xca, 0xb0, 0x07, 0x11, 0x0c, 0x40, 0x42, 0x0b, 0x77, 0x89, 0x43, 0x38, 0xca, 0x27,
	0x1f, 0xd7, 0xa7, 0xee, 0x5f, 0x5a, 0x02, 0x0f, 0xe9, 0xc7, 0x57, 0x31, 0x1b, 0x79, 0x0e, 0xb6,
	0x60, 0xd7, 0xf5, 0x60, 0x1b, 0x05, 0xc3, 0xf8, 0x5b, 0x21, 0xeb, 0x23, 0x06, 0x07, 0x68, 0x03,
	0xf6, 0xd1, 0x3a, 0x86, 0x5d, 0x44, 0x6c, 0x6c, 0xc1, 0x75, 0x64, 0x13, 0x0b, 0x89, 0x39, 0x70,
	0x30, 0xc7, 0x71, 0xf0, 0x15, 0xfd, 0x85, 0xc4, 0x1c, 0x28, 0x39, 0x83, 0x87, 0xbb, 0xd8, 0xc3,
	0x4e, 0x07, 0x53, 0x88, 0x1c, 0x48, 0x2c, 0xec, 0x30, 0xd2, 0x41, 0x36, 0x0c, 0x7e, 0xb2, 0x0d,
	0xa1, 0xd3, 0x47, 0x14, 0x22, 0xdb, 0xc3, 0xc8, 0xda, 0x80, 0x6d, 0x8c, 0x9d, 0xd0, 0x74, 0x6c,
	0x35, 0x2e, 0x5f, 0xfb, 0xeb, 0x77, 0x6b, 0xa0, 0xbe, 0x83, 0x07, 0xcb, 0xfa, 0x51, 0xbe, 0x5e,
	0xf4, 0x84, 0x36, 0x0f, 0x7e, 0xaa, 0xe9, 0x9f, 0x5c, 0xc6, 0x8c, 0x93, 0x08, 0xd3, 0x0c, 0x3d,
	0xd3, 0x0e, 0x82, 0x62, 0x19, 0x33, 0xc5, 0xe1, 0x1d, 0x79, 0x1c, 0xd6, 0x5d, 0xdf, 0x3c, 0x6c,
	0x1c, 0x5c, 0xc5, 0xcc, 0x23, 0x78, 0x3d, 0x60, 0x0d, 0xe2, 0x17, 0x09, 0x65, 0xc4, 0xe9, 0x65,
	0x28, 0xe3, 0x76, 0x3c, 0x0a, 0x1e, 0x49, 0xd8, 0xd1, 0xbc, 0x44, 0xac, 0x86, 0x8c, 0xc0, 0x4d,
	0xfe, 0x87, 0x08, 0x43, 0xf1, 0xbb, 0x83, 0x06, 0x58, 0xfc, 0xb6, 0x8e, 0x3d, 0x4a, 0x5c, 0x67,
	0x13, 0xfc, 0x49, 0xd3, 0x6f, 0x79, 0x8a, 0x50, 0x6e, 0xf5, 0x8a, 0x45, 0xc1, 0x52, 0xda, 0xac,
	0x73, 0x68, 0x80, 0xad, 0x33, 0x9c, 0x9b, 0x15, 0xce, 0x55, 0x97, 0x60, 0x2f, 0x18, 0xa1, 0x80,
	0xcc, 0x55, 0x1e, 0x51, 0xf7, 0x7c, 0xf3, 0xb4, 0xf1, 0xf8, 0x13, 0x98, 0x75, 0xfa, 0x85, 0xb8,
	0xe4, 0x8a, 0x04, 0x63, 0x28, 0xe4, 0x91, 0x15, 0x28, 0x11, 0x67, 0x38, 0x62, 0xb0, 0x4b, 0x6c,
	0x86, 0x3d, 0x2a, 0xa0, 0x1f, 0x04, 0x07, 0xe2, 0xd0, 0x5b, 0xc4, 0xa2, 0xcd, 0x4b, 0x11, 0x74,
	0x89, 0x1b, 0xbc, 0xaf, 0xe9, 0x9f, 0x52, 0x00, 0x29, 0x38, 0x90, 0x36, 0x76, 0x55, 0x46, 0x6c,
	0x1c, 0xd1, 0xde, 0xbc, 0xa5, 0xe1, 0x00, 0x5e, 0xd3, 0x7c, 0xf3, 0xb8, 0x71, 0xac, 0x1c, 0x41,
	0xb9, 0xd9, 0x2f, 0x80, 0xa5, 0x49, 0x57, 0x6c, 0x6d, 0x16, 0x1c, 0xaa, 0x36, 0x06, 0xfc, 0xbe,
	0xa6, 0xdf, 0x26, 0x22, 0xee, 0x8b, 0x32, 0x39, 0x82, 0x83, 0x69, 0x34, 0x4a, 0x92, 0x8c, 0xe9,
	0x43, 0xe3, 0xd4, 0x64, 0x5c, 0xff, 0x4b, 0xf3, 0xcd, 0xdf, 0x6a, 0xc6, 0x7c, 0x7e, 0x5c, 0xab,
	0x94, 0xfc, 0x71, 0x8e, 0xed, 0x4f, 0xd7, 0x77, 0x29, 0xb6, 0x15, 0x1c, 0x1e, 0xdf, 0xbf, 0xd0,
	0xf4, 0x5b, 0x96, 0x31, 0x0b, 0x89, 0x1d, 0x1f, 0xe3, 0x7b, 0x8b, 0x38, 0xad, 0x5f, 0xf4, 0xcd,
	0x23, 0xc6, 0x5c, 0x6e, 0x9c, 0xe7, 0x51, 0xc8, 0xed, 0x3a, 0x05, 0xcc, 0x8c, 0x5d, 0x13, 0xc7,
	0xfb, 0x3f, 0x34, 0xfd, 0xf6, 0xc0, 0x95, 0x95, 0x25, 0x37, 0x3c, 0xe6, 0x37, 0x7d, 0xf3, 0xac,
	0xb1, 0x22, 0x22, 0x66, 0x0c, 0xcc, 0xca, 0xa1, 0x3f, 0x07, 0x0e, 0xa7, 0x99, 0x28, 0x0a, 0xff,
	0xff, 0x68, 0xfa, 0x8e, 0x38, 0xde, 0x8a, 0x29, 0x60, 0xba, 0x68, 0xe5, 0x38, 0xa6, 0x37, 0x35,
	0xdf, 0x7c, 0xc4, 0x78, 0x28, 0x95, 0x06, 0x72, 0x10, 0x95, 0xc3, 0xb0, 0xc0, 0xfd, 0x5b, 0x59,
	0xd0, 0xb5, 0x05, 0x30, 0x5f, 0x7d, 0x1c, 0xf8, 0x5b, 0x4d, 0xdf, 0x29, 0x82, 0xf5, 0x29, 0xde,
	0x05, 0x3d, 0x6b, 0x23, 0x07, 0x1c, 0x4e, 0xe3, 0x8b, 0x64, 0xc9, 0xb4, 0x30, 0x3b, 0x5e, 0x51,
	0x26, 0x86, 0x0f, 0x35, 0xdf, 0xfc, 0x83, 0x66, 0x2c, 0xe6, 0x27, 0x06, 0xd1, 0x81, 0xc1, 0xa0,
	0x03, 0xfb, 0x38, 0xe7, 0x86, 0x7d, 0xf5, 0x3b, 0x14, 0xf5, 0xb1, 0x9e, 0x92, 0xa7, 0x87, 0x77,
	0x35, 0x7d, 0xc7, 0x32, 0x66, 0x31, 0x92, 0xc7, 0x27, 0x08, 0xa3, 0x98, 0xdd, 0x20, 0x70, 0x1a,
	0xc6, 0x42, 0x6e, 0x8a, 0x28, 0x20, 0x93, 0x5b, 0xf8, 0x04, 0x38, 0x9d, 0x67, 0xe1, 0xc4, 0x89,
	0xe2, 0xba, 0xa6, 0xef, 0x5e, 0xc6, 0xcc, 0xec, 0x30, 0xb2, 0x5e, 0xea, 0x39, 0x69, 0x8d, 0x2a,
	0xd8, 0xbe, 0xa7, 0xf9, 0xe6, 0xd3, 0xc6, 0xd9, 0x10, 0x1c, 0xeb, 0x63, 0x88, 0xf8, 0x3c, 0x09,
	0x6c, 0xd2, 0x18, 0x48, 0x87, 0xb8, 0x13, 0xa4, 0x05, 0x0b, 0xb6, 0x37, 0x64, 0x20, 0xa9, 0xa5,
	0x4d, 0x04, 0xd4, 0x63, 0xe0, 0xa4, 0xc2, 0x2e, 0x66, 0x6b, 0x4d, 0x48, 0x41, 0xd0, 0x2d, 0xec,
	0x09, 0x42, 0x3c, 0x0d, 0x8a, 0x82, 0x23, 0xe3, 0x70, 0xc7, 0xd3, 0xc7, 0xfe, 0x62, 0xec, 0x3c,
	0x81, 0x7c, 0x5d, 0x8b, 0x65, 0xc5, 0x72, 0xf0, 0xb4, 0x32, 0xfa, 0x25, 0xd0, 0x28, 0x45, 0x9f,
	0x4d, 0x8e, 0xd7, 0x35, 0x7d, 0x57, 0x60, 0x4f, 0x64, 0xdd, 0x0d, 0x2f, 0x07, 0x2f, 0xc5, 0x91,
	0x8f, 0x71, 0xe8, 0xca, 0xf5, 0x20, 0x96, 0x10, 0x63, 0x90, 0x8b, 0x4a, 0xc2, 0xb7, 0x6b, 0xa2,
	0x04, 0xc6, 0x57, 0xb7, 0x52, 0x51, 0x18, 0xb7, 0xaa, 0x6f, 0x6b, 0xbe, 0xf9, 0x98, 0x71, 0xb2,
	0x12, 0xb6, 0x72, 0x40, 0xe7, 0xc1, 0xb1, 0x2d, 0x06, 0xf1, 0x5a, 0x13, 0x2c, 0x4e, 0x34, 0x14,
	0xfc, 0xfc, 0x66, 0x7d, 0xe7, 0xe7, 0x87, 0x56, 0xe5, 0xfa, 0x20, 0x74, 0x2b, 0xd4, 0x07, 0xa5,
	0x28, 0xeb, 0xc3, 0xef, 0x6e, 0xf2, 0xcd, 0x97, 0x6f, 0x32, 0x2e, 0xdf, 0x24, 0x9e, 0x73, 0xb7,
	0xa7, 0x0c, 0xb1, 0x11, 0x85, 0x6e, 0xb7, 0x4a, 0x7a, 0x83, 0x26, 0x83, 0x03, 0x97, 0x32, 0xe8,
	0x3a, 0xf9, 0x69, 0x42, 0x24, 0xfd, 0x1e, 0x59, 0xc7, 0x0e, 0x54, 0xeb, 0xbe, 0x00, 0x05, 0xce,
	0x05, 0xc8, 0xe9, 0x81, 0x1d, 0xe4, 0xc0, 0x76, 0x18, 0x6f, 0x88, 0x05, 0x7b, 0x51, 0x32, 0xc0,
	0x0d, 0xb8, 0xd2, 0x85, 0xac, 0x4f, 0x28, 0xec, 0x20, 0xdb, 0x86, 0x14, 0x33, 0x9a, 0x2a, 0x5a,
	0xcc, 0x0d, 0x07, 0x39, 0x56, 0x64, 0xab, 0x7a, 0x37, 0x89, 0x0a, 0x87, 0x50, 0x5b, 0xe0, 0x00,
	0x3d, 0x4c, 0x47, 0x36, 0x0b, 0x00, 0x46, 0x93, 0x5f, 0x24, 0xb6, 0x1d, 0xd8, 0xc0, 0x2b, 0x4e,
	0xa0, 0xd4, 0x75, 0xbd, 0x01, 0xf6, 0xec, 0x8d, 0xbc, 0x2c, 0xa0, 0x94, 0x07, 0xc8, 0xc2, 0x90,
	0x38, 0x31, 0x13, 0xa2, 0xb4, 0x10, 0xd7, 0x27, 0x8e, 0x78, 0x93, 0xca, 0x10, 0x89, 0xf1, 0x62,
	0x74, 0x03, 0xae, 0x38, 0xfc, 0xbd, 0xfc, 0xcc, 0xa3, 0x9a, 0x19, 0x7d, 0x64, 0x41, 0x04, 0x69,
	0xa7, 0x8f, 0xad, 0x91, 0x8d, 0x21, 0xa2, 0xd4, 0xed, 0x10, 0xc4, 0xb0, 0x05, 0x49, 0xf0, 0x0e,
	0xd6, 0x87, 0x84, 0x2d, 0x88, 0x37, 0x87, 0x4a, 0xea, 0xd5, 0x16, 0xa1, 0xa8, 0x6d, 0x63, 0x4b,
	0x72, 0x8c, 0xa3, 0x4a, 0x5c, 0x6a, 0x39, 0xa1, 0xb0, 0x8d, 0x03, 0x8a, 0x29, 0x66, 0x29, 0xf6,
	0x79, 0x99, 0xce, 0xb5, 0x26, 0x66, 0x0a, 0xce, 0x5a, 0x82, 0x1d, 0x61, 0x08, 0x8f, 0xb1, 0x15,
	0x63, 0x5b, 0x0a, 0x65, 0x50, 0xfa, 0x7f, 0xa8, 0xe9, 0xb7, 0x8b, 0xb6, 0xe7, 0x8c, 0x3a, 0xb7,
	0x01, 0x99, 0xfd, 0x54, 0x28, 0x4a, 0x36, 0x58, 0x87, 0xc7, 0xea, 0xc9, 0xf8, 0x39, 0xe9, 0x9b,
	0xfb, 0x8d, 0x69, 0xd5, 0x5d, 0x45, 0xdd, 0x66, 0x74, 0x54, 0xc4, 0x61, 0xdd, 0x59, 0x07, 0x0a,
	0x56, 0x28, 0xe1, 0xfd, 0xc9, 0x4f, 0x34, 0x7d, 0xd7, 0x2a, 0x16, 0x50, 0x23, 0x33, 0x67, 0x0b,
	0x5f, 0xaf, 0x74, 0x27, 0x36, 0x74, 0xc5, 0x37, 0xa1, 0xb1, 0x5f, 0x0d, 0x2f, 0x31, 0x15, 0xd6,
	0xef, 0xca, 0x9a, 0xda, 0xf4, 0xe4, 0x40, 0xb9, 0xe5, 0xba, 0x75, 0x19, 0xb3, 0xc8, 0xdc, 0x23,
	0x45, 0x7d, 0x79, 0xa8, 0x12, 0xeb, 0xae, 0xf6, 0x15, 0x5a, 0x5c, 0x3f, 0xef, 0x9b, 0xf3, 0xc6,
	0x6c, 0xf9, 0xfe, 0x2b, 0x65, 0xed, 0x31, 0xf0, 0x40, 0x8e, 0xb5, 0x15, 0x7a, 0x8a, 0xcb, 0x35,
	0x7d, 0x67, 0x1c, 0xc4, 0x69, 0xc4, 0x10, 0x68, 0x56, 0x01, 0x12, 0x68, 0x2a, 0x30, 0x4b, 0xd5,
	0x07, 0xc8, 0x75, 0xf8, 0x96, 0xe6, 0x9b, 0x67, 0x8c, 0x53, 0x21, 0x48, 0x51, 0x67, 0x82, 0xf8,
	0x71, 0x47, 0x2c, 0xf8, 0xd5, 0x42, 0x0c, 0xc1, 0xae, 0xe7, 0x0e, 0x2a, 0xe1, 0x7f, 0x18, 0x9c,
	0x50, 0xf8, 0x83, 0x81, 0x13, 0x92, 0xf0, 0x2b, 0x4d, 0xbf, 0x2d, 0x28, 0x92, 0xa1, 0xb5, 0x15,
	0x6b, 0xee, 0x4c, 0xe1, 0x1a, 0xaa, 0x13, 0xa5, 0x87, 0x8d, 0x13, 0x45, 0x1b, 0xb1, 0xc8, 0xc4,
	0xd2, 0x6a, 0xbb, 0x08, 0x8e, 0x4c, 0xb0, 0xb2, 0xe0, 0x9f, 0x9a, 0x0e, 0x9e, 0xc3, 0xde, 0x80,
	0x38, 0x89, 0x80, 0x9f, 0x2b, 0xb4, 0x34, 0x54, 0x56, 0xa0, 0xe6, 0xab, 0xa8, 0xca, 0x55, 0xfc,
	0x86, 0xe6, 0x9b, 0xa7, 0x0c, 0x33, 0x14, 0xc4, 0xdb, 0xc5, 0x2c, 0xd0, 0x58, 0x55, 0x20, 0x8e,
	0x4c, 0xb6, 0xfc, 0x9d, 0x02, 0xe9, 0x89, 0xf9, 0xad, 0xf9, 0x70, 0x10, 0x8b, 0xff, 0xd6, 0xb8,
	0x1b, 0x9f, 0x73, 0xad, 0x18, 0xe8, 0x4c, 0x52, 0x48, 0x88, 0x63, 0xb1, 0x38, 0x53, 0xaa, 0x58,
	0x7f, 0x5d, 0xf3, 0xcd, 0x43, 0xc6, 0x3d, 0xb9, 0x01, 0xe9, 0xb8, 0x16, 0x4e, 0x3b, 0xe3, 0x10,
	0x38, 0x0a, 0x48, 0xf2, 0x50, 0x5d, 0xa0, 0x09, 0xff, 0x6c, 0xa5, 0xa1, 0x25, 0x24, 0x71, 0x9c,
	0x09, 0x41, 0x94, 0xe6, 0xf9, 0xec, 0xc4, 0xda, 0x04, 0xaf, 0xd6, 0x74, 0x10, 0xb8, 0x5c, 0xc2,
	0x6e, 0x9a, 0xcd, 0x9f, 0x09, 0x79, 0xdc, 0x93, 0xef, 0x1e, 0xab, 0x59, 0xff, 0x99, 0xe6, 0x9b,
	0x9f, 0x35, 0x1e, 0x4c, 0xb9, 0x73, 0x12, 0x7f, 0xb9, 0x2b, 0x8f, 0x00, 0x2d, 0xe4, 0x25, 0x3c,
	0x2a, 0x29, 0x60, 0x27, 0x5f, 0x1e, 0x72, 0x94, 0x2f, 0x16, 0xd1, 0xfd, 0xc1, 0x27, 0xf4, 0x7d,
	0x59, 0x72, 0x9e, 0x70, 0x3d, 0x7e, 0x18, 0xde, 0x2c, 0x45, 0x2e, 0xb5, 0x26, 0xa4, 0xea, 0xc3,
	0x29, 0xdf, 0x5c, 0x36, 0xce, 0x08, 0xaa, 0x3a, 0x7d, 0x62, 0x5b, 0x19, 0x9e, 0x44, 0x19, 0x11,
	0xdb, 0x26, 0xde, 0x0e, 0x84, 0xa1, 0xc1, 0x0f, 0x6c, 0x53, 0x1e, 0xf5, 0xd6, 0x14, 0xb8, 0x32,
	0xa5, 0xb8, 0xe3, 0x13, 0x7a, 0x38, 0xfd, 0x31, 0x86, 0x36, 0x2f, 0x25, 0x1f, 0xb4, 0x94, 0x87,
	0x24, 0x9e, 0x14, 0xf0, 0x3b, 0xf1, 0xd0, 0x90, 0xfa, 0x89, 0x47, 0x4a, 0xff, 0xad, 0x32, 0x4e,
	0x39, 0x78, 0x9e, 0xb6, 0x3c, 0x57, 0x2f, 0xc5, 0xa0, 0x74, 0x4a, 0x8c, 0x55, 0x2a, 0x85, 0x56,
	0x29, 0x05, 0xd5, 0x53, 0xe5, 0xe9, 0x78, 0x98, 0x79, 0x1b, 0x2d, 0xc4, 0x18, 0x1e, 0x0c, 0xd9,
	0x26, 0x78, 0xbb, 0xa6, 0xdf, 0x91, 0xce, 0x46, 0xbc, 0xb0, 0x1e, 0x19, 0x97, 0x91, 0xe2, 0x45,
	0x75, 0xa1, 0x9a, 0xb2, 0x4c, 0xc5, 0xef, 0x68, 0xbe, 0x69, 0x1a, 0x8f, 0x4e, 0x5a, 0x50, 0xf3,
	0xf2, 0x57, 0x2c, 0x4e, 0x79, 0x31, 0xfd, 0x1f, 0x25, 0xb1, 0xef, 0x6b, 0xfa, 0xed, 0xab, 0xf2,
	0x48, 0xeb, 0x59, 0x31, 0x63, 0xb6, 0x51, 0x95, 0x02, 0xa5, 0x57, 0xd8, 0xff, 0x65, 0xf4, 0x24,
	0x4d, 0xf7, 0xf9, 0xe6, 0x1e, 0x63, 0xf7, 0x6a, 0x74, 0xf6, 0xa7, 0xbe, 0x17, 0x73, 0xe4, 0x7b,
	0xea, 0x3b, 0x15, 0x72, 0xf9, 0x9c, 0x77, 0xa7, 0xdf, 0xd1, 0xf4, 0x1d, 0x62, 0x63, 0xa8, 0xec,
	0xba, 0xa7, 0xe0, 0x7d, 0xc9, 0xfd, 0xe7, 0xc1, 0x31, 0x5a, 0xd2, 0xa6, 0xa3, 0xbe, 0xb9, 0xdb,
	0xd8, 0x25, 0x77, 0x9e, 0xd5, 0x2c, 0x7a, 0x59, 0xd3, 0x6f, 0x0d, 0x52, 0x8d, 0x9c, 0x90, 0x82,
	0x7a, 0xc1, 0xab, 0x4a, 0x3f, 0x1d, 0xa9, 0xd1, 0xf5, 0x63, 0xbe, 0x39, 0x6d, 0x18, 0x22, 0x5f,
	0x45, 0xa7, 0x8a, 0xca, 0x12, 0x99, 0xbe, 0x01, 0xc8, 0x98, 0x02, 0xfe, 0xa8, 0xe9, 0xbb, 0x93,
	0x9f, 0x74, 0xce, 0x04, 0xfb, 0x36, 0xb0, 0x38, 0xb6, 0x21, 0xe4, 0x7a, 0xca, 0xb2, 0x46, 0x55,
	0x75, 0xc9, 0x58, 0x8f, 0xfb, 0x7a, 0xc9, 0x76, 0x43, 0x6e, 0x1f, 0x3d, 0xdc, 0x71, 0x3d, 0x2b,
	0xf0, 0x73, 0x04, 0x87, 0x7d, 0x44, 0x31, 0x64, 0x1e, 0x72, 0x68, 0xec, 0x44, 0x72, 0xa6, 0xbe,
	0x37, 0x6c, 0x3a, 0x82, 0x21, 0x34, 0xf9, 0x59, 0xe5, 0xd7, 0xe1, 0xe6, 0x89, 0x07, 0x1f, 0xc7,
	0x36, 0x57, 0x1a, 0x97, 0x09, 0x5c, 0xf3, 0x55, 0x54, 0x25, 0xa6, 0x16, 0x3f, 0xb6, 0x0f, 0x31,
	0x25, 0x03, 0xb3, 0x32, 0x9e, 0xd8, 0x19, 0xb0, 0xc4, 0x13, 0x4c, 0x94, 0xc2, 0x12, 0x94, 0xb4,
	0x02, 0x2c, 0x5c, 0x54, 0x0d, 0x4b, 0x9e, 0x6a, 0x3e, 0x96, 0x64, 0x49, 0xfb, 0x08, 0x58, 0xc2,
	0xcf, 0xd9, 0x57, 0xa6, 0x78, 0xbf, 0x97, 0x30, 0x21, 0xdb, 0xef, 0x25, 0xc4, 0x65, 0xfd, 0x5e,
	0x42, 0xb1, 0xfe, 0x6e, 0xad, 0xb8, 0xdf, 0xcb, 0xab, 0xce, 0x3f, 0xa8, 0x81, 0x57, 0x6a, 0x89,
	0xcf, 0xbd, 0xa9, 0x64, 0x59, 0xb9, 0x0a, 0x4f, 0x50, 0x76, 0x2b, 0xd7, 0xd9, 0x31, 0x85, 0x35,
	0xb7, 0x92, 0xe6, 0x95, 0xce, 0x6c, 0xad, 0xcc, 0x2d, 0x8e, 0xd9, 0x6a, 0x78, 0x4d, 0x36, 0xa7,
	0x09, 0x92, 0x73, 0x9a, 0xd3, 0x84, 0xbc, 0xb4, 0xe3, 0xca, 0x68, 0xf2, 0x0b, 0x1d, 0xd9, 0xe6,
	0x34, 0xb9, 0x58, 0xe5, 0xcd, 0xe9, 0x55, 0x0d, 0xbc, 0xa9, 0x15, 0x2e, 0x62, 0xe5, 0x15, 0xac,
	0xba, 0x7c, 0xd5, 0xd6, 0xae, 0x78, 0xe1, 0xc0, 0x9f, 0xa7, 0x78, 0x8f, 0x91, 0xa0, 0x22, 0xbf,
	0xc7, 0x48, 0x47, 0x41, 0x69, 0x8f, 0x91, 0xaf, 0x2c, 0xc3, 0xfa, 0xef, 0xb5, 0x2d, 0xf5, 0x18,
	0x79, 0x31, 0xf3, 0x46, 0x0d, 0xbc, 0x56, 0x4b, 0x74, 0x19, 0xff, 0x0f, 0x9c, 0x74, 0xe0, 0xbc,
	0x53, 0xd3, 0x67, 0x12, 0x6d, 0xc7, 0x69, 0x3e, 0xa5, 0x19, 0x5e, 0x28, 0x03, 0xf7, 0x17, 0x54,
	0xf4, 0xb4, 0x62, 0xb2, 0x2d, 0x79, 0x60, 0xc2, 0x51, 0x72, 0xf5, 0x7f, 0xac, 0xf9, 0xe6, 0xf3,
	0xc6, 0x17, 0x62, 0x27, 0xe4, 0x9d, 0x11, 0x65, 0xee, 0x80, 0x7c, 0x0d, 0x5b, 0x50, 0x5d, 0x2e,
	0x83, 0xd1, 0x75, 0xb7, 0xcc, 0xd1, 0x67, 0xd8, 0xda, 0x2c, 0x0a, 0x6e, 0x60, 0xc7, 0x1d, 0xb4,
	0x89, 0xc3, 0x3f, 0x94, 0x72, 0xa7, 0x78, 0xc6, 0x78, 0x32, 0xd5, 0x61, 0x64, 0x2f, 0xea, 0x35,
	0x2f, 0x25, 0x2f, 0xd4, 0x49, 0xe2, 0x63, 0x0f, 0x25, 0xf1, 0x41, 0x99, 0x78, 0xbd, 0xa6, 0x1b,
	0xcb, 0x98, 0x15, 0xd1, 0x77, 0xb4, 0x22, 0x11, 0xb1, 0xd2, 0x71, 0xef, 0x24, 0x43, 0x24, 0x71,
	0xaf, 0x68, 0xbe, 0xb9, 0x66, 0x3c, 0x9f, 0xf8, 0xa0, 0xb8, 0xdd, 0xd4, 0x3d, 0x18, 0x7d, 0xae,
	0x2f, 0xa1, 0x2e, 0xfb, 0xbd, 0xe9, 0x4a, 0x4d, 0x9f, 0x39, 0x8d, 0x6d, 0xfc, 0xd1, 0x7d, 0x4c,
	0xcc, 0x32, 0xa9, 0x8f, 0xa9, 0x51, 0x92, 0xaa, 0x57, 0x85, 0x8f, 0x89, 0xa7, 0x37, 0x84, 0xa8,
	0xe3, 0xf3, 0x5b, 0x22, 0x2a, 0xf0, 0xa6, 0xf7, 0x6a, 0xfa, 0x5e, 0xe1, 0xfd, 0xaa, 0x3d, 0x8d,
	0xd1, 0x54, 0x78, 0x66, 0x5a, 0x14, 0x85, 0x4b, 0xd5, 0x07, 0x48, 0x72, 0xde, 0xd3, 0x7c, 0xb3,
	0x6b, 0x58, 0xdb, 0x10, 0x80, 0xea, 0xc3, 0x13, 0xcf, 0xdd, 0x61, 0xf7, 0x9c, 0xa6, 0xaa, 0x65,
	0xac, 0x65, 0x6e, 0xb2, 0x6c, 0x21, 0x10, 0x13, 0xcf, 0xd4, 0x44, 0x9c, 0xd0, 0x1f, 0xd5, 0xf4,
	0x3d, 0xb1, 0x4b, 0x4b, 0x31, 0x36, 0x17, 0xc6, 0x93, 0x13, 0x0b, 0xca, 0xc5, 0x8a, 0xda, 0x92,
	0xc7, 0xb7, 0x34, 0xdf, 0xec, 0x1b, 0xdd, 0x6d, 0x89, 0xc7, 0x6a, 0x4c, 0x3e, 0x04, 0x8e, 0x97,
	0x32, 0x99, 0x71, 0xb7, 0xe8, 0x44, 0x6b, 0x13, 0x5c, 0xad, 0xe9, 0x7b, 0x45, 0x40, 0x6c, 0xcd,
	0xed, 0x92, 0x81, 0xb9, 0x54, 0x7d, 0x80, 0xa4, 0xeb, 0xaa, 0x70, 0xbb, 0x6d, 0x88, 0xc9, 0x6a,
	0x64, 0x9d, 0x9c, 0xdf, 0x3a, 0x59, 0x81, 0x57, 0xfd, 0x45, 0xd3, 0xef, 0x0c, 0x9a, 0xc2, 0xa7,
	0xd5, 0xcd, 0xe7, 0x18, 0x5d, 0x99, 0x8d, 0x66, 0x81, 0xa2, 0x62, 0xab, 0x59, 0x59, 0x5f, 0x92,
	0x85, 0x7d, 0xf3, 0xa4, 0xf1, 0x70, 0xb4, 0x75, 0x80, 0x36, 0xa1, 0xfc, 0x13, 0x6b, 0xce, 0xa0,
	0x53, 0xae, 0xd3, 0x25, 0xbd, 0x91, 0xc7, 0xa1, 0x43, 0xb7, 0x1d, 0xdb, 0x6b, 0xef, 0x07, 0xd3,
	0x8a, 0x83, 0xe8, 0x02, 0x77, 0x44, 0x02, 0x78, 0xa9, 0x26, 0x2e, 0x47, 0x44, 0x77, 0x19, 0x08,
	0xa6, 0xd9, 0xd3, 0x92, 0xd8, 0x55, 0x87, 0x78, 0x43, 0xfd, 0x99, 0x31, 0x7a, 0xf5, 0x37, 0x34,
	0xdf, 0xfc, 0xb2, 0xf1, 0xa5, 0x1c, 0x18, 0x31, 0x4d, 0x65, 0x31, 0xa4, 0x7d, 0xe4, 0x89, 0x7d,
	0x9c, 0xb8, 0xf9, 0x1d, 0x39, 0x05, 0xdb, 0x18, 0xe2, 0x85, 0x68, 0xf5, 0x83, 0x65, 0x17, 0x6b,
	0xd6, 0x48, 0x87, 0x45, 0xd0, 0x19, 0x59, 0x2d, 0x2c, 0x91, 0x34, 0x2f, 0xa9, 0x29, 0x5a, 0xc1,
	0x14, 0x9b, 0x79, 0x95, 0xeb, 0x37, 0x9a, 0x7e, 0xdb, 0x32, 0x8e, 0x31, 0xb0, 0x91, 0xbd, 0x4d,
	0x1a, 0x13, 0xc6, 0xd2, 0xc5, 0x5d, 0x25, 0x6a, 0x75, 0x26, 0x3f, 0x10, 0x86, 0xc8, 0xb3, 0x88,
	0x85, 0xf1, 0x67, 0xc1, 0x4a, 0x55, 0xe3, 0xc7, 0x7f, 0x81, 0xba, 0xae, 0xe9, 0xf2, 0x00, 0x28,
	0x8e, 0x67, 0xb6, 0xc4, 0xd0, 0x64, 0x31, 0x99, 0xab, 0xa0, 0x29, 0x3d, 0xf4, 0x9b, 0x9a, 0x6f,
	0x1e, 0x35, 0x9a, 0xb1, 0x2a, 0xd2, 0x25, 0xd8, 0xb6, 0xf2, 0xc2, 0x36, 0x36, 0x09, 0x87, 0x7c,
	0xce, 0xd8, 0x3e, 0xc8, 0x27, 0xb4, 0xf9, 0xc7, 0x1f, 0x58, 0xbb, 0xaf, 0x47, 0x58, 0x7f, 0xd4,
	0x6e, 0x74, 0xdc, 0x41, 0xd3, 0xde, 0xe8, 0xb2, 0x66, 0xf8, 0xaf, 0x04, 0x3d, 0xec, 0x34, 0x87,
	0xed, 0xc5, 0x9e, 0xdb, 0x4c, 0xff, 0xbb, 0x48, 0xfb, 0x66, 0xfe, 0xbf, 0x02, 0xf7, 0xfd, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x26, 0x17, 0xd9, 0x3c, 0x49, 0x32, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminServiceClient interface {
	CreateTask(ctx context.Context, in *admin.TaskCreateRequest, opts ...grpc.CallOption) (*admin.TaskCreateResponse, error)
	GetTask(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Task, error)
	ListTaskIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	ListTasks(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.TaskList, error)
	CreateWorkflow(ctx context.Context, in *admin.WorkflowCreateRequest, opts ...grpc.CallOption) (*admin.WorkflowCreateResponse, error)
	GetWorkflow(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Workflow, error)
	ListWorkflowIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	ListWorkflows(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.WorkflowList, error)
	CreateLaunchPlan(ctx context.Context, in *admin.LaunchPlanCreateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error)
	GetLaunchPlan(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error)
	GetActiveLaunchPlan(ctx context.Context, in *admin.ActiveLaunchPlanRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error)
	ListActiveLaunchPlans(ctx context.Context, in *admin.ActiveLaunchPlanListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error)
	ListLaunchPlanIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	ListLaunchPlans(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error)
	UpdateLaunchPlan(ctx context.Context, in *admin.LaunchPlanUpdateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error)
	CreateExecution(ctx context.Context, in *admin.ExecutionCreateRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)
	RelaunchExecution(ctx context.Context, in *admin.ExecutionRelaunchRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)
	GetExecution(ctx context.Context, in *admin.WorkflowExecutionGetRequest, opts ...grpc.CallOption) (*admin.Execution, error)
	GetExecutionData(ctx context.Context, in *admin.WorkflowExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error)
	ListExecutions(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.ExecutionList, error)
	TerminateExecution(ctx context.Context, in *admin.ExecutionTerminateRequest, opts ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error)
	GetNodeExecution(ctx context.Context, in *admin.NodeExecutionGetRequest, opts ...grpc.CallOption) (*admin.NodeExecution, error)
	ListNodeExecutions(ctx context.Context, in *admin.NodeExecutionListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error)
	ListNodeExecutionsForTask(ctx context.Context, in *admin.NodeExecutionForTaskListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error)
	GetNodeExecutionData(ctx context.Context, in *admin.NodeExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error)
	RegisterProject(ctx context.Context, in *admin.ProjectRegisterRequest, opts ...grpc.CallOption) (*admin.ProjectRegisterResponse, error)
	UpdateProject(ctx context.Context, in *admin.ProjectUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectUpdateResponse, error)
	ListProjects(ctx context.Context, in *admin.ProjectListRequest, opts ...grpc.CallOption) (*admin.Projects, error)
	CreateWorkflowEvent(ctx context.Context, in *admin.WorkflowExecutionEventRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error)
	CreateNodeEvent(ctx context.Context, in *admin.NodeExecutionEventRequest, opts ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error)
	CreateTaskEvent(ctx context.Context, in *admin.TaskExecutionEventRequest, opts ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error)
	GetTaskExecution(ctx context.Context, in *admin.TaskExecutionGetRequest, opts ...grpc.CallOption) (*admin.TaskExecution, error)
	ListTaskExecutions(ctx context.Context, in *admin.TaskExecutionListRequest, opts ...grpc.CallOption) (*admin.TaskExecutionList, error)
	GetTaskExecutionData(ctx context.Context, in *admin.TaskExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error)
	UpdateProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesUpdateResponse, error)
	GetProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesGetRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesGetResponse, error)
	DeleteProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesDeleteResponse, error)
	UpdateWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesUpdateResponse, error)
	GetWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesGetRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesGetResponse, error)
	DeleteWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesDeleteResponse, error)
	ListMatchableAttributes(ctx context.Context, in *admin.ListMatchableAttributesRequest, opts ...grpc.CallOption) (*admin.ListMatchableAttributesResponse, error)
	ListNamedEntities(ctx context.Context, in *admin.NamedEntityListRequest, opts ...grpc.CallOption) (*admin.NamedEntityList, error)
	GetNamedEntity(ctx context.Context, in *admin.NamedEntityGetRequest, opts ...grpc.CallOption) (*admin.NamedEntity, error)
	UpdateNamedEntity(ctx context.Context, in *admin.NamedEntityUpdateRequest, opts ...grpc.CallOption) (*admin.NamedEntityUpdateResponse, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CreateTask(ctx context.Context, in *admin.TaskCreateRequest, opts ...grpc.CallOption) (*admin.TaskCreateResponse, error) {
	out := new(admin.TaskCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTask(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Task, error) {
	out := new(admin.Task)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTaskIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTaskIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTasks(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.TaskList, error) {
	out := new(admin.TaskList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateWorkflow(ctx context.Context, in *admin.WorkflowCreateRequest, opts ...grpc.CallOption) (*admin.WorkflowCreateResponse, error) {
	out := new(admin.WorkflowCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetWorkflow(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Workflow, error) {
	out := new(admin.Workflow)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListWorkflowIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListWorkflowIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListWorkflows(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.WorkflowList, error) {
	out := new(admin.WorkflowList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateLaunchPlan(ctx context.Context, in *admin.LaunchPlanCreateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error) {
	out := new(admin.LaunchPlanCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLaunchPlan(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error) {
	out := new(admin.LaunchPlan)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetActiveLaunchPlan(ctx context.Context, in *admin.ActiveLaunchPlanRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error) {
	out := new(admin.LaunchPlan)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetActiveLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListActiveLaunchPlans(ctx context.Context, in *admin.ActiveLaunchPlanListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error) {
	out := new(admin.LaunchPlanList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListActiveLaunchPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLaunchPlanIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListLaunchPlanIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLaunchPlans(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error) {
	out := new(admin.LaunchPlanList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListLaunchPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLaunchPlan(ctx context.Context, in *admin.LaunchPlanUpdateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error) {
	out := new(admin.LaunchPlanUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateExecution(ctx context.Context, in *admin.ExecutionCreateRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	out := new(admin.ExecutionCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RelaunchExecution(ctx context.Context, in *admin.ExecutionRelaunchRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	out := new(admin.ExecutionCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/RelaunchExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetExecution(ctx context.Context, in *admin.WorkflowExecutionGetRequest, opts ...grpc.CallOption) (*admin.Execution, error) {
	out := new(admin.Execution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetExecutionData(ctx context.Context, in *admin.WorkflowExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error) {
	out := new(admin.WorkflowExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListExecutions(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.ExecutionList, error) {
	out := new(admin.ExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TerminateExecution(ctx context.Context, in *admin.ExecutionTerminateRequest, opts ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error) {
	out := new(admin.ExecutionTerminateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/TerminateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNodeExecution(ctx context.Context, in *admin.NodeExecutionGetRequest, opts ...grpc.CallOption) (*admin.NodeExecution, error) {
	out := new(admin.NodeExecution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetNodeExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListNodeExecutions(ctx context.Context, in *admin.NodeExecutionListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	out := new(admin.NodeExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListNodeExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListNodeExecutionsForTask(ctx context.Context, in *admin.NodeExecutionForTaskListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	out := new(admin.NodeExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListNodeExecutionsForTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNodeExecutionData(ctx context.Context, in *admin.NodeExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error) {
	out := new(admin.NodeExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetNodeExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegisterProject(ctx context.Context, in *admin.ProjectRegisterRequest, opts ...grpc.CallOption) (*admin.ProjectRegisterResponse, error) {
	out := new(admin.ProjectRegisterResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/RegisterProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProject(ctx context.Context, in *admin.ProjectUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectUpdateResponse, error) {
	out := new(admin.ProjectUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProjects(ctx context.Context, in *admin.ProjectListRequest, opts ...grpc.CallOption) (*admin.Projects, error) {
	out := new(admin.Projects)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateWorkflowEvent(ctx context.Context, in *admin.WorkflowExecutionEventRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error) {
	out := new(admin.WorkflowExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateWorkflowEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateNodeEvent(ctx context.Context, in *admin.NodeExecutionEventRequest, opts ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error) {
	out := new(admin.NodeExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateNodeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateTaskEvent(ctx context.Context, in *admin.TaskExecutionEventRequest, opts ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error) {
	out := new(admin.TaskExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateTaskEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTaskExecution(ctx context.Context, in *admin.TaskExecutionGetRequest, opts ...grpc.CallOption) (*admin.TaskExecution, error) {
	out := new(admin.TaskExecution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTaskExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTaskExecutions(ctx context.Context, in *admin.TaskExecutionListRequest, opts ...grpc.CallOption) (*admin.TaskExecutionList, error) {
	out := new(admin.TaskExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTaskExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTaskExecutionData(ctx context.Context, in *admin.TaskExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error) {
	out := new(admin.TaskExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTaskExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesUpdateResponse, error) {
	out := new(admin.ProjectDomainAttributesUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateProjectDomainAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesGetRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesGetResponse, error) {
	out := new(admin.ProjectDomainAttributesGetResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetProjectDomainAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesDeleteResponse, error) {
	out := new(admin.ProjectDomainAttributesDeleteResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/DeleteProjectDomainAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesUpdateResponse, error) {
	out := new(admin.WorkflowAttributesUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateWorkflowAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesGetRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesGetResponse, error) {
	out := new(admin.WorkflowAttributesGetResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetWorkflowAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesDeleteResponse, error) {
	out := new(admin.WorkflowAttributesDeleteResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/DeleteWorkflowAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListMatchableAttributes(ctx context.Context, in *admin.ListMatchableAttributesRequest, opts ...grpc.CallOption) (*admin.ListMatchableAttributesResponse, error) {
	out := new(admin.ListMatchableAttributesResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListMatchableAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListNamedEntities(ctx context.Context, in *admin.NamedEntityListRequest, opts ...grpc.CallOption) (*admin.NamedEntityList, error) {
	out := new(admin.NamedEntityList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListNamedEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNamedEntity(ctx context.Context, in *admin.NamedEntityGetRequest, opts ...grpc.CallOption) (*admin.NamedEntity, error) {
	out := new(admin.NamedEntity)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetNamedEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateNamedEntity(ctx context.Context, in *admin.NamedEntityUpdateRequest, opts ...grpc.CallOption) (*admin.NamedEntityUpdateResponse, error) {
	out := new(admin.NamedEntityUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateNamedEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
type AdminServiceServer interface {
	CreateTask(context.Context, *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error)
	GetTask(context.Context, *admin.ObjectGetRequest) (*admin.Task, error)
	ListTaskIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	ListTasks(context.Context, *admin.ResourceListRequest) (*admin.TaskList, error)
	CreateWorkflow(context.Context, *admin.WorkflowCreateRequest) (*admin.WorkflowCreateResponse, error)
	GetWorkflow(context.Context, *admin.ObjectGetRequest) (*admin.Workflow, error)
	ListWorkflowIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	ListWorkflows(context.Context, *admin.ResourceListRequest) (*admin.WorkflowList, error)
	CreateLaunchPlan(context.Context, *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error)
	GetLaunchPlan(context.Context, *admin.ObjectGetRequest) (*admin.LaunchPlan, error)
	GetActiveLaunchPlan(context.Context, *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error)
	ListActiveLaunchPlans(context.Context, *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error)
	ListLaunchPlanIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	ListLaunchPlans(context.Context, *admin.ResourceListRequest) (*admin.LaunchPlanList, error)
	UpdateLaunchPlan(context.Context, *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error)
	CreateExecution(context.Context, *admin.ExecutionCreateRequest) (*admin.ExecutionCreateResponse, error)
	RelaunchExecution(context.Context, *admin.ExecutionRelaunchRequest) (*admin.ExecutionCreateResponse, error)
	GetExecution(context.Context, *admin.WorkflowExecutionGetRequest) (*admin.Execution, error)
	GetExecutionData(context.Context, *admin.WorkflowExecutionGetDataRequest) (*admin.WorkflowExecutionGetDataResponse, error)
	ListExecutions(context.Context, *admin.ResourceListRequest) (*admin.ExecutionList, error)
	TerminateExecution(context.Context, *admin.ExecutionTerminateRequest) (*admin.ExecutionTerminateResponse, error)
	GetNodeExecution(context.Context, *admin.NodeExecutionGetRequest) (*admin.NodeExecution, error)
	ListNodeExecutions(context.Context, *admin.NodeExecutionListRequest) (*admin.NodeExecutionList, error)
	ListNodeExecutionsForTask(context.Context, *admin.NodeExecutionForTaskListRequest) (*admin.NodeExecutionList, error)
	GetNodeExecutionData(context.Context, *admin.NodeExecutionGetDataRequest) (*admin.NodeExecutionGetDataResponse, error)
	RegisterProject(context.Context, *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error)
	UpdateProject(context.Context, *admin.ProjectUpdateRequest) (*admin.ProjectUpdateResponse, error)
	ListProjects(context.Context, *admin.ProjectListRequest) (*admin.Projects, error)
	CreateWorkflowEvent(context.Context, *admin.WorkflowExecutionEventRequest) (*admin.WorkflowExecutionEventResponse, error)
	CreateNodeEvent(context.Context, *admin.NodeExecutionEventRequest) (*admin.NodeExecutionEventResponse, error)
	CreateTaskEvent(context.Context, *admin.TaskExecutionEventRequest) (*admin.TaskExecutionEventResponse, error)
	GetTaskExecution(context.Context, *admin.TaskExecutionGetRequest) (*admin.TaskExecution, error)
	ListTaskExecutions(context.Context, *admin.TaskExecutionListRequest) (*admin.TaskExecutionList, error)
	GetTaskExecutionData(context.Context, *admin.TaskExecutionGetDataRequest) (*admin.TaskExecutionGetDataResponse, error)
	UpdateProjectDomainAttributes(context.Context, *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error)
	GetProjectDomainAttributes(context.Context, *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error)
	DeleteProjectDomainAttributes(context.Context, *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error)
	UpdateWorkflowAttributes(context.Context, *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error)
	GetWorkflowAttributes(context.Context, *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error)
	DeleteWorkflowAttributes(context.Context, *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error)
	ListMatchableAttributes(context.Context, *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error)
	ListNamedEntities(context.Context, *admin.NamedEntityListRequest) (*admin.NamedEntityList, error)
	GetNamedEntity(context.Context, *admin.NamedEntityGetRequest) (*admin.NamedEntity, error)
	UpdateNamedEntity(context.Context, *admin.NamedEntityUpdateRequest) (*admin.NamedEntityUpdateResponse, error)
}

// UnimplementedAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (*UnimplementedAdminServiceServer) CreateTask(ctx context.Context, req *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedAdminServiceServer) GetTask(ctx context.Context, req *admin.ObjectGetRequest) (*admin.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedAdminServiceServer) ListTaskIds(ctx context.Context, req *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskIds not implemented")
}
func (*UnimplementedAdminServiceServer) ListTasks(ctx context.Context, req *admin.ResourceListRequest) (*admin.TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (*UnimplementedAdminServiceServer) CreateWorkflow(ctx context.Context, req *admin.WorkflowCreateRequest) (*admin.WorkflowCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (*UnimplementedAdminServiceServer) GetWorkflow(ctx context.Context, req *admin.ObjectGetRequest) (*admin.Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedAdminServiceServer) ListWorkflowIds(ctx context.Context, req *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowIds not implemented")
}
func (*UnimplementedAdminServiceServer) ListWorkflows(ctx context.Context, req *admin.ResourceListRequest) (*admin.WorkflowList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedAdminServiceServer) CreateLaunchPlan(ctx context.Context, req *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLaunchPlan not implemented")
}
func (*UnimplementedAdminServiceServer) GetLaunchPlan(ctx context.Context, req *admin.ObjectGetRequest) (*admin.LaunchPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLaunchPlan not implemented")
}
func (*UnimplementedAdminServiceServer) GetActiveLaunchPlan(ctx context.Context, req *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveLaunchPlan not implemented")
}
func (*UnimplementedAdminServiceServer) ListActiveLaunchPlans(ctx context.Context, req *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveLaunchPlans not implemented")
}
func (*UnimplementedAdminServiceServer) ListLaunchPlanIds(ctx context.Context, req *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLaunchPlanIds not implemented")
}
func (*UnimplementedAdminServiceServer) ListLaunchPlans(ctx context.Context, req *admin.ResourceListRequest) (*admin.LaunchPlanList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLaunchPlans not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateLaunchPlan(ctx context.Context, req *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLaunchPlan not implemented")
}
func (*UnimplementedAdminServiceServer) CreateExecution(ctx context.Context, req *admin.ExecutionCreateRequest) (*admin.ExecutionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExecution not implemented")
}
func (*UnimplementedAdminServiceServer) RelaunchExecution(ctx context.Context, req *admin.ExecutionRelaunchRequest) (*admin.ExecutionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelaunchExecution not implemented")
}
func (*UnimplementedAdminServiceServer) GetExecution(ctx context.Context, req *admin.WorkflowExecutionGetRequest) (*admin.Execution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecution not implemented")
}
func (*UnimplementedAdminServiceServer) GetExecutionData(ctx context.Context, req *admin.WorkflowExecutionGetDataRequest) (*admin.WorkflowExecutionGetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionData not implemented")
}
func (*UnimplementedAdminServiceServer) ListExecutions(ctx context.Context, req *admin.ResourceListRequest) (*admin.ExecutionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutions not implemented")
}
func (*UnimplementedAdminServiceServer) TerminateExecution(ctx context.Context, req *admin.ExecutionTerminateRequest) (*admin.ExecutionTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateExecution not implemented")
}
func (*UnimplementedAdminServiceServer) GetNodeExecution(ctx context.Context, req *admin.NodeExecutionGetRequest) (*admin.NodeExecution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeExecution not implemented")
}
func (*UnimplementedAdminServiceServer) ListNodeExecutions(ctx context.Context, req *admin.NodeExecutionListRequest) (*admin.NodeExecutionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeExecutions not implemented")
}
func (*UnimplementedAdminServiceServer) ListNodeExecutionsForTask(ctx context.Context, req *admin.NodeExecutionForTaskListRequest) (*admin.NodeExecutionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeExecutionsForTask not implemented")
}
func (*UnimplementedAdminServiceServer) GetNodeExecutionData(ctx context.Context, req *admin.NodeExecutionGetDataRequest) (*admin.NodeExecutionGetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeExecutionData not implemented")
}
func (*UnimplementedAdminServiceServer) RegisterProject(ctx context.Context, req *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProject not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateProject(ctx context.Context, req *admin.ProjectUpdateRequest) (*admin.ProjectUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedAdminServiceServer) ListProjects(ctx context.Context, req *admin.ProjectListRequest) (*admin.Projects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedAdminServiceServer) CreateWorkflowEvent(ctx context.Context, req *admin.WorkflowExecutionEventRequest) (*admin.WorkflowExecutionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflowEvent not implemented")
}
func (*UnimplementedAdminServiceServer) CreateNodeEvent(ctx context.Context, req *admin.NodeExecutionEventRequest) (*admin.NodeExecutionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeEvent not implemented")
}
func (*UnimplementedAdminServiceServer) CreateTaskEvent(ctx context.Context, req *admin.TaskExecutionEventRequest) (*admin.TaskExecutionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskEvent not implemented")
}
func (*UnimplementedAdminServiceServer) GetTaskExecution(ctx context.Context, req *admin.TaskExecutionGetRequest) (*admin.TaskExecution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExecution not implemented")
}
func (*UnimplementedAdminServiceServer) ListTaskExecutions(ctx context.Context, req *admin.TaskExecutionListRequest) (*admin.TaskExecutionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskExecutions not implemented")
}
func (*UnimplementedAdminServiceServer) GetTaskExecutionData(ctx context.Context, req *admin.TaskExecutionGetDataRequest) (*admin.TaskExecutionGetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExecutionData not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateProjectDomainAttributes(ctx context.Context, req *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectDomainAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) GetProjectDomainAttributes(ctx context.Context, req *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDomainAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) DeleteProjectDomainAttributes(ctx context.Context, req *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectDomainAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateWorkflowAttributes(ctx context.Context, req *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) GetWorkflowAttributes(ctx context.Context, req *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) DeleteWorkflowAttributes(ctx context.Context, req *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) ListMatchableAttributes(ctx context.Context, req *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatchableAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) ListNamedEntities(ctx context.Context, req *admin.NamedEntityListRequest) (*admin.NamedEntityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamedEntities not implemented")
}
func (*UnimplementedAdminServiceServer) GetNamedEntity(ctx context.Context, req *admin.NamedEntityGetRequest) (*admin.NamedEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedEntity not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateNamedEntity(ctx context.Context, req *admin.NamedEntityUpdateRequest) (*admin.NamedEntityUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamedEntity not implemented")
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTask(ctx, req.(*admin.TaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTask(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTaskIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTaskIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTaskIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTaskIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTasks(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateWorkflow(ctx, req.(*admin.WorkflowCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetWorkflow(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListWorkflowIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListWorkflowIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListWorkflowIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListWorkflowIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListWorkflows(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.LaunchPlanCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateLaunchPlan(ctx, req.(*admin.LaunchPlanCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLaunchPlan(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetActiveLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ActiveLaunchPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetActiveLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetActiveLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetActiveLaunchPlan(ctx, req.(*admin.ActiveLaunchPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListActiveLaunchPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ActiveLaunchPlanListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListActiveLaunchPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListActiveLaunchPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListActiveLaunchPlans(ctx, req.(*admin.ActiveLaunchPlanListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLaunchPlanIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLaunchPlanIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListLaunchPlanIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLaunchPlanIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLaunchPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLaunchPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListLaunchPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLaunchPlans(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.LaunchPlanUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLaunchPlan(ctx, req.(*admin.LaunchPlanUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateExecution(ctx, req.(*admin.ExecutionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RelaunchExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionRelaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RelaunchExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/RelaunchExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RelaunchExecution(ctx, req.(*admin.ExecutionRelaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetExecution(ctx, req.(*admin.WorkflowExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetExecutionData(ctx, req.(*admin.WorkflowExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListExecutions(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TerminateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TerminateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/TerminateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TerminateExecution(ctx, req.(*admin.ExecutionTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNodeExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNodeExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetNodeExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNodeExecution(ctx, req.(*admin.NodeExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListNodeExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListNodeExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListNodeExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListNodeExecutions(ctx, req.(*admin.NodeExecutionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListNodeExecutionsForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionForTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListNodeExecutionsForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListNodeExecutionsForTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListNodeExecutionsForTask(ctx, req.(*admin.NodeExecutionForTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNodeExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNodeExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetNodeExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNodeExecutionData(ctx, req.(*admin.NodeExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegisterProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegisterProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/RegisterProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegisterProject(ctx, req.(*admin.ProjectRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProject(ctx, req.(*admin.ProjectUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProjects(ctx, req.(*admin.ProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateWorkflowEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateWorkflowEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateWorkflowEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateWorkflowEvent(ctx, req.(*admin.WorkflowExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateNodeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateNodeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateNodeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateNodeEvent(ctx, req.(*admin.NodeExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTaskEvent(ctx, req.(*admin.TaskExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTaskExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTaskExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTaskExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTaskExecution(ctx, req.(*admin.TaskExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTaskExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTaskExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTaskExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTaskExecutions(ctx, req.(*admin.TaskExecutionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTaskExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTaskExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTaskExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTaskExecutionData(ctx, req.(*admin.TaskExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProjectDomainAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectDomainAttributesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProjectDomainAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateProjectDomainAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProjectDomainAttributes(ctx, req.(*admin.ProjectDomainAttributesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProjectDomainAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectDomainAttributesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProjectDomainAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetProjectDomainAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProjectDomainAttributes(ctx, req.(*admin.ProjectDomainAttributesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteProjectDomainAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectDomainAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteProjectDomainAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/DeleteProjectDomainAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteProjectDomainAttributes(ctx, req.(*admin.ProjectDomainAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateWorkflowAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowAttributesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateWorkflowAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateWorkflowAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateWorkflowAttributes(ctx, req.(*admin.WorkflowAttributesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetWorkflowAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowAttributesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetWorkflowAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetWorkflowAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetWorkflowAttributes(ctx, req.(*admin.WorkflowAttributesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteWorkflowAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteWorkflowAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/DeleteWorkflowAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteWorkflowAttributes(ctx, req.(*admin.WorkflowAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListMatchableAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ListMatchableAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListMatchableAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListMatchableAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListMatchableAttributes(ctx, req.(*admin.ListMatchableAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListNamedEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListNamedEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListNamedEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListNamedEntities(ctx, req.(*admin.NamedEntityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNamedEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNamedEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetNamedEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNamedEntity(ctx, req.(*admin.NamedEntityGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateNamedEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateNamedEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateNamedEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateNamedEntity(ctx, req.(*admin.NamedEntityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.service.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _AdminService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _AdminService_GetTask_Handler,
		},
		{
			MethodName: "ListTaskIds",
			Handler:    _AdminService_ListTaskIds_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _AdminService_ListTasks_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _AdminService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _AdminService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflowIds",
			Handler:    _AdminService_ListWorkflowIds_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _AdminService_ListWorkflows_Handler,
		},
		{
			MethodName: "CreateLaunchPlan",
			Handler:    _AdminService_CreateLaunchPlan_Handler,
		},
		{
			MethodName: "GetLaunchPlan",
			Handler:    _AdminService_GetLaunchPlan_Handler,
		},
		{
			MethodName: "GetActiveLaunchPlan",
			Handler:    _AdminService_GetActiveLaunchPlan_Handler,
		},
		{
			MethodName: "ListActiveLaunchPlans",
			Handler:    _AdminService_ListActiveLaunchPlans_Handler,
		},
		{
			MethodName: "ListLaunchPlanIds",
			Handler:    _AdminService_ListLaunchPlanIds_Handler,
		},
		{
			MethodName: "ListLaunchPlans",
			Handler:    _AdminService_ListLaunchPlans_Handler,
		},
		{
			MethodName: "UpdateLaunchPlan",
			Handler:    _AdminService_UpdateLaunchPlan_Handler,
		},
		{
			MethodName: "CreateExecution",
			Handler:    _AdminService_CreateExecution_Handler,
		},
		{
			MethodName: "RelaunchExecution",
			Handler:    _AdminService_RelaunchExecution_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _AdminService_GetExecution_Handler,
		},
		{
			MethodName: "GetExecutionData",
			Handler:    _AdminService_GetExecutionData_Handler,
		},
		{
			MethodName: "ListExecutions",
			Handler:    _AdminService_ListExecutions_Handler,
		},
		{
			MethodName: "TerminateExecution",
			Handler:    _AdminService_TerminateExecution_Handler,
		},
		{
			MethodName: "GetNodeExecution",
			Handler:    _AdminService_GetNodeExecution_Handler,
		},
		{
			MethodName: "ListNodeExecutions",
			Handler:    _AdminService_ListNodeExecutions_Handler,
		},
		{
			MethodName: "ListNodeExecutionsForTask",
			Handler:    _AdminService_ListNodeExecutionsForTask_Handler,
		},
		{
			MethodName: "GetNodeExecutionData",
			Handler:    _AdminService_GetNodeExecutionData_Handler,
		},
		{
			MethodName: "RegisterProject",
			Handler:    _AdminService_RegisterProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _AdminService_UpdateProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _AdminService_ListProjects_Handler,
		},
		{
			MethodName: "CreateWorkflowEvent",
			Handler:    _AdminService_CreateWorkflowEvent_Handler,
		},
		{
			MethodName: "CreateNodeEvent",
			Handler:    _AdminService_CreateNodeEvent_Handler,
		},
		{
			MethodName: "CreateTaskEvent",
			Handler:    _AdminService_CreateTaskEvent_Handler,
		},
		{
			MethodName: "GetTaskExecution",
			Handler:    _AdminService_GetTaskExecution_Handler,
		},
		{
			MethodName: "ListTaskExecutions",
			Handler:    _AdminService_ListTaskExecutions_Handler,
		},
		{
			MethodName: "GetTaskExecutionData",
			Handler:    _AdminService_GetTaskExecutionData_Handler,
		},
		{
			MethodName: "UpdateProjectDomainAttributes",
			Handler:    _AdminService_UpdateProjectDomainAttributes_Handler,
		},
		{
			MethodName: "GetProjectDomainAttributes",
			Handler:    _AdminService_GetProjectDomainAttributes_Handler,
		},
		{
			MethodName: "DeleteProjectDomainAttributes",
			Handler:    _AdminService_DeleteProjectDomainAttributes_Handler,
		},
		{
			MethodName: "UpdateWorkflowAttributes",
			Handler:    _AdminService_UpdateWorkflowAttributes_Handler,
		},
		{
			MethodName: "GetWorkflowAttributes",
			Handler:    _AdminService_GetWorkflowAttributes_Handler,
		},
		{
			MethodName: "DeleteWorkflowAttributes",
			Handler:    _AdminService_DeleteWorkflowAttributes_Handler,
		},
		{
			MethodName: "ListMatchableAttributes",
			Handler:    _AdminService_ListMatchableAttributes_Handler,
		},
		{
			MethodName: "ListNamedEntities",
			Handler:    _AdminService_ListNamedEntities_Handler,
		},
		{
			MethodName: "GetNamedEntity",
			Handler:    _AdminService_GetNamedEntity_Handler,
		},
		{
			MethodName: "UpdateNamedEntity",
			Handler:    _AdminService_UpdateNamedEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl/service/admin.proto",
}
