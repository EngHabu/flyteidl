{
  "swagger": "2.0",
  "info": {
    "title": "flyteidl/service/admin.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/events/nodes": {
      "post": {
        "operationId": "CreateNodeEvent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminNodeExecutionEventResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminNodeExecutionEventRequest"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/events/tasks": {
      "post": {
        "operationId": "CreateTaskEvent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminTaskExecutionEventResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminTaskExecutionEventRequest"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/events/workflows": {
      "post": {
        "operationId": "CreateWorkflowEvent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminWorkflowExecutionEventResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminWorkflowExecutionEventRequest"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/executions": {
      "get": {
        "operationId": "ListExecutions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminExecutionList"
            }
          }
        },
        "parameters": [
          {
            "name": "id.project",
            "description": "Name of the project the resource belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id.name",
            "description": "User provided value for the resource.\nThe combination of project + domain + name uniquely identifies the resource.\n+optional - in certain contexts - like 'List API', 'Launch plans'.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filters",
            "description": "Indicates a list of filters passed as string.\nMore info on constructing filters : \u003cLink\u003e\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      },
      "post": {
        "operationId": "CreateExecution",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminExecutionCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminExecutionCreateRequest"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/executions/{urn}": {
      "get": {
        "operationId": "GetExecution",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminExecution"
            }
          }
        },
        "parameters": [
          {
            "name": "urn",
            "description": "Indicates the string returned by the server that identifies a version of resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/launch_plans": {
      "post": {
        "operationId": "CreateLaunchPlan",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminLaunchPlanCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminLaunchPlanCreateRequest"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/launch_plans/{urn}": {
      "get": {
        "operationId": "GetLaunchPlan",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminLaunchPlan"
            }
          }
        },
        "parameters": [
          {
            "name": "urn",
            "description": "Indicates the string returned by the server that identifies a version of resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      },
      "put": {
        "operationId": "UpdateLaunchPlan",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminLaunchPlanUpdateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "urn",
            "description": "Urn of launch plan for which to change state.t",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminLaunchPlanUpdateRequest"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/node_executions": {
      "get": {
        "operationId": "ListNodeExecutions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminNodeExecutionList"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filters",
            "description": "Indicates a list of filters passed as string.\nMore info on constructing filters : \u003cLink\u003e\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/node_executions/{node_execution_id}": {
      "get": {
        "operationId": "GetNodeExecution",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminNodeExecution"
            }
          }
        },
        "parameters": [
          {
            "name": "node_execution_id",
            "description": "An opaque string assigned by the flyteadmin that uniquely identifies an individual node execution.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{id.project}/domain/{id.domain}/launch_plans": {
      "get": {
        "operationId": "ListLaunchPlans",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminLaunchPlanList"
            }
          }
        },
        "parameters": [
          {
            "name": "id.project",
            "description": "Name of the project the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.name",
            "description": "User provided value for the resource.\nThe combination of project + domain + name uniquely identifies the resource.\n+optional - in certain contexts - like 'List API', 'Launch plans'.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filters",
            "description": "Indicates a list of filters passed as string.\nMore info on constructing filters : \u003cLink\u003e\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{id.project}/domain/{id.domain}/launch_plans/{id.name}": {
      "get": {
        "operationId": "ListLaunchPlans2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminLaunchPlanList"
            }
          }
        },
        "parameters": [
          {
            "name": "id.project",
            "description": "Name of the project the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.name",
            "description": "User provided value for the resource.\nThe combination of project + domain + name uniquely identifies the resource.\n+optional - in certain contexts - like 'List API', 'Launch plans'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filters",
            "description": "Indicates a list of filters passed as string.\nMore info on constructing filters : \u003cLink\u003e\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{id.project}/domain/{id.domain}/tasks": {
      "get": {
        "operationId": "ListTasks",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminTaskList"
            }
          }
        },
        "parameters": [
          {
            "name": "id.project",
            "description": "Name of the project the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.name",
            "description": "User provided value for the resource.\nThe combination of project + domain + name uniquely identifies the resource.\n+optional - in certain contexts - like 'List API', 'Launch plans'.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filters",
            "description": "Indicates a list of filters passed as string.\nMore info on constructing filters : \u003cLink\u003e\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{id.project}/domain/{id.domain}/tasks/{id.name}": {
      "get": {
        "operationId": "ListTasks2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminTaskList"
            }
          }
        },
        "parameters": [
          {
            "name": "id.project",
            "description": "Name of the project the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.name",
            "description": "User provided value for the resource.\nThe combination of project + domain + name uniquely identifies the resource.\n+optional - in certain contexts - like 'List API', 'Launch plans'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filters",
            "description": "Indicates a list of filters passed as string.\nMore info on constructing filters : \u003cLink\u003e\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{id.project}/domain/{id.domain}/workflows": {
      "get": {
        "operationId": "ListWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminWorkflowList"
            }
          }
        },
        "parameters": [
          {
            "name": "id.project",
            "description": "Name of the project the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.name",
            "description": "User provided value for the resource.\nThe combination of project + domain + name uniquely identifies the resource.\n+optional - in certain contexts - like 'List API', 'Launch plans'.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filters",
            "description": "Indicates a list of filters passed as string.\nMore info on constructing filters : \u003cLink\u003e\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{id.project}/domain/{id.domain}/workflows/{id.name}": {
      "get": {
        "operationId": "ListWorkflows2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminWorkflowList"
            }
          }
        },
        "parameters": [
          {
            "name": "id.project",
            "description": "Name of the project the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.name",
            "description": "User provided value for the resource.\nThe combination of project + domain + name uniquely identifies the resource.\n+optional - in certain contexts - like 'List API', 'Launch plans'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filters",
            "description": "Indicates a list of filters passed as string.\nMore info on constructing filters : \u003cLink\u003e\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{project}/domain/{domain}/launch_plan_ids": {
      "get": {
        "operationId": "ListLaunchPlanIds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminIdentifierList"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "description": "Name of the project that contains the identifiers.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "description": "Name of the domain the identifiers belongs to within the project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{project}/domain/{domain}/task_ids": {
      "get": {
        "operationId": "ListTaskIds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminIdentifierList"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "description": "Name of the project that contains the identifiers.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "description": "Name of the domain the identifiers belongs to within the project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/project/{project}/domain/{domain}/workflow_ids": {
      "get": {
        "operationId": "ListWorkflowIds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminIdentifierList"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "description": "Name of the project that contains the identifiers.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "description": "Name of the domain the identifiers belongs to within the project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Indicates the number of resources to be returned.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Indicates the offset to fetch the resource from.\nIt is the responsibility of the user to pass add value of limit to offset to fetch the next set of results.\n+optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/projects": {
      "get": {
        "operationId": "ListProjects",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminProjects"
            }
          }
        },
        "tags": [
          "AdminService"
        ]
      },
      "post": {
        "description": "Register a project along with valid domains",
        "operationId": "RegisterProject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminProjectRegisterResponse"
            }
          },
          "201": {
            "description": "Returned for successful registration.",
            "schema": {}
          },
          "400": {
            "description": "Returned for bad request that may have failed validation.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminProject"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/tasks": {
      "post": {
        "operationId": "CreateTask",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminTaskCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminTaskCreateRequest"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/tasks/{urn}": {
      "get": {
        "operationId": "GetTask",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminTask"
            }
          }
        },
        "parameters": [
          {
            "name": "urn",
            "description": "Indicates the string returned by the server that identifies a version of resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/workflows": {
      "post": {
        "operationId": "CreateWorkflow",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminWorkflowCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminWorkflowCreateRequest"
            }
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    },
    "/api/v1/workflows/{urn}": {
      "get": {
        "operationId": "GetWorkflow",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/adminWorkflow"
            }
          }
        },
        "parameters": [
          {
            "name": "urn",
            "description": "Indicates the string returned by the server that identifies a version of resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AdminService"
        ]
      }
    }
  },
  "definitions": {
    "BlobMetadataBlobType": {
      "type": "string",
      "enum": [
        "Single",
        "Multipart"
      ],
      "default": "Single"
    },
    "ComparisonExpressionOperator": {
      "type": "string",
      "enum": [
        "EQ",
        "NEQ",
        "GT",
        "GTE",
        "LT",
        "LTE"
      ],
      "default": "EQ",
      "description": "- GT: Greater Than\n - LT: Less Than",
      "title": "Binary Operator for each expression"
    },
    "ConjunctionExpressionLogicalOperator": {
      "type": "string",
      "enum": [
        "AND",
        "OR"
      ],
      "default": "AND",
      "description": "- AND: Conjunction",
      "title": "Nested conditions. They can be conjoined using AND / OR\nOrder of evaluation is not important as the operators are Commutative"
    },
    "ConnectionSetIdList": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExecutionMetadataExecutionMode": {
      "type": "string",
      "enum": [
        "MANUAL",
        "SCHEDULED",
        "SYSTEM"
      ],
      "default": "MANUAL"
    },
    "ResourcesResourceEntry": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ResourcesResourceName",
          "description": "Resource name."
        },
        "value": {
          "type": "string",
          "description": "Value must be a valid k8s quantity."
        }
      },
      "description": "Encapsulates a resource name and value."
    },
    "ResourcesResourceName": {
      "type": "string",
      "enum": [
        "Unknown",
        "Cpu",
        "Gpu",
        "Memory",
        "Storage"
      ],
      "default": "Unknown",
      "description": "Known resource names."
    },
    "RuntimeMetadataRuntimeType": {
      "type": "string",
      "enum": [
        "Other",
        "FlyteSDK"
      ],
      "default": "Other"
    },
    "SchemaColumnSchemaColumnType": {
      "type": "string",
      "enum": [
        "INTEGER",
        "FLOAT",
        "STRING",
        "DATETIME",
        "DURATION",
        "BOOLEAN"
      ],
      "default": "INTEGER"
    },
    "SchemaTypeSchemaColumn": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "A unique name -within the schema type- for the column"
        },
        "type": {
          "$ref": "#/definitions/SchemaColumnSchemaColumnType",
          "description": "The column type. This allows a limited set of types currently."
        }
      }
    },
    "adminDomain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Display name."
        }
      }
    },
    "adminEmailNotification": {
      "type": "object",
      "properties": {
        "recipients_email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of email addresses recipients for this notification."
        }
      }
    },
    "adminExecution": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminIdentifier"
        },
        "execution_id": {
          "type": "string",
          "title": "The execution_id string is contructed from the 'id'.\nIf name is not available in the 'id', the system will generate a random name"
        },
        "spec": {
          "$ref": "#/definitions/adminExecutionSpec"
        },
        "closure": {
          "$ref": "#/definitions/adminExecutionClosure"
        }
      }
    },
    "adminExecutionClosure": {
      "type": "object",
      "properties": {
        "outputs": {
          "$ref": "#/definitions/adminLiteralMapBlob"
        },
        "error": {
          "$ref": "#/definitions/coreExecutionError",
          "title": "Error information for the Node"
        },
        "computed_inputs": {
          "$ref": "#/definitions/coreLiteralMap",
          "title": "Inputs computed and passed for execution.\ncomputed_inputs depends on inputs in ExecutionSpec, fixed and default inputs in launch plan"
        },
        "phase": {
          "$ref": "#/definitions/coreWorkflowExecutionPhase",
          "title": "Phase of the executions"
        },
        "started_at": {
          "type": "string",
          "format": "date-time",
          "description": "Time at which the execution began running."
        },
        "duration": {
          "type": "string",
          "description": "The amount of time the execution spent running."
        }
      },
      "title": "Encapsultes the results of the Execution"
    },
    "adminExecutionCreateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminIdentifier"
        },
        "spec": {
          "$ref": "#/definitions/adminExecutionSpec"
        }
      }
    },
    "adminExecutionCreateResponse": {
      "type": "object",
      "properties": {
        "urn": {
          "type": "string"
        }
      }
    },
    "adminExecutionList": {
      "type": "object",
      "properties": {
        "executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminExecution"
          }
        }
      }
    },
    "adminExecutionMetadata": {
      "type": "object",
      "properties": {
        "mode": {
          "$ref": "#/definitions/ExecutionMetadataExecutionMode"
        },
        "principal": {
          "type": "string",
          "description": "Identifier of the entity that triggered this execution."
        },
        "nesting": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates the \"nestedness\" of this execution.\nIf a user launches a workflow execution, the default nesting is 0.\nIf this execution further launches a workflow (child workflow), the nesting level is incremented by 0 =\u003e 1\nGenerally, if workflow at nesting level k launches a workflow then the child workflow will have\nnesting = k + 1."
        }
      }
    },
    "adminExecutionSpec": {
      "type": "object",
      "properties": {
        "launch_plan_urn": {
          "type": "string",
          "title": "Launch plan urn to be executed"
        },
        "inputs": {
          "$ref": "#/definitions/coreLiteralMap",
          "title": "Input values to be passed for the execution"
        },
        "metadata": {
          "$ref": "#/definitions/adminExecutionMetadata",
          "title": "Metadata for the execution"
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminNotification"
          },
          "title": "List of notifications based on Execution status transitions"
        }
      }
    },
    "adminFixedRate": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int64"
        },
        "unit": {
          "$ref": "#/definitions/adminFixedRateUnit"
        }
      }
    },
    "adminFixedRateUnit": {
      "type": "string",
      "enum": [
        "MINUTE",
        "HOUR",
        "DAY"
      ],
      "default": "MINUTE"
    },
    "adminIdentifier": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "description": "Name of the project the resource belongs to."
        },
        "domain": {
          "type": "string",
          "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project."
        },
        "name": {
          "type": "string",
          "title": "User provided value for the resource.\nThe combination of project + domain + name uniquely identifies the resource.\n+optional - in certain contexts - like 'List API', 'Launch plans'"
        }
      },
      "description": "Encapsulation of fields that identifies a Flyte resource.\nA resource can internally have multiple versions."
    },
    "adminIdentifierList": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminIdentifier"
          },
          "description": "A list of identifiers."
        }
      },
      "description": "Represents a list of Identifiers."
    },
    "adminLaunchPlan": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminIdentifier"
        },
        "version": {
          "type": "string"
        },
        "urn": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/adminLaunchPlanSpec"
        },
        "closure": {
          "$ref": "#/definitions/adminLaunchPlanClosure"
        }
      }
    },
    "adminLaunchPlanClosure": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/adminLaunchPlanState",
          "title": "Indicate the Launch plan phase"
        },
        "expected_inputs": {
          "$ref": "#/definitions/coreParameterMap",
          "title": "Indicates the set of inputs to execute the Launch plan"
        },
        "expected_outputs": {
          "$ref": "#/definitions/coreVariableMap",
          "title": "Indicates the set of outputs from the Launch plan"
        }
      }
    },
    "adminLaunchPlanCreateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminIdentifier"
        },
        "version": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/adminLaunchPlanSpec"
        }
      }
    },
    "adminLaunchPlanCreateResponse": {
      "type": "object",
      "properties": {
        "urn": {
          "type": "string"
        }
      }
    },
    "adminLaunchPlanList": {
      "type": "object",
      "properties": {
        "launch_plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminLaunchPlan"
          }
        }
      }
    },
    "adminLaunchPlanMetadata": {
      "type": "object",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/adminSchedule",
          "title": "Schedule to execute the Launch Plan"
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminNotification"
          },
          "title": "List of notifications based on Execution status transitions"
        }
      }
    },
    "adminLaunchPlanSpec": {
      "type": "object",
      "properties": {
        "workflow_urn": {
          "type": "string",
          "title": "Reference to the Workflow template that the launch plan references"
        },
        "entity_metadata": {
          "$ref": "#/definitions/adminLaunchPlanMetadata",
          "title": "Metadata for the Launch Plan"
        },
        "default_inputs": {
          "$ref": "#/definitions/coreParameterMap",
          "title": "Input values to be passed for the execution"
        },
        "fixed_inputs": {
          "$ref": "#/definitions/coreLiteralMap",
          "title": "Fixed, non-overridable inputs for the Launch Plan"
        },
        "role": {
          "type": "string",
          "title": "String to indicate the role to use to execute the workflow underneath"
        }
      }
    },
    "adminLaunchPlanState": {
      "type": "string",
      "enum": [
        "INACTIVE",
        "ACTIVE"
      ],
      "default": "INACTIVE",
      "title": "Indicates various states of an Execution - both task and workflow"
    },
    "adminLaunchPlanUpdateRequest": {
      "type": "object",
      "properties": {
        "urn": {
          "type": "string",
          "title": "Urn of launch plan for which to change state.t"
        },
        "state": {
          "$ref": "#/definitions/adminLaunchPlanState",
          "description": "Desired state to apply to the launch plan."
        }
      }
    },
    "adminLaunchPlanUpdateResponse": {
      "type": "object",
      "description": "Purposefully empty, may be populated in the future."
    },
    "adminLiteralMapBlob": {
      "type": "object",
      "properties": {
        "values": {
          "$ref": "#/definitions/coreLiteralMap",
          "title": "Data in LiteralMap format"
        },
        "uri": {
          "type": "string",
          "title": "In the event that the map is too large, we return a uri to the data"
        }
      },
      "title": "Input/output data can represented by actual values or a link to where it is stored"
    },
    "adminNodeExecution": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminNodeExecutionIdentifier"
        },
        "node_execution_id": {
          "type": "string",
          "description": "A unique string that identifies a node execution entity."
        },
        "input_uri": {
          "type": "string"
        },
        "closure": {
          "$ref": "#/definitions/adminNodeExecutionClosure"
        }
      },
      "description": "Encapsulates all details for a single node execution entity."
    },
    "adminNodeExecutionClosure": {
      "type": "object",
      "properties": {
        "output_uri": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/coreExecutionError",
          "title": "Error information for the Node"
        },
        "phase": {
          "$ref": "#/definitions/coreNodeExecutionPhase"
        },
        "started_at": {
          "type": "string",
          "format": "date-time",
          "description": "Time at which the execution began running."
        },
        "duration": {
          "type": "string",
          "description": "The amount of time the execution spent running."
        }
      },
      "description": "Container for node execution details and results."
    },
    "adminNodeExecutionEventRequest": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "title": "Unique ID for this request that can be traced between services"
        },
        "event": {
          "$ref": "#/definitions/eventNodeExecutionEvent"
        }
      }
    },
    "adminNodeExecutionEventResponse": {
      "type": "object"
    },
    "adminNodeExecutionIdentifier": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string"
        },
        "execution_id": {
          "type": "integer",
          "format": "int64"
        },
        "retry_attempt": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "Encapsulation of fields that identify a Flyte node execution entity."
    },
    "adminNodeExecutionList": {
      "type": "object",
      "properties": {
        "node_executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminNodeExecution"
          }
        }
      },
      "description": "Request structure to retrieve a list of node execution entities."
    },
    "adminNotification": {
      "type": "object",
      "properties": {
        "phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreWorkflowExecutionPhase"
          },
          "description": "A list of phases to which users can associate the notifications to."
        },
        "email": {
          "$ref": "#/definitions/adminEmailNotification"
        },
        "pager_duty": {
          "$ref": "#/definitions/adminPagerDutyNotification"
        },
        "slack": {
          "$ref": "#/definitions/adminSlackNotification"
        }
      },
      "description": "Represents a structure for notifications based on execution status.\nThe Notification content is configured within Admin. Future iterations could\nexpose configuring notifications with custom content."
    },
    "adminPagerDutyNotification": {
      "type": "object",
      "properties": {
        "recipients_email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Currently, PagerDuty notifications leverage email to trigger a notification."
        }
      }
    },
    "adminProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Display name."
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminDomain"
          }
        }
      }
    },
    "adminProjectRegisterResponse": {
      "type": "object"
    },
    "adminProjects": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminProject"
          }
        }
      }
    },
    "adminSchedule": {
      "type": "object",
      "properties": {
        "cron_expression": {
          "type": "string"
        },
        "rate": {
          "$ref": "#/definitions/adminFixedRate"
        },
        "kickoff_time_input_arg": {
          "type": "string",
          "description": "Name of the input variable that the kickoff time will be supplied to when the workflow is kicked off."
        }
      }
    },
    "adminSlackNotification": {
      "type": "object",
      "properties": {
        "recipients_email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Currently, Slack notifications leverage email to trigger a notification."
        }
      }
    },
    "adminTask": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminIdentifier",
          "description": "id represents the unique identifier of the task."
        },
        "version": {
          "type": "string",
          "description": "Indicates a particular of version of the task.\nA task uniquely referenced by id can have multiple versions."
        },
        "urn": {
          "type": "string",
          "description": "Represents the string that uniquely identifies a revision of a task.\nIdentifier and version together also uniquely identifies a task revision."
        },
        "closure": {
          "$ref": "#/definitions/adminTaskClosure",
          "description": "closure encapsulates all the fields that maps to a compiled version of the task."
        }
      },
      "title": "Represents the task structure stored in the Admin"
    },
    "adminTaskClosure": {
      "type": "object",
      "properties": {
        "compiled_task": {
          "$ref": "#/definitions/coreCompiledTask",
          "description": "Represents the compiled representation of the task from the specification provided."
        }
      },
      "description": "Represents an encapsulation of the task compilation."
    },
    "adminTaskCreateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminIdentifier",
          "description": "id represents the unique identifier of the task."
        },
        "version": {
          "type": "string",
          "description": "Indicates a particular of version of the task.\nA task uniquely referenced by id can have multiple versions."
        },
        "spec": {
          "$ref": "#/definitions/adminTaskSpec",
          "description": "Represents the specification for task."
        }
      },
      "description": "Represents a request structure to create a revision of a task."
    },
    "adminTaskCreateResponse": {
      "type": "object",
      "properties": {
        "urn": {
          "type": "string",
          "description": "Represents the string that uniquely identifies a revision of a task.\nIdentifier and version together also uniquely identifies a task revision."
        }
      },
      "description": "Represents a response structure if task creation succeeds."
    },
    "adminTaskExecutionEventRequest": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "title": "Unique ID for this request that can be traced between services"
        },
        "event": {
          "$ref": "#/definitions/eventTaskExecutionEvent"
        }
      }
    },
    "adminTaskExecutionEventResponse": {
      "type": "object"
    },
    "adminTaskList": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminTask"
          },
          "description": "A list of tasks returned based on the request."
        }
      },
      "description": "Represents a list of tasks returned from the admin."
    },
    "adminTaskSpec": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/coreTaskTemplate",
          "description": "Template of the task that encapsulates all the metadata of the task."
        }
      },
      "description": "Represents a structure that encapsulates the specification of the task."
    },
    "adminWorkflow": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminIdentifier",
          "description": "id represents the unique identifier of the workflow."
        },
        "version": {
          "type": "string",
          "description": "Indicates a particular of version of the workflow.\nA workflow uniquely referenced by id can have multiple versions."
        },
        "urn": {
          "type": "string",
          "description": "Represents the string that uniquely identifies a revision of a workflow.\nIdentifier and version together also uniquely identifies a workflow revision."
        },
        "closure": {
          "$ref": "#/definitions/adminWorkflowClosure",
          "description": "closure encapsulates all the fields that maps to a compiled version of the workflow."
        }
      },
      "title": "Represents the workflow structure stored in the Admin"
    },
    "adminWorkflowClosure": {
      "type": "object",
      "properties": {
        "compiled_workflow": {
          "$ref": "#/definitions/coreCompiledWorkflowClosure",
          "description": "Represents the compiled representation of the workflow from the specification provided."
        }
      },
      "description": "Represents an encapsulation of the workflow compilation."
    },
    "adminWorkflowCreateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/adminIdentifier",
          "description": "id represents the unique identifier of the workflow."
        },
        "version": {
          "type": "string",
          "description": "Indicates a particular of version of the workflow.\nA workflow uniquely referenced by id can have multiple versions."
        },
        "spec": {
          "$ref": "#/definitions/adminWorkflowSpec",
          "description": "Represents the specification for workflow."
        }
      },
      "description": "Represents a request structure to create a revision of a workflow."
    },
    "adminWorkflowCreateResponse": {
      "type": "object",
      "properties": {
        "urn": {
          "type": "string",
          "description": "Represents the string that uniquely identifies a revision of a workflow.\nIdentifier and version together also uniquely identifies a workflow revision."
        }
      },
      "description": "Represents a response structure if workflow creation succeeds."
    },
    "adminWorkflowExecutionEventRequest": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "title": "Unique ID for this request that can be traced between services"
        },
        "event": {
          "$ref": "#/definitions/eventWorkflowExecutionEvent"
        }
      }
    },
    "adminWorkflowExecutionEventResponse": {
      "type": "object"
    },
    "adminWorkflowList": {
      "type": "object",
      "properties": {
        "workflows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/adminWorkflow"
          },
          "description": "A list of workflows returned based on the request."
        }
      },
      "description": "Represents a list of workflows returned from the admin."
    },
    "adminWorkflowSpec": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/coreWorkflowTemplate",
          "description": "Template of the task that encapsulates all the metadata of the workflow."
        }
      },
      "description": "Represents a structure that encapsulates the specification of the workflow."
    },
    "coreAlias": {
      "type": "object",
      "properties": {
        "var": {
          "type": "string",
          "description": "Must match one of the output variable names on a node."
        },
        "alias": {
          "type": "string",
          "description": "A workflow-level unique alias that downstream nodes can refer to in their input."
        }
      },
      "description": "Links a variable to an alias."
    },
    "coreBinary": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "byte"
        },
        "tag": {
          "type": "string"
        }
      },
      "description": "A simple byte array with a tag to help different parts of the system communicate about what is in the byte array.\nIt's strongly advisable that consumers of this type define a unique tag and validate the tag before parsing the data."
    },
    "coreBinding": {
      "type": "object",
      "properties": {
        "var": {
          "type": "string",
          "description": "Variable name must match an input/output variable of the node."
        },
        "binding": {
          "$ref": "#/definitions/coreBindingData",
          "description": "Data to use to bind this variable."
        }
      },
      "description": "An input/output binding of a variable to either static value or a node output."
    },
    "coreBindingData": {
      "type": "object",
      "properties": {
        "scalar": {
          "$ref": "#/definitions/coreScalar",
          "description": "A simple scalar value."
        },
        "collection": {
          "$ref": "#/definitions/coreBindingDataCollection",
          "description": "A collection of binding data. This allows nesting of binding data to any number\nof levels."
        },
        "promise": {
          "$ref": "#/definitions/coreOutputReference",
          "description": "References an output promised by another node."
        },
        "map": {
          "$ref": "#/definitions/coreBindingDataMap",
          "description": "A map of bindings. The key is always a string."
        }
      },
      "description": "Specifies either a simple value or a reference to another output."
    },
    "coreBindingDataCollection": {
      "type": "object",
      "properties": {
        "bindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreBindingData"
          }
        }
      },
      "description": "A collection of BindingData items."
    },
    "coreBindingDataMap": {
      "type": "object",
      "properties": {
        "bindings": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coreBindingData"
          }
        }
      },
      "description": "A map of BindingData items."
    },
    "coreBlob": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/coreBlobMetadata"
        },
        "uri": {
          "type": "string"
        }
      },
      "description": "Refers to an offloaded set of files. It encapsulates the type of the store and a unique uri for where the data is.\nThere are no restrictions on how the uri is formatted since it will depend on how to interact with the store."
    },
    "coreBlobMetadata": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "title": "Format can be a free form string understood by SDK/UI etc like\ncsv, parquet etc"
        },
        "type": {
          "$ref": "#/definitions/BlobMetadataBlobType"
        }
      }
    },
    "coreBooleanExpression": {
      "type": "object",
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/coreConjunctionExpression"
        },
        "comparison": {
          "$ref": "#/definitions/coreComparisonExpression"
        }
      },
      "description": "Defines a boolean expression tree. It can be a simple or a conjunction expression.\nMultiple expressions can be combined using a conjunction or a disjunction to result in a final boolean result."
    },
    "coreBranchNode": {
      "type": "object",
      "properties": {
        "if_else": {
          "$ref": "#/definitions/coreIfElseBlock",
          "title": "+required"
        }
      },
      "description": "BranchNode is a special node that alter the flow of the workflow graph. It allows the control flow to branch at\nruntime based on a series of conditions that get evaluated on various parameters (e.g. inputs, primtives)."
    },
    "coreComparisonExpression": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/ComparisonExpressionOperator"
        },
        "left_value": {
          "$ref": "#/definitions/coreOperand"
        },
        "right_value": {
          "$ref": "#/definitions/coreOperand"
        }
      },
      "description": "Defines a 2-level tree where the root is a comparison operator and Operands are primitives or known variables.\nEach expression results in a boolean result."
    },
    "coreCompiledTask": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/coreTaskTemplate",
          "title": "Completely contained TaskTemplate"
        }
      },
      "title": "Output of the Compilation step. This object represent one Task. We store more metadata at this layer"
    },
    "coreCompiledWorkflow": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/coreWorkflowTemplate",
          "title": "Completely contained Workflow Template"
        },
        "connections": {
          "$ref": "#/definitions/coreConnectionSet",
          "description": "For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored."
        }
      },
      "title": "Output of the compilation Step. This object represents one workflow. We store more metadata at this layer"
    },
    "coreCompiledWorkflowClosure": {
      "type": "object",
      "properties": {
        "primary": {
          "$ref": "#/definitions/coreCompiledWorkflow",
          "title": "+required"
        },
        "sub_workflows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreCompiledWorkflow"
          },
          "title": "Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a\nunique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow\nas an inlined workflow\n+optional"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreCompiledTask"
          },
          "title": "Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id\n+required (atleast 1)"
        }
      },
      "description": "A Compiled Workflow Closure contains all the information required to start a new execution, or to visualize a workflow\nand its details. The CompiledWorkflowClosure should always contain a primary workflow, that is the main workflow that\nwill being the execution. All subworkflows are denormalized. WorkflowNodes refer the the workflow names of compiled\nsubworkflows."
    },
    "coreConjunctionExpression": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/ConjunctionExpressionLogicalOperator"
        },
        "left_expression": {
          "$ref": "#/definitions/coreBooleanExpression"
        },
        "right_expression": {
          "$ref": "#/definitions/coreBooleanExpression"
        }
      },
      "description": "Defines a conjunction expression of two boolean expressions."
    },
    "coreConnectionSet": {
      "type": "object",
      "properties": {
        "downstream": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConnectionSetIdList"
          },
          "title": "A list of all the node ids that are downstream from a given node id"
        },
        "upstream": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConnectionSetIdList"
          },
          "title": "A list of all the node ids, that are upstream of this node id"
        }
      },
      "title": "Adjacency list for the workflow. This is created as part of the compilation process. Every process after the compilation\nstep uses this created ConnectionSet"
    },
    "coreContainer": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "title": "Container image url. Eg: docker/redis:latest"
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Command to be executed, if not provided, the default entrypoint in the container image will be used."
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "These will default to Flyte given paths. If provided, the system will not append known paths. If the task still\nneeds flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the\nsystem will populate these before executing the container."
        },
        "resources": {
          "$ref": "#/definitions/coreResources",
          "description": "Container resources requirement as specified by the container engine."
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreKeyValuePair"
          },
          "description": "Environment variables will be set as the container is starting up."
        },
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreKeyValuePair"
          },
          "description": "Allows extra configs to be available for the container.\nTODO: elaborate on how configs will become available."
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreContainerPort"
          },
          "title": "Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but\nnot supported on AWS Batch)"
        }
      }
    },
    "coreContainerPort": {
      "type": "object",
      "properties": {
        "container_port": {
          "type": "integer",
          "format": "int64",
          "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536."
        }
      },
      "description": "Defines port properties for a container."
    },
    "coreError": {
      "type": "object",
      "properties": {
        "failed_node_id": {
          "type": "string",
          "description": "The node id that threw the error."
        },
        "message": {
          "type": "string",
          "description": "Error message thrown."
        }
      },
      "description": "Represents an error thrown from a node."
    },
    "coreExecutionError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "title": "Error code indicates a grouping of a type of error.\nMore Info: \u003cLink\u003e"
        },
        "message": {
          "type": "string",
          "description": "Detailed description of the error - including stack trace."
        }
      },
      "description": "Represents the error message from the execution."
    },
    "coreIfBlock": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/coreBooleanExpression"
        },
        "then_node": {
          "$ref": "#/definitions/coreNode"
        }
      },
      "description": "Defines a condition and the execution unit that should be executed if the condition is satisfied."
    },
    "coreIfElseBlock": {
      "type": "object",
      "properties": {
        "case": {
          "$ref": "#/definitions/coreIfBlock",
          "description": "+required. First condition to evaluate."
        },
        "other": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreIfBlock"
          },
          "description": "+optional. Additional branches to evaluate."
        },
        "else_node": {
          "$ref": "#/definitions/coreNode",
          "description": "The node to execute in case none of the branches were taken."
        },
        "error": {
          "$ref": "#/definitions/coreError",
          "description": "An error to throw in case none of the branches were taken."
        }
      },
      "description": "Defines a series of if/else blocks. The first branch whose condition evaluates to true is the one to execute.\nIf no conditions were satisfied, the else_node or the error will execute."
    },
    "coreKeyValuePair": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "required."
        },
        "value": {
          "type": "string",
          "description": "+optional."
        }
      },
      "description": "A generic key value pair."
    },
    "coreLiteral": {
      "type": "object",
      "properties": {
        "scalar": {
          "$ref": "#/definitions/coreScalar",
          "description": "A simple value."
        },
        "collection": {
          "$ref": "#/definitions/coreLiteralCollection",
          "description": "A collection of literals to allow nesting."
        },
        "map": {
          "$ref": "#/definitions/coreLiteralMap",
          "description": "A map of strings to literals."
        }
      },
      "description": "A simple value. This supports any level of nesting (e.g. array of array of array of Blobs) as well as simple primitives."
    },
    "coreLiteralCollection": {
      "type": "object",
      "properties": {
        "literals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreLiteral"
          }
        }
      },
      "description": "A collection of literals. This is a workaround since oneofs in proto messages cannot contain a repeated field."
    },
    "coreLiteralMap": {
      "type": "object",
      "properties": {
        "literals": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coreLiteral"
          }
        }
      },
      "description": "A map of literals. This is a workaround since oneofs in proto messages cannot contain a repeated field."
    },
    "coreLiteralType": {
      "type": "object",
      "properties": {
        "simple": {
          "$ref": "#/definitions/coreSimpleType",
          "description": "A simple type that can be compared one-to-one with another."
        },
        "schema": {
          "$ref": "#/definitions/coreSchemaType",
          "description": "A complex type that requires matching of inner fields."
        },
        "collection_type": {
          "$ref": "#/definitions/coreLiteralType",
          "description": "Defines the type of the value of a collection. Only homogeneous collections are allowed."
        },
        "map_value_type": {
          "$ref": "#/definitions/coreLiteralType",
          "description": "Defines the type of the value of a map type. The type of the key is always a string."
        }
      },
      "description": "Defines a strong type to allow type checking between interfaces."
    },
    "coreNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A workflow-level unique identifier that identifies this node in the workflow. \"inputs\" and \"outputs\" are reserved\nnode ids that cannot be used by other nodes."
        },
        "metadata": {
          "$ref": "#/definitions/coreNodeMetadata",
          "description": "Extra metadata about the node."
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreBinding"
          },
          "description": "Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface\nmust be fullfilled."
        },
        "upstream_node_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "+optional Specifies execution depdendency for this node ensuring it will only get scheduled to run after all its\nupstream nodes have completed. This node will have an implicit depdendency on any node that appears in inputs\nfield."
        },
        "output_aliases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreAlias"
          },
          "description": "+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes\nneed to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this\nnodes outputs using the alias if one's specified."
        },
        "task_node": {
          "$ref": "#/definitions/coreTaskNode",
          "description": "Information about the Task to execute in this node."
        },
        "workflow_node": {
          "$ref": "#/definitions/coreWorkflowNode",
          "description": "Information about the Workflow to execute in this mode."
        },
        "branch_node": {
          "$ref": "#/definitions/coreBranchNode",
          "description": "Information about the branch node to evaluate in this node."
        }
      },
      "description": "A Workflow graph Node. One unit of execution in the graph. Each node can be linked to a Task, a Workflow or a branch\nnode."
    },
    "coreNodeExecutionPhase": {
      "type": "string",
      "enum": [
        "NODE_PHASE_UNDEFINED",
        "NODE_PHASE_RUNNING",
        "NODE_PHASE_SUCCEEDED",
        "NODE_PHASE_FAILING",
        "NODE_PHASE_FAILED",
        "NODE_PHASE_TIMED_OUT",
        "NODE_PHASE_SKIPPED",
        "NODE_PHASE_ABORTED",
        "NODE_PHASE_QUEUED"
      ],
      "default": "NODE_PHASE_UNDEFINED",
      "title": "Indicates various phases of Node Execution"
    },
    "coreNodeMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "A friendly name for the Node"
        },
        "timeout": {
          "type": "string",
          "description": "The overall timeout of a task."
        },
        "retries": {
          "$ref": "#/definitions/coreRetryStrategy",
          "description": "Number of retries per task."
        }
      },
      "description": "Defines extra information about the Node."
    },
    "coreOperand": {
      "type": "object",
      "properties": {
        "primitive": {
          "$ref": "#/definitions/corePrimitive",
          "title": "Can be a constant"
        },
        "var": {
          "type": "string",
          "title": "Or one of this node's input variables"
        }
      },
      "description": "Defines an operand to a comparison expression."
    },
    "coreOutputReference": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "description": "Node id must exist at the graph layer."
        },
        "var": {
          "type": "string",
          "description": "Variable name must refer to an output variable for the node."
        }
      },
      "description": "A reference to an output produced by a node. The type can be retrieved -and validated- from\nthe underlying interface of the node."
    },
    "coreParameter": {
      "type": "object",
      "properties": {
        "var": {
          "$ref": "#/definitions/coreVariable",
          "description": "+required Variable. Defines a name and a type to reference/compare through out the system."
        },
        "default": {
          "$ref": "#/definitions/coreLiteral",
          "description": "Defines a default value that has to match the variable type defined."
        },
        "required": {
          "type": "boolean",
          "format": "boolean",
          "description": "+optional, is this value required to be filled."
        }
      },
      "description": "A parameter is used as input to a launch plan and has\nthe special ability to have a default value or mark itself as required."
    },
    "coreParameterMap": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coreParameter"
          }
        }
      },
      "description": "A map of Parameters."
    },
    "corePrimitive": {
      "type": "object",
      "properties": {
        "integer": {
          "type": "string",
          "format": "int64"
        },
        "float_value": {
          "type": "number",
          "format": "double"
        },
        "string_value": {
          "type": "string"
        },
        "boolean": {
          "type": "boolean",
          "format": "boolean"
        },
        "datetime": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "string"
        }
      },
      "title": "Primitive Types"
    },
    "coreResources": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourcesResourceEntry"
          },
          "description": "The desired set of resources requested."
        },
        "limits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourcesResourceEntry"
          },
          "description": "Defines a set of bounds (e.g. min/max) within which the task can reliably run."
        }
      },
      "description": "A customizable interface to convey resources requested for a container. This can be interpretted differently for different\ncontainer engines."
    },
    "coreRetryStrategy": {
      "type": "object",
      "properties": {
        "retries": {
          "type": "integer",
          "format": "int64",
          "description": "Number of retries. Retries will be consumed when the job fails with a recoverable error.\nThe number of retries must be less than or equals to 10."
        }
      },
      "description": "Retry strategy associated with an executable unit."
    },
    "coreRuntimeMetadata": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/RuntimeMetadataRuntimeType",
          "description": "Type of runtime."
        },
        "version": {
          "type": "string",
          "description": "Version of the runtime. All versions should be backward compatible. However, certain cases call for version\nchecks to ensure tighter validation or setting expectations."
        },
        "flavor": {
          "type": "string",
          "description": "+optional It can be used to provide extra information about the runtime (e.g. python, golang... etc.)."
        }
      },
      "description": "Runtime information. This is losely defined to allow for extensibility."
    },
    "coreScalar": {
      "type": "object",
      "properties": {
        "primitive": {
          "$ref": "#/definitions/corePrimitive"
        },
        "blob": {
          "$ref": "#/definitions/coreBlob"
        },
        "binary": {
          "$ref": "#/definitions/coreBinary"
        },
        "schema": {
          "$ref": "#/definitions/flyteidlcoreSchema"
        },
        "none_type": {
          "$ref": "#/definitions/coreVoid"
        },
        "waitable": {
          "$ref": "#/definitions/coreWaitable",
          "title": "Backwards compatibility"
        },
        "error": {
          "$ref": "#/definitions/coreError"
        }
      }
    },
    "coreSchemaType": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaTypeSchemaColumn"
          },
          "description": "A list of ordered columns this schema comprises of."
        }
      },
      "description": "Defines schema columns and types to strongly type-validate schemas interoperability."
    },
    "coreSimpleType": {
      "type": "string",
      "enum": [
        "NONE",
        "INTEGER",
        "FLOAT",
        "STRING",
        "BOOLEAN",
        "DATETIME",
        "DURATION",
        "BLOB",
        "BINARY",
        "WAITABLE",
        "ERROR"
      ],
      "default": "NONE",
      "description": "Define a set of simple types."
    },
    "coreTaskCategory": {
      "type": "string",
      "enum": [
        "SingleStepTask",
        "MultiStepTask"
      ],
      "default": "SingleStepTask",
      "title": "- SingleStepTask: Task category that identifies if the system can use default structures in UI, etc to drive the task\nTODO should we add Container type of tasks as a special Class?"
    },
    "coreTaskExecutionPhase": {
      "type": "string",
      "enum": [
        "TASK_PHASE_UNDEFINED",
        "TASK_PHASE_QUEUED",
        "TASK_PHASE_RUNNABLE",
        "TASK_PHASE_RUNNING",
        "TASK_PHASE_SUCCEEDED",
        "TASK_PHASE_FAILED",
        "TASK_PHASE_ABORTED"
      ],
      "default": "TASK_PHASE_UNDEFINED",
      "description": "Phases that task plugins can go through. Not all phases may be applicable to a specific plugin task,\nbut this is the cumulative list that customers may want to know about for their task."
    },
    "coreTaskMetadata": {
      "type": "object",
      "properties": {
        "discoverable": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicates whether the system should attempt to lookup this task's output to avoid duplication of work."
        },
        "runtime": {
          "$ref": "#/definitions/coreRuntimeMetadata",
          "description": "Runtime information about the task."
        },
        "timeout": {
          "type": "string",
          "description": "The overall timeout of a task."
        },
        "retries": {
          "$ref": "#/definitions/coreRetryStrategy",
          "description": "Number of retries per task."
        },
        "discovery_version": {
          "type": "string",
          "description": "Indicates a logical version to apply to this task for the purpose of discovery."
        },
        "deprecated": {
          "type": "string",
          "description": "If set, this indicates that this task is deprecated.  This will enable owners of tasks to notify consumers\nof the ending of support for a given task."
        }
      },
      "title": "Task Metadata"
    },
    "coreTaskNode": {
      "type": "object",
      "properties": {
        "reference_id": {
          "type": "string",
          "description": "A globally unique identifier for the task."
        }
      },
      "description": "Refers to the task that the Node is to execute."
    },
    "coreTaskTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Auto generated taskId by the system. Task Id uniquely identifies this task globally."
        },
        "category": {
          "$ref": "#/definitions/coreTaskCategory",
          "title": "Category of the task. These are predefined and help provide defaults"
        },
        "type": {
          "type": "string",
          "description": "A predefined yet extensible Task type identifier. This can be used to customize any of the components. If no\nextensions are provided in the system, Flyte will resolve the this task to its TaskCategory and default the\nimplementation registered for the TaskCategory."
        },
        "metadata": {
          "$ref": "#/definitions/coreTaskMetadata",
          "description": "Extra metadata about the task."
        },
        "interface": {
          "$ref": "#/definitions/coreTypedInterface",
          "description": "A strongly typed interface for the task. This enables others to use this task within a workflow and gauarantees\ncompile-time validation of the workflow to avoid costly runtime failures."
        },
        "custom": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Custom data about the task. This is extensible to allow various plugins in the system."
        },
        "container": {
          "$ref": "#/definitions/coreContainer"
        }
      },
      "description": "A Task structure that uniquely identifies a task in the system\nTasks are registered as a first step in the system."
    },
    "coreTypedInterface": {
      "type": "object",
      "properties": {
        "inputs": {
          "$ref": "#/definitions/coreVariableMap"
        },
        "outputs": {
          "$ref": "#/definitions/coreVariableMap"
        }
      },
      "description": "Defines strongly typed inputs and outputs."
    },
    "coreVariable": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coreLiteralType",
          "description": "Variable literal type."
        },
        "description": {
          "type": "string",
          "title": "+optional string describing input variable"
        }
      },
      "description": "Defines a strongly typed variable."
    },
    "coreVariableMap": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coreVariable"
          }
        }
      },
      "title": "A map of Variables"
    },
    "coreVoid": {
      "type": "object"
    },
    "coreWaitable": {
      "type": "object",
      "properties": {
        "surrogate_key": {
          "type": "string"
        },
        "execution_uri": {
          "type": "string"
        }
      },
      "description": "Defines an execution unit recognized by the system and can be referred to by other units to listen to its execution\nevents (started, succeeded, aborted... etc.)."
    },
    "coreWorkflowExecutionPhase": {
      "type": "string",
      "enum": [
        "WORKFLOW_PHASE_UNDEFINED",
        "WORKFLOW_PHASE_RUNNING",
        "WORKFLOW_PHASE_SUCCEEDING",
        "WORKFLOW_PHASE_SUCCEEDED",
        "WORKFLOW_PHASE_FAILING",
        "WORKFLOW_PHASE_FAILED",
        "WORKFLOW_PHASE_TIMED_OUT",
        "WORKFLOW_PHASE_ABORTED",
        "WORKFLOW_PHASE_QUEUED"
      ],
      "default": "WORKFLOW_PHASE_UNDEFINED",
      "title": "Indicates various phases of Workflow Execution"
    },
    "coreWorkflowMetadata": {
      "type": "object",
      "description": "Metadata for the entire workflow.\nTo be used in the future."
    },
    "coreWorkflowNode": {
      "type": "object",
      "properties": {
        "launchplan_ref": {
          "type": "string",
          "description": "A globally unique identifier for the launch plan."
        },
        "sub_workflow_ref": {
          "type": "string",
          "title": "Reference to a subworkflow, that should be defined with the compiler context"
        }
      },
      "description": "Refers to a the workflow the node is to execute."
    },
    "coreWorkflowTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is an autogenerated id by the system. The id is globally unique across the system."
        },
        "metadata": {
          "$ref": "#/definitions/coreWorkflowMetadata",
          "description": "Extra metadata about the workflow."
        },
        "interface": {
          "$ref": "#/definitions/coreTypedInterface",
          "description": "Defines a strongly typed interface for the Workflow. This can include some optional parameters."
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreNode"
          },
          "description": "A list of nodes. In addition, \"globals\" is a special reserved node id that can be used to consume workflow inputs."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreBinding"
          },
          "description": "A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or\nspecify literals. All workflow outputs specified in the interface field must be bound in order for the workflow\nto be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to\nbind final outputs.\nMost of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can\njust have an output of some constant (`Output(5)`), but usually, the workflow will be pulling\noutputs from the output of a task."
        },
        "failure_node": {
          "$ref": "#/definitions/coreNode",
          "description": "+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.\nThe interface of this node must match the Workflow interface with an additional input named \"error\" of type\npb.lyft.flyte.core.Error."
        }
      },
      "description": "Flyte Workflow Structure that encapsulates task, branch and subworkflow nodes to form a statically analyzable,\ndirected acyclic graph."
    },
    "eventNodeExecutionEvent": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "title": "Node ID"
        },
        "execution_id": {
          "type": "string",
          "title": "Workflow execution id"
        },
        "retry_attempt": {
          "type": "integer",
          "format": "int64",
          "title": "Indicates the retry value for the Node Execution"
        },
        "producer_id": {
          "type": "string",
          "title": "the id of the originator (Propeller) of the event"
        },
        "phase": {
          "$ref": "#/definitions/coreNodeExecutionPhase"
        },
        "occurred_at": {
          "type": "string",
          "format": "date-time",
          "title": "This timestamp represents when the original event occurred"
        },
        "input_uri": {
          "type": "string"
        },
        "output_uri": {
          "type": "string",
          "description": "URL to the output of the execution, it encodes all the information\nincluding Cloud source provider. ie., s3://..."
        },
        "error": {
          "$ref": "#/definitions/coreExecutionError",
          "title": "Error information for the execution"
        }
      }
    },
    "eventTaskExecutionEvent": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "Task execution ID (non-unique per retry)"
        },
        "client_id": {
          "type": "string",
          "title": "A unique ID given by the client that represents this instance of the task execution + retry"
        },
        "parent_id": {
          "type": "string",
          "title": "A node or task can be the parent of this task, the event consumer will use\nthe parent_id to relate it\nSpecifally for parents that are:\n- Tasks: this will be the client_id of that task\n- Nodes: this will be the node_id + execution_id + retry constructed as an id"
        },
        "phase": {
          "$ref": "#/definitions/coreTaskExecutionPhase",
          "title": "Phase associated with the event"
        },
        "producer_id": {
          "type": "string",
          "title": "id of the process that sent this event, mainly for trace debugging"
        },
        "version_num": {
          "type": "string",
          "title": "Optional: a sequence number that denotes the ordering across events.\nThis is useful in situations where a plugin can send multiple events\nfor the same phase"
        },
        "log_uri": {
          "type": "string",
          "title": "URI of the task's log file"
        },
        "retry_attempt": {
          "type": "integer",
          "format": "int64",
          "title": "retry attempt number for this task, ie., 2 for the second attempt"
        },
        "occurred_at": {
          "type": "string",
          "format": "date-time",
          "title": "This represents the timestamp of when the event occured, not the request timestamp"
        },
        "custom_info": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Custom data that the task plugin sends back. This is extensible to allow various plugins in the system."
        }
      },
      "description": "Plugins specific execution event information. For tasks like Python, Hive, Spark, DynamicJob."
    },
    "eventWorkflowExecutionEvent": {
      "type": "object",
      "properties": {
        "execution_id": {
          "type": "string",
          "title": "Workflow execution id"
        },
        "producer_id": {
          "type": "string",
          "title": "the id of the originator (Propeller) of the event"
        },
        "phase": {
          "$ref": "#/definitions/coreWorkflowExecutionPhase"
        },
        "occurred_at": {
          "type": "string",
          "format": "date-time",
          "title": "This timestamp represents when the original event occurred"
        },
        "output_uri": {
          "type": "string",
          "description": "URL to the output of the execution, it encodes all the information\nincluding Cloud source provider. ie., s3://..."
        },
        "error": {
          "$ref": "#/definitions/coreExecutionError",
          "title": "Error information for the execution"
        }
      }
    },
    "flyteidlcoreSchema": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coreSchemaType"
        }
      },
      "description": "A strongly typed schema that defines the interface of data retrieved from the underlying storage medium."
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    }
  }
}
